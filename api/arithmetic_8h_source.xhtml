<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>arithmetic.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_eacaf28dc2715349d1b93fdb7927a3cb.xhtml">expression</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">arithmetic.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="arithmetic_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file arithmetic.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// A collection of arithmetic expressions.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_EXPRESSION_ARITHMETIC_H_</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define SCRAM_SRC_EXPRESSION_ARITHMETIC_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">src/expression.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">/// This class for negation of numerical value or another expression.</span></div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Neg.xhtml">   32</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Neg.xhtml">Neg</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a> {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">  /// Construct a new expression</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">  /// that negates a given argument expression.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">  /// @param[in] expression  The expression to be negated.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Neg.xhtml#a853104bd0aba92aa2b9e57e823fa4e18">Neg</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; expression);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Neg.xhtml#abb1ecf2329266d07ded6359470c01e29">   40</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Neg.xhtml#abb1ecf2329266d07ded6359470c01e29">Mean</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> -expression_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(); }</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Neg.xhtml#aff5035560166429b589032c821d0054f">   41</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Neg.xhtml#aff5035560166429b589032c821d0054f">Max</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> -expression_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>(); }</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Neg.xhtml#a7da67dab2e2355c05a5d1726852a03b1">   42</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Neg.xhtml#a7da67dab2e2355c05a5d1726852a03b1">Min</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> -expression_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Max</a>(); }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordtype">double</span> GetSample() noexcept <span class="keyword">override</span> { <span class="keywordflow">return</span> -expression_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(); }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; expression_;  <span class="comment">///&lt; Expression that is used for negation.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">/// Base class for expressions that require 2 or more arguments.</span></div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BinaryExpression.xhtml">   51</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml">BinaryExpression</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a> {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">  /// Checks the number of provided arguments upon initialization.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">  /// @param[in] args  Arguments of this expression.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">  /// @throws InvalidArgument  The number of arguments is fewer than 2.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml">BinaryExpression</a>(std::vector&lt;ExpressionPtr&gt; <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">args</a>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;};</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">/// This expression adds all the given expressions&#39; values.</span></div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Add.xhtml">   62</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Add.xhtml">Add</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml">BinaryExpression</a> {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml#a2fb02fdc2b351bf8b180fd9847e77519">BinaryExpression::BinaryExpression</a>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Add.xhtml#ac0d5e3bfeb1ee1d48bf8cf388392825a">   66</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Add.xhtml#ac0d5e3bfeb1ee1d48bf8cf388392825a">Mean</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> Compute(&amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Expression::Mean</a>); }</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Add.xhtml#a77d7a4d5e65a84cbf7ba36a4da906c55">   67</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Add.xhtml#a77d7a4d5e65a84cbf7ba36a4da906c55">Max</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> Compute(&amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Expression::Max</a>); }</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Add.xhtml#aa2b2101f0f40604e342f9f7477fdef87">   68</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Add.xhtml#aa2b2101f0f40604e342f9f7477fdef87">Min</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> Compute(&amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Expression::Min</a>); }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordtype">double</span> GetSample() noexcept <span class="keyword">override</span> {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> Compute(&amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Expression::Sample</a>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">  /// Adds all argument expression values.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  /// @param[in] value  The getter function for the arg expression value.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">  /// @returns The sum of the expression values.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> Compute(<span class="keywordtype">double</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>::*value)()) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">double</span> result = 0;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; arg : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>())</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      result += ((*arg).*value)();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;};</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">/// This expression performs subtraction operation.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">/// First expression minus the rest of the given expressions&#39; values.</span></div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sub.xhtml">   90</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Sub.xhtml">Sub</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml">BinaryExpression</a> {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml#a2fb02fdc2b351bf8b180fd9847e77519">BinaryExpression::BinaryExpression</a>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sub.xhtml#acfbcac4774aeefe9b3278d0193f0edbd">   94</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Sub.xhtml#acfbcac4774aeefe9b3278d0193f0edbd">Mean</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> Compute(&amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Expression::Mean</a>); }</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sub.xhtml#ad362e2542f6148aa32ff024ef957ee24">   95</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Sub.xhtml#ad362e2542f6148aa32ff024ef957ee24">Max</a>() noexcept<span class="keyword"> override </span>{</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> Compute(&amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Expression::Max</a>, &amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Expression::Min</a>);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  }</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sub.xhtml#a9f22864663589361efd64b28768d82d0">   98</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Sub.xhtml#a9f22864663589361efd64b28768d82d0">Min</a>() noexcept<span class="keyword"> override </span>{</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> Compute(&amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Expression::Min</a>, &amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Expression::Max</a>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordtype">double</span> GetSample() noexcept <span class="keyword">override</span> {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> Compute(&amp;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Expression::Sample</a>);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">  /// Performs the subtraction of all argument expression values.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  /// @param[in] first_value  The getter function for the first arg expression.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">  /// @param[in] rest_value  The getter function for the rest arg expressions.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">  ///                        If not given, it is equal to first_value.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  /// @returns first_value() - sum(rest_value()).</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> Compute(<span class="keywordtype">double</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>::*first_value)(),</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                 <span class="keywordtype">double</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>::*rest_value)() = <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span> (!rest_value)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      rest_value = first_value;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keyword">auto</span> it = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().begin();</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">double</span> result = ((**it).*first_value)();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">for</span> (++it; it != <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().end(); ++it) {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      result -= ((**it).*rest_value)();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;};</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">/// This expression performs multiplication operation.</span></div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Mul.xhtml">  129</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Mul.xhtml">Mul</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml">BinaryExpression</a> {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml#a2fb02fdc2b351bf8b180fd9847e77519">BinaryExpression::BinaryExpression</a>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Neg.xhtml#abb1ecf2329266d07ded6359470c01e29">Mean</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">  /// Finds maximum product</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  /// from the given arguments&#39; minimum and maximum values.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">  /// Negative values may introduce sign cancellation.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  /// @returns Maximum possible value of the product.</span></div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Mul.xhtml#a5992aca8544d296d4e37f900f2260cc2">  140</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Mul.xhtml#a5992aca8544d296d4e37f900f2260cc2">Max</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> GetExtremum(<span class="comment">/*max=*/</span><span class="keyword">true</span>); }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">  /// Finds minimum product</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">  /// from the given arguments&#39; minimum and maximum values.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">  /// Negative values may introduce sign cancellation.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  /// @returns Minimum possible value of the product.</span></div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Mul.xhtml#aee03ae358cdc67580a188a480eca41f6">  147</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Mul.xhtml#aee03ae358cdc67580a188a480eca41f6">Min</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> GetExtremum(<span class="comment">/*max=*/</span><span class="keyword">false</span>); }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="keywordtype">double</span> GetSample() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">  /// @param[in] maximum  Flag to return maximum value.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">  /// @returns One of extremums.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> GetExtremum(<span class="keywordtype">bool</span> maximum) noexcept;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;};</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">/// This expression performs division operation.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">/// The expression divides the first given argument by</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">/// the rest of argument expressions.</span></div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Div.xhtml">  161</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Div.xhtml">Div</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml">BinaryExpression</a> {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml#a2fb02fdc2b351bf8b180fd9847e77519">BinaryExpression::BinaryExpression</a>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">  /// @throws InvalidArgument  Division by 0.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af3e09d926b52f6077aa85c26454c4e18">Validate</a>() <span class="keyword">const override</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Neg.xhtml#abb1ecf2329266d07ded6359470c01e29">Mean</a>() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">  /// Finds maximum results of division</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">  /// of the given arguments&#39; minimum and maximum values.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">  /// Negative values may introduce sign cancellation.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">  /// @returns Maximum value for division of arguments.</span></div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Div.xhtml#a26ca388963d5a882272b528a82afd5fa">  175</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Div.xhtml#a26ca388963d5a882272b528a82afd5fa">Max</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> GetExtremum(<span class="comment">/*max=*/</span><span class="keyword">true</span>); }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">  /// Finds minimum results of division</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">  /// of the given arguments&#39; minimum and maximum values.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">  /// Negative values may introduce sign cancellation.</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">  /// @returns Minimum value for division of arguments.</span></div><div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Div.xhtml#ad5d03a3f0b8cc892cdae5c2bc4f6ab32">  182</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Div.xhtml#ad5d03a3f0b8cc892cdae5c2bc4f6ab32">Min</a>() noexcept<span class="keyword"> override </span>{ <span class="keywordflow">return</span> GetExtremum(<span class="comment">/*max=*/</span><span class="keyword">false</span>); }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <span class="keywordtype">double</span> GetSample() noexcept <span class="keyword">override</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">  /// @param[in] maximum  Flag to return maximum value.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">  /// @returns One of extremums.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> GetExtremum(<span class="keywordtype">bool</span> maximum) noexcept;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;};</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_EXPRESSION_ARITHMETIC_H_</span></div><div class="ttc" id="classscram_1_1mef_1_1Sub_xhtml_acfbcac4774aeefe9b3278d0193f0edbd"><div class="ttname"><a href="classscram_1_1mef_1_1Sub.xhtml#acfbcac4774aeefe9b3278d0193f0edbd">scram::mef::Sub::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00094">arithmetic.h:94</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Mul_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Mul.xhtml">scram::mef::Mul</a></div><div class="ttdoc">This expression performs multiplication operation. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00129">arithmetic.h:129</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac7e0dd118eafdfa943944172c1625a4e"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">scram::mef::Expression::Mean</a></div><div class="ttdeci">virtual double Mean() noexcept=0</div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_af3e09d926b52f6077aa85c26454c4e18"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#af3e09d926b52f6077aa85c26454c4e18">scram::mef::Expression::Validate</a></div><div class="ttdeci">virtual void Validate() const </div><div class="ttdoc">Validates the expression. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00085">expression.h:85</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Mul_xhtml_aee03ae358cdc67580a188a480eca41f6"><div class="ttname"><a href="classscram_1_1mef_1_1Mul.xhtml#aee03ae358cdc67580a188a480eca41f6">scram::mef::Mul::Min</a></div><div class="ttdeci">double Min() noexceptoverride</div><div class="ttdoc">Finds minimum product from the given arguments&amp;#39; minimum and maximum values. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00147">arithmetic.h:147</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sub_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sub.xhtml">scram::mef::Sub</a></div><div class="ttdoc">This expression performs subtraction operation. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00090">arithmetic.h:90</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Add_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Add.xhtml">scram::mef::Add</a></div><div class="ttdoc">This expression adds all the given expressions&amp;#39; values. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00062">arithmetic.h:62</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a1834910c86a27726923fb285f73cd839"><div class="ttname"><a href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">scram::mef::ExpressionPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Expression &gt; ExpressionPtr</div><div class="ttdoc">Shared expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00038">expression.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Neg_xhtml_a853104bd0aba92aa2b9e57e823fa4e18"><div class="ttname"><a href="classscram_1_1mef_1_1Neg.xhtml#a853104bd0aba92aa2b9e57e823fa4e18">scram::mef::Neg::Neg</a></div><div class="ttdeci">Neg(const ExpressionPtr &amp;expression)</div><div class="ttdoc">Construct a new expression that negates a given argument expression. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8cc_source.xhtml#l00030">arithmetic.cc:30</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Neg_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Neg.xhtml">scram::mef::Neg</a></div><div class="ttdoc">This class for negation of numerical value or another expression. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00032">arithmetic.h:32</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sub_xhtml_ad362e2542f6148aa32ff024ef957ee24"><div class="ttname"><a href="classscram_1_1mef_1_1Sub.xhtml#ad362e2542f6148aa32ff024ef957ee24">scram::mef::Sub::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00095">arithmetic.h:95</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Add_xhtml_aa2b2101f0f40604e342f9f7477fdef87"><div class="ttname"><a href="classscram_1_1mef_1_1Add.xhtml#aa2b2101f0f40604e342f9f7477fdef87">scram::mef::Add::Min</a></div><div class="ttdeci">double Min() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00068">arithmetic.h:68</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ad4d7901b9be9105c9799167cac7af3e1"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; ExpressionPtr &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00079">expression.h:79</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a6b2d7f3d3abf98002c8cccee426edecc"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">scram::mef::Expression::Max</a></div><div class="ttdeci">virtual double Max() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00113">expression.h:113</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sub_xhtml_a9f22864663589361efd64b28768d82d0"><div class="ttname"><a href="classscram_1_1mef_1_1Sub.xhtml#a9f22864663589361efd64b28768d82d0">scram::mef::Sub::Min</a></div><div class="ttdeci">double Min() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00098">arithmetic.h:98</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Neg_xhtml_a7da67dab2e2355c05a5d1726852a03b1"><div class="ttname"><a href="classscram_1_1mef_1_1Neg.xhtml#a7da67dab2e2355c05a5d1726852a03b1">scram::mef::Neg::Min</a></div><div class="ttdeci">double Min() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00042">arithmetic.h:42</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Add_xhtml_ac0d5e3bfeb1ee1d48bf8cf388392825a"><div class="ttname"><a href="classscram_1_1mef_1_1Add.xhtml#ac0d5e3bfeb1ee1d48bf8cf388392825a">scram::mef::Add::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00066">arithmetic.h:66</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Neg_xhtml_abb1ecf2329266d07ded6359470c01e29"><div class="ttname"><a href="classscram_1_1mef_1_1Neg.xhtml#abb1ecf2329266d07ded6359470c01e29">scram::mef::Neg::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00040">arithmetic.h:40</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Neg_xhtml_aff5035560166429b589032c821d0054f"><div class="ttname"><a href="classscram_1_1mef_1_1Neg.xhtml#aff5035560166429b589032c821d0054f">scram::mef::Neg::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00041">arithmetic.h:41</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a9601745b7f61ec67c8074a4043367152"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">scram::mef::Expression::Min</a></div><div class="ttdeci">virtual double Min() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00116">expression.h:116</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Add_xhtml_a77d7a4d5e65a84cbf7ba36a4da906c55"><div class="ttname"><a href="classscram_1_1mef_1_1Add.xhtml#a77d7a4d5e65a84cbf7ba36a4da906c55">scram::mef::Add::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00067">arithmetic.h:67</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Mul_xhtml_a5992aca8544d296d4e37f900f2260cc2"><div class="ttname"><a href="classscram_1_1mef_1_1Mul.xhtml#a5992aca8544d296d4e37f900f2260cc2">scram::mef::Mul::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdoc">Finds maximum product from the given arguments&amp;#39; minimum and maximum values. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00140">arithmetic.h:140</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BinaryExpression_xhtml_a2fb02fdc2b351bf8b180fd9847e77519"><div class="ttname"><a href="classscram_1_1mef_1_1BinaryExpression.xhtml#a2fb02fdc2b351bf8b180fd9847e77519">scram::mef::BinaryExpression::BinaryExpression</a></div><div class="ttdeci">BinaryExpression(std::vector&lt; ExpressionPtr &gt; args)</div><div class="ttdoc">Checks the number of provided arguments upon initialization. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8cc_source.xhtml#l00034">arithmetic.cc:34</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BinaryExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BinaryExpression.xhtml">scram::mef::BinaryExpression</a></div><div class="ttdoc">Base class for expressions that require 2 or more arguments. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00051">arithmetic.h:51</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Div_xhtml_a26ca388963d5a882272b528a82afd5fa"><div class="ttname"><a href="classscram_1_1mef_1_1Div.xhtml#a26ca388963d5a882272b528a82afd5fa">scram::mef::Div::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdoc">Finds maximum results of division of the given arguments&amp;#39; minimum and maximum values. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00175">arithmetic.h:175</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Div_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Div.xhtml">scram::mef::Div</a></div><div class="ttdoc">This expression performs division operation. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00161">arithmetic.h:161</a></div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a5cf00d8b2ff843ad029a501a89ee572a"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">scram::mef::Expression::Sample</a></div><div class="ttdeci">double Sample() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00033">expression.cc:33</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00049">expression.h:49</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Div_xhtml_ad5d03a3f0b8cc892cdae5c2bc4f6ab32"><div class="ttname"><a href="classscram_1_1mef_1_1Div.xhtml#ad5d03a3f0b8cc892cdae5c2bc4f6ab32">scram::mef::Div::Min</a></div><div class="ttdeci">double Min() noexceptoverride</div><div class="ttdoc">Finds minimum results of division of the given arguments&amp;#39; minimum and maximum values. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00182">arithmetic.h:182</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
