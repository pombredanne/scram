<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>event.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">event.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="event_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file event.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of Event Class and its derived classes.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm.hpp&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ccf__group_8h.xhtml">ccf_group.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Event.xhtml#abf9a9efca12d35ea63270d5bcd45ed67">   30</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Event.xhtml#abf9a9efca12d35ea63270d5bcd45ed67">Event::Event</a>(std::string name, std::string base_path, <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> role)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>(std::move(name)),</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      <a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>(role, std::move(base_path)),</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      <a class="code" href="classscram_1_1mef_1_1Id.xhtml">Id</a>(*this, *this),</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;      orphan_(true) {}</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<a class="code" href="classscram_1_1mef_1_1Event.xhtml#a966f53c51a08bdde26c131c7b8474b7f">Event::~Event</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<a class="code" href="classscram_1_1mef_1_1PrimaryEvent.xhtml#aa48af4d6ebf9b331b4d01ae15ef6c15a">PrimaryEvent::~PrimaryEvent</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfEvent.xhtml#a0b325e22d2cd8edbc4fea6af6d93ecc1">   39</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfEvent.xhtml#a0b325e22d2cd8edbc4fea6af6d93ecc1">CcfEvent::CcfEvent</a>(std::string <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>, <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>(std::move(name), ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>(), ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()),</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      ccf_group_(*ccf_group) {}</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Gate.xhtml#abeb0d7efda63e877e150f54719da1ba8">   43</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abeb0d7efda63e877e150f54719da1ba8">Gate::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="comment">// Detect inhibit flavor.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordflow">if</span> (formula_-&gt;type() != kAnd || !<a class="code" href="classscram_1_1mef_1_1Element.xhtml#ae291c86b68c20c0e2b845fbbc8bddb25">Element::HasAttribute</a>(<span class="stringliteral">&quot;flavor&quot;</span>) ||</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a7db1af9365e25a0ce332a1745441630a">Element::GetAttribute</a>(<span class="stringliteral">&quot;flavor&quot;</span>).<a class="code" href="structscram_1_1mef_1_1Attribute.xhtml#a5c75475aadf4a5558c10b24f24bd0b92">value</a> != <span class="stringliteral">&quot;inhibit&quot;</span>) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordflow">if</span> (formula_-&gt;num_args() != 2) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() +</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                          <span class="stringliteral">&quot;INHIBIT gate must have only 2 children&quot;</span>);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordtype">int</span> num_conditional = boost::count_if(</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      formula_-&gt;basic_event_args(),</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      [](<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a>&amp; event) {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">event</span>-&gt;HasAttribute(<span class="stringliteral">&quot;flavor&quot;</span>) &amp;&amp;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;               <span class="keyword">event</span>-&gt;GetAttribute(<span class="stringliteral">&quot;flavor&quot;</span>).value == <span class="stringliteral">&quot;conditional&quot;</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      });</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keywordflow">if</span> (num_conditional != 1)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; : INHIBIT gate must have&quot;</span> +</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                          <span class="stringliteral">&quot; exactly one conditional event.&quot;</span>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#af5ad4f90359a45ffb14e6b376dc89db4">   64</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#af5ad4f90359a45ffb14e6b376dc89db4">Formula::Formula</a>(<a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02a">Operator</a> type) : type_(type), vote_number_(0) {}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#a73f9de40978aad0665e3a6d95e85e7a2">   66</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a73f9de40978aad0665e3a6d95e85e7a2">Formula::vote_number</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordflow">if</span> (!vote_number_)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;Vote number is not set.&quot;</span>);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">return</span> vote_number_;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#ae384d87876edbf13431e3a52437f816c">   72</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a73f9de40978aad0665e3a6d95e85e7a2">Formula::vote_number</a>(<span class="keywordtype">int</span> number) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordflow">if</span> (type_ != kVote) {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="stringliteral">&quot;The vote number can only be defined for &#39;atleast&#39; formulas. &quot;</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="stringliteral">&quot;The operator of this formula is &#39;&quot;</span> +</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        std::string(<a class="code" href="event_8h.xhtml#a909e412c9ddc25648f5b9b6d942bdca9">kOperatorToString</a>[type_]) + <span class="stringliteral">&quot;&#39;.&quot;</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordflow">if</span> (number &lt; 2)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Vote number cannot be less than 2.&quot;</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">if</span> (vote_number_)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;Trying to re-assign a vote number&quot;</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  vote_number_ = number;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Formula.xhtml#afe161f9af00eeaefbab0c81f7078093c">   87</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#afe161f9af00eeaefbab0c81f7078093c">Formula::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keywordflow">switch</span> (type_) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a9ecdf7a6d1bd2981c96c6044688386ba">num_args</a>() &lt; 2)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;\&quot;&quot;</span> + std::string(<a class="code" href="event_8h.xhtml#a909e412c9ddc25648f5b9b6d942bdca9">kOperatorToString</a>[type_]) +</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                              <span class="stringliteral">&quot;\&quot; formula must have 2 or more arguments.&quot;</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">case</span> kNot:</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">case</span> kNull:</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a9ecdf7a6d1bd2981c96c6044688386ba">num_args</a>() != 1)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;\&quot;&quot;</span> + std::string(<a class="code" href="event_8h.xhtml#a909e412c9ddc25648f5b9b6d942bdca9">kOperatorToString</a>[type_]) +</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                              <span class="stringliteral">&quot;\&quot; formula must have only one argument.&quot;</span>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">case</span> kXor:</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a9ecdf7a6d1bd2981c96c6044688386ba">num_args</a>() != 2)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;\&quot;xor\&quot; formula must have exactly 2 arguments.&quot;</span>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">case</span> kVote:</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a9ecdf7a6d1bd2981c96c6044688386ba">num_args</a>() &lt;= vote_number_)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;\&quot;atleast\&quot; formula must have more arguments &quot;</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                              <span class="stringliteral">&quot;than its vote number &quot;</span> +</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                              std::to_string(vote_number_) + <span class="stringliteral">&quot;.&quot;</span>);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1mef_1_1CcfEvent_xhtml_a0b325e22d2cd8edbc4fea6af6d93ecc1"><div class="ttname"><a href="classscram_1_1mef_1_1CcfEvent.xhtml#a0b325e22d2cd8edbc4fea6af6d93ecc1">scram::mef::CcfEvent::CcfEvent</a></div><div class="ttdeci">CcfEvent(std::string name, const CcfGroup *ccf_group)</div><div class="ttdoc">Constructs CCF event with specific name that is used for internal purposes. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00039">event.cc:39</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml">scram::mef::Id</a></div><div class="ttdoc">Mixin class for assigning unique identifiers to elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00173">element.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_aa1843c29411c29b27d79414d34525bbc"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">scram::mef::Role::role</a></div><div class="ttdeci">RoleSpecifier role() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00147">element.h:147</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00118">event.h:118</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_af5ad4f90359a45ffb14e6b376dc89db4"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#af5ad4f90359a45ffb14e6b376dc89db4">scram::mef::Formula::Formula</a></div><div class="ttdeci">Formula(Operator type)</div><div class="ttdoc">Constructs a formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00064">event.cc:64</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Attribute_xhtml_a5c75475aadf4a5558c10b24f24bd0b92"><div class="ttname"><a href="structscram_1_1mef_1_1Attribute.xhtml#a5c75475aadf4a5558c10b24f24bd0b92">scram::mef::Attribute::value</a></div><div class="ttdeci">std::string value</div><div class="ttdoc">Value of this attribute. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00040">element.h:40</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_afe161f9af00eeaefbab0c81f7078093c"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#afe161f9af00eeaefbab0c81f7078093c">scram::mef::Formula::Validate</a></div><div class="ttdeci">void Validate() const </div><div class="ttdoc">Checks if a formula is initialized correctly with the number of arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00087">event.cc:87</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a7db1af9365e25a0ce332a1745441630a"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a7db1af9365e25a0ce332a1745441630a">scram::mef::Element::GetAttribute</a></div><div class="ttdeci">const Attribute &amp; GetAttribute(const std::string &amp;name) const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cc_source.xhtml#l00063">element.cc:63</a></div></div>
<div class="ttc" id="event_8h_xhtml_a909e412c9ddc25648f5b9b6d942bdca9"><div class="ttname"><a href="event_8h.xhtml#a909e412c9ddc25648f5b9b6d942bdca9">scram::mef::kOperatorToString</a></div><div class="ttdeci">const char *const kOperatorToString[]</div><div class="ttdoc">String representations of the operators. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00321">event.h:321</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Event_xhtml_a966f53c51a08bdde26c131c7b8474b7f"><div class="ttname"><a href="classscram_1_1mef_1_1Event.xhtml#a966f53c51a08bdde26c131c7b8474b7f">scram::mef::Event::~Event</a></div><div class="ttdeci">virtual ~Event()=0</div><div class="ttdoc">Abstract class. </div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abeb0d7efda63e877e150f54719da1ba8"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abeb0d7efda63e877e150f54719da1ba8">scram::mef::Gate::Validate</a></div><div class="ttdeci">void Validate() const </div><div class="ttdoc">Checks if a gate is initialized correctly. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00043">event.cc:43</a></div></div>
<div class="ttc" id="event_8h_xhtml_a014b1b08212f876b5f342bb4b52e3d39"><div class="ttname"><a href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">scram::mef::BasicEventPtr</a></div><div class="ttdeci">std::shared_ptr&lt; BasicEvent &gt; BasicEventPtr</div><div class="ttdoc">Shared basic events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00254">event.h:254</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Event_xhtml_abf9a9efca12d35ea63270d5bcd45ed67"><div class="ttname"><a href="classscram_1_1mef_1_1Event.xhtml#abf9a9efca12d35ea63270d5bcd45ed67">scram::mef::Event::Event</a></div><div class="ttdeci">Event(std::string name, std::string base_path=&quot;&quot;, RoleSpecifier role=RoleSpecifier::kPublic)</div><div class="ttdoc">Constructs a fault tree event with a specific id. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00030">event.cc:30</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00127">element.h:127</a></div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02a"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02a">scram::mef::Operator</a></div><div class="ttdeci">Operator</div><div class="ttdoc">Operators for formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00305">event.h:305</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00062">element.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00048">element.h:48</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a73f9de40978aad0665e3a6d95e85e7a2"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a73f9de40978aad0665e3a6d95e85e7a2">scram::mef::Formula::vote_number</a></div><div class="ttdeci">int vote_number() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00066">event.cc:66</a></div></div>
<div class="ttc" id="ccf__group_8h_xhtml"><div class="ttname"><a href="ccf__group_8h.xhtml">ccf_group.h</a></div><div class="ttdoc">Functional containers for basic events grouped by common cause failure. </div></div>
<div class="ttc" id="structscram_1_1LogicError_xhtml"><div class="ttname"><a href="structscram_1_1LogicError.xhtml">scram::LogicError</a></div><div class="ttdoc">Signals internal logic errors, for example, pre-condition failure or use of functionality in ways not...</div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00102">error.h:102</a></div></div>
<div class="ttc" id="structscram_1_1InvalidArgument_xhtml"><div class="ttname"><a href="structscram_1_1InvalidArgument.xhtml">scram::InvalidArgument</a></div><div class="ttdoc">This error class can be used to indicate unacceptable arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00095">error.h:95</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a9ecdf7a6d1bd2981c96c6044688386ba"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a9ecdf7a6d1bd2981c96c6044688386ba">scram::mef::Formula::num_args</a></div><div class="ttdeci">int num_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00366">event.h:366</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_ab91a51488ee8c4ed054de1e8450c8a59"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">scram::mef::Role::base_path</a></div><div class="ttdeci">const std::string &amp; base_path() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00150">element.h:150</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml">scram::mef::CcfGroup</a></div><div class="ttdoc">Abstract base class for all common cause failure models. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00043">ccf_group.h:43</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1PrimaryEvent_xhtml_aa48af4d6ebf9b331b4d01ae15ef6c15a"><div class="ttname"><a href="classscram_1_1mef_1_1PrimaryEvent.xhtml#aa48af4d6ebf9b331b4d01ae15ef6c15a">scram::mef::PrimaryEvent::~PrimaryEvent</a></div><div class="ttdeci">virtual ~PrimaryEvent()=0</div><div class="ttdoc">Abstract class. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_ae291c86b68c20c0e2b845fbbc8bddb25"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#ae291c86b68c20c0e2b845fbbc8bddb25">scram::mef::Element::HasAttribute</a></div><div class="ttdeci">bool HasAttribute(const std::string &amp;name) const </div><div class="ttdoc">Checks if the element has a given attribute. </div><div class="ttdef"><b>Definition:</b> <a href="element_8cc_source.xhtml#l00057">element.cc:57</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml">scram::mef::Role</a></div><div class="ttdoc">Mixin class that manages private or public roles for elements as needed. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00133">element.h:133</a></div></div>
<div class="ttc" id="structscram_1_1ValidationError_xhtml"><div class="ttname"><a href="structscram_1_1ValidationError.xhtml">scram::ValidationError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00069">error.h:69</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
