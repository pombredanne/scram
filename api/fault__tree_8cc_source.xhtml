<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>fault_tree.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">fault_tree.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="fault__tree_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file fault_tree.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of fault tree and component containers.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fault__tree_8h.xhtml">fault_tree.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">   28</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">Component::Component</a>(std::string name, std::string base_path,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                     <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> role)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>(std::move(name)),</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      <a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>(role, std::move(base_path)) {}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a13bc34265c377d54084bda85de38e5ef">   33</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a13bc34265c377d54084bda85de38e5ef">Component::AddGate</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a>&amp; gate) {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  AddEvent(gate, &amp;gates_);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a1be65078ba5109830655771471d0cdf5">   37</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a1be65078ba5109830655771471d0cdf5">Component::AddBasicEvent</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a>&amp; basic_event) {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  AddEvent(basic_event, &amp;basic_events_);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#af39cf695b8aff1bbc17ee6545e3b33f2">   41</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#af39cf695b8aff1bbc17ee6545e3b33f2">Component::AddHouseEvent</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a4ebd6466b2d3ea77c0780af19d75adb9">HouseEventPtr</a>&amp; house_event) {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  AddEvent(house_event, &amp;house_events_);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a5b857d255c4d6471a7c0101c36493c75">   45</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a5b857d255c4d6471a7c0101c36493c75">Component::AddParameter</a>(<span class="keyword">const</span> <a class="code" href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">ParameterPtr</a>&amp; parameter) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keywordflow">if</span> (parameters_.insert(parameter).second == <span class="keyword">false</span>) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Duplicate parameter &quot;</span> + parameter-&gt;name());</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a96be4497b7269c094864d096ee0c789c">   51</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a96be4497b7269c094864d096ee0c789c">Component::AddCcfGroup</a>(<span class="keyword">const</span> <a class="code" href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">CcfGroupPtr</a>&amp; ccf_group) {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keywordflow">if</span> (ccf_groups_.count(ccf_group-&gt;name())) {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Duplicate CCF group &quot;</span> + ccf_group-&gt;name());</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a>&amp; member : ccf_group-&gt;members()) {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a> = member-&gt;name();</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> (gates_.count(name) || basic_events_.count(name) ||</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        house_events_.count(name)) {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Duplicate event &quot;</span> + name +</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                            <span class="stringliteral">&quot; from CCF group &quot;</span> + ccf_group-&gt;name());</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; member : ccf_group-&gt;members())</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    basic_events_.insert(member);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  ccf_groups_.insert(ccf_group);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a223846da8f5f38b27022cdb1143a258e">   68</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a223846da8f5f38b27022cdb1143a258e">Component::AddComponent</a>(std::unique_ptr&lt;Component&gt; component) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">if</span> (components_.count(component-&gt;name())) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Duplicate component &quot;</span> + component-&gt;name());</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  components_.insert(std::move(component));</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">   75</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">Component::GatherGates</a>(std::unordered_set&lt;Gate*&gt;* <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">gates</a>) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a>&amp; gate : gates_)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    gates-&gt;insert(gate.get());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">ComponentPtr</a>&amp; component : components_)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    component-&gt;GatherGates(gates);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Ptr, <span class="keyword">class</span> Container&gt;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keywordtype">void</span> Component::AddEvent(<span class="keyword">const</span> Ptr&amp; event, Container* container) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a> = <span class="keyword">event</span>-&gt;name();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keywordflow">if</span> (gates_.count(name) || basic_events_.count(name) ||</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      house_events_.count(name)) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Duplicate event &quot;</span> + name);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  container-&gt;insert(event);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FaultTree.xhtml#ab090011090e3250c391886a78fd79720">   93</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml#ab090011090e3250c391886a78fd79720">FaultTree::FaultTree</a>(<span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>) : <a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a>(name) {}</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FaultTree.xhtml#a9535bd49edb4598ead887faf8dadd9f2">   95</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml#a9535bd49edb4598ead887faf8dadd9f2">FaultTree::CollectTopEvents</a>() {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  top_events_.clear();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  std::unordered_set&lt;Gate*&gt; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">gates</a>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">Component::GatherGates</a>(&amp;gates);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="comment">// Detects top events.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate : gates)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    MarkNonTopGates(gate, gates);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate : gates) {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;mark()) {  <span class="comment">// Not a top event.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      gate-&gt;mark(<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">NodeMark::kClear</a>);  <span class="comment">// Cleaning up.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      top_events_.push_back(gate);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keywordtype">void</span> FaultTree::MarkNonTopGates(<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                <span class="keyword">const</span> std::unordered_set&lt;Gate*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">gates</a>) {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">mark</a>())</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  MarkNonTopGates(gate-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">formula</a>(), <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">gates</a>);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keywordtype">void</span> FaultTree::MarkNonTopGates(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp; formula,</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                <span class="keyword">const</span> std::unordered_set&lt;Gate*&gt;&amp; gates) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a>&amp; gate : formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a053f49daf89fecd37c4af5ac465b122b">gate_args</a>()) {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> (gates.count(gate.get())) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      MarkNonTopGates(gate.get(), <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">gates</a>);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      gate-&gt;<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">mark</a>(NodeMark::kPermanent);  <span class="comment">// Any non clear mark can be assigned.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a>&amp; arg : formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">formula_args</a>()) {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    MarkNonTopGates(*arg, gates);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00326">event.h:326</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml">scram::mef::Component</a></div><div class="ttdoc">Component is for logical grouping of events, gates, and other components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00040">fault_tree.h:40</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a053f49daf89fecd37c4af5ac465b122b"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a053f49daf89fecd37c4af5ac465b122b">scram::mef::Formula::gate_args</a></div><div class="ttdeci">const std::vector&lt; GatePtr &gt; &amp; gate_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00361">event.h:361</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml"><div class="ttname"><a href="fault__tree_8h.xhtml">fault_tree.h</a></div><div class="ttdoc">Fault Tree and Component containers. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a5b857d255c4d6471a7c0101c36493c75"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a5b857d255c4d6471a7c0101c36493c75">scram::mef::Component::AddParameter</a></div><div class="ttdeci">void AddParameter(const ParameterPtr &amp;parameter)</div><div class="ttdoc">Adds a parameter into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00045">fault_tree.cc:45</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a223846da8f5f38b27022cdb1143a258e"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a223846da8f5f38b27022cdb1143a258e">scram::mef::Component::AddComponent</a></div><div class="ttdeci">void AddComponent(std::unique_ptr&lt; Component &gt; component)</div><div class="ttdoc">Adds a member component container into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00068">fault_tree.cc:68</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abde84a63a060e2424ab92431634f21d9"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">scram::mef::Gate::formula</a></div><div class="ttdeci">const Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00282">event.h:282</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a63441da08667fe6826f3ae0c0a5a94fe"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">scram::mef::Component::GatherGates</a></div><div class="ttdeci">void GatherGates(std::unordered_set&lt; Gate * &gt; *gates)</div><div class="ttdoc">Recursively traverses components to gather gates relevant to the whole component. ...</div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00075">fault_tree.cc:75</a></div></div>
<div class="ttc" id="event_8h_xhtml_a04cb31142e9883483951cba3ab63b597"><div class="ttname"><a href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">scram::mef::GatePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Shared gates in models. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00115">event.h:115</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_ae433446a44a3ae40ec411b08916ec4ca"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">scram::mef::NodeMark::mark</a></div><div class="ttdeci">Mark mark() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00215">element.h:215</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a1572ca4bef5e3095daa07536ec422ac7"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">scram::mef::Component::Component</a></div><div class="ttdeci">Component(std::string name, std::string base_path=&quot;&quot;, RoleSpecifier role=RoleSpecifier::kPublic)</div><div class="ttdoc">Constructs a component assuming that it exists within some fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00028">fault_tree.cc:28</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FaultTree_xhtml_a9535bd49edb4598ead887faf8dadd9f2"><div class="ttname"><a href="classscram_1_1mef_1_1FaultTree.xhtml#a9535bd49edb4598ead887faf8dadd9f2">scram::mef::FaultTree::CollectTopEvents</a></div><div class="ttdeci">void CollectTopEvents()</div><div class="ttdoc">Collects top event gates in this fault tree with components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00095">fault_tree.cc:95</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FaultTree_xhtml_ab090011090e3250c391886a78fd79720"><div class="ttname"><a href="classscram_1_1mef_1_1FaultTree.xhtml#ab090011090e3250c391886a78fd79720">scram::mef::FaultTree::FaultTree</a></div><div class="ttdeci">FaultTree(const std::string &amp;name)</div><div class="ttdoc">The main constructor of the Fault Tree. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00093">fault_tree.cc:93</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a83d4c556f58ec061175b71895877375b"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">scram::mef::Component::gates</a></div><div class="ttdeci">const ElementTable&lt; GatePtr &gt; &amp; gates() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00064">fault_tree.h:64</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_af3c5953f817cc202b5009cc4557c7d72"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">scram::mef::Formula::formula_args</a></div><div class="ttdeci">const std::vector&lt; FormulaPtr &gt; &amp; formula_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00362">event.h:362</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">scram::mef::NodeMark::kClear</a></div><div class="ttdoc">Implicit conversion to Boolean false. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00209">element.h:209</a></div></div>
<div class="ttc" id="parameter_8h_xhtml_ad02b8dbf956c6c94b34ce9a703d7b408"><div class="ttname"><a href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">scram::mef::ParameterPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Parameter &gt; ParameterPtr</div><div class="ttdoc">Shared parameters. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00088">parameter.h:88</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a96be4497b7269c094864d096ee0c789c"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a96be4497b7269c094864d096ee0c789c">scram::mef::Component::AddCcfGroup</a></div><div class="ttdeci">void AddCcfGroup(const CcfGroupPtr &amp;ccf_group)</div><div class="ttdoc">Adds a CCF group and its members into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00051">fault_tree.cc:51</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="event_8h_xhtml_a4ebd6466b2d3ea77c0780af19d75adb9"><div class="ttname"><a href="event_8h.xhtml#a4ebd6466b2d3ea77c0780af19d75adb9">scram::mef::HouseEventPtr</a></div><div class="ttdeci">std::shared_ptr&lt; HouseEvent &gt; HouseEventPtr</div><div class="ttdoc">Shared house events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00253">event.h:253</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a13bc34265c377d54084bda85de38e5ef"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a13bc34265c377d54084bda85de38e5ef">scram::mef::Component::AddGate</a></div><div class="ttdeci">void AddGate(const GatePtr &amp;gate)</div><div class="ttdoc">Adds a gate into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00033">fault_tree.cc:33</a></div></div>
<div class="ttc" id="event_8h_xhtml_a014b1b08212f876b5f342bb4b52e3d39"><div class="ttname"><a href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">scram::mef::BasicEventPtr</a></div><div class="ttdeci">std::shared_ptr&lt; BasicEvent &gt; BasicEventPtr</div><div class="ttdoc">Shared basic events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00254">event.h:254</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a1be65078ba5109830655771471d0cdf5"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a1be65078ba5109830655771471d0cdf5">scram::mef::Component::AddBasicEvent</a></div><div class="ttdeci">void AddBasicEvent(const BasicEventPtr &amp;basic_event)</div><div class="ttdoc">Adds a basic event into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00037">fault_tree.cc:37</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00262">event.h:262</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00127">element.h:127</a></div></div>
<div class="ttc" id="ccf__group_8h_xhtml_a2736f823d103bed2d002c9ce6f0c217c"><div class="ttname"><a href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">scram::mef::CcfGroupPtr</a></div><div class="ttdeci">std::shared_ptr&lt; CcfGroup &gt; CcfGroupPtr</div><div class="ttdoc">Shared CCF groups. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00164">ccf_group.h:164</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00062">element.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00048">element.h:48</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml_ad5409b17f257599c4dd852533a4f289a"><div class="ttname"><a href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">scram::mef::ComponentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Component &gt; ComponentPtr</div><div class="ttdoc">Unique system components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00155">fault_tree.h:155</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00257">event.h:257</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml">scram::mef::Role</a></div><div class="ttdoc">Mixin class that manages private or public roles for elements as needed. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00133">element.h:133</a></div></div>
<div class="ttc" id="structscram_1_1ValidationError_xhtml"><div class="ttname"><a href="structscram_1_1ValidationError.xhtml">scram::ValidationError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00069">error.h:69</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_af39cf695b8aff1bbc17ee6545e3b33f2"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#af39cf695b8aff1bbc17ee6545e3b33f2">scram::mef::Component::AddHouseEvent</a></div><div class="ttdeci">void AddHouseEvent(const HouseEventPtr &amp;house_event)</div><div class="ttdoc">Adds a house event into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00041">fault_tree.cc:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
