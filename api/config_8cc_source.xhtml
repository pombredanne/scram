<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>config.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">config.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="config_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file config.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of configuration facilities.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="config_8h.xhtml">config.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;boost/filesystem.hpp&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="env_8h.xhtml">env.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="xml_8h.xhtml">xml.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classscram_1_1Config.xhtml#ab0d7940fbb627fab9867821e133eab5d">   35</a></span>&#160;<a class="code" href="classscram_1_1Config.xhtml#ab0d7940fbb627fab9867821e133eab5d">Config::Config</a>(<span class="keyword">const</span> std::string&amp; config_file) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">static</span> xmlpp::RelaxNGValidator validator(<a class="code" href="classscram_1_1Env.xhtml#a370a9dc7fd8098d09cfefc825b4471ed">Env::config_schema</a>());</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordflow">if</span> (boost::filesystem::exists(config_file) == <span class="keyword">false</span>)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1IOError.xhtml">IOError</a>(<span class="stringliteral">&quot;The file &#39;&quot;</span> + config_file + <span class="stringliteral">&quot;&#39; could not be loaded.&quot;</span>);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  std::unique_ptr&lt;xmlpp::DomParser&gt; parser = <a class="code" href="xml_8h.xhtml#ac6e06a790ddf60f0108718e37bb405ed">ConstructDomParser</a>(config_file);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    validator.validate(parser-&gt;get_document());</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  } <span class="keywordflow">catch</span> (<span class="keyword">const</span> xmlpp::validity_error&amp; err) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;In file &#39;&quot;</span> + config_file + <span class="stringliteral">&quot;&#39;, &quot;</span> + err.what());</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keyword">const</span> xmlpp::Node* root = parser-&gt;get_document()-&gt;get_root_node();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  assert(root-&gt;get_name() == <span class="stringliteral">&quot;config&quot;</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  GatherInputFiles(root);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  GetOutputPath(root);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    GatherOptions(root);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="classscram_1_1Error.xhtml">Error</a>&amp; err) {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(<span class="stringliteral">&quot;In file &#39;&quot;</span> + config_file + <span class="stringliteral">&quot;&#39;, &quot;</span> + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keywordtype">void</span> Config::GatherInputFiles(<span class="keyword">const</span> xmlpp::Node* root) {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  xmlpp::NodeSet <a class="code" href="classscram_1_1Config.xhtml#a5ac61fcdac1a41a1d19c191c9a5c50b4">input_files</a> = root-&gt;find(<span class="stringliteral">&quot;./input-files&quot;</span>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keywordflow">if</span> (input_files.empty())</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  assert(input_files.size() == 1);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keyword">const</span> xmlpp::Element* files = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(input_files.front());</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  xmlpp::NodeSet all_files = files-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  assert(!all_files.empty());</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : all_files) {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> xmlpp::Element* file = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    assert(file-&gt;get_name() == <span class="stringliteral">&quot;file&quot;</span>);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    input_files_.push_back(<a class="code" href="xml_8h.xhtml#a818b7826f3993c5ff58d45a237274285">GetContent</a>(file-&gt;get_child_text()));</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keywordtype">void</span> Config::GatherOptions(<span class="keyword">const</span> xmlpp::Node* root) {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  xmlpp::NodeSet options = root-&gt;find(<span class="stringliteral">&quot;./options&quot;</span>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordflow">if</span> (options.empty())</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  assert(options.size() == 1);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keyword">const</span> xmlpp::Element* element = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(options.front());</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  xmlpp::NodeSet all_options = element-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  assert(!all_options.empty());</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordtype">int</span> line_number = 0;  <span class="comment">// For error reporting.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// The loop is used instead of query</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// because the order of options matters,</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// yet this function should not know what the order is.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : all_options) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      line_number = node-&gt;get_line();</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      <span class="keyword">const</span> xmlpp::Element* option_group = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      std::string name = option_group-&gt;get_name();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;algorithm&quot;</span>) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        SetAlgorithm(option_group);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;analysis&quot;</span>) {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        SetAnalysis(option_group);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;prime-implicants&quot;</span>) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#ae64f362fceb44402e101140dfc1725ba">prime_implicants</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;approximation&quot;</span>) {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        SetApproximation(option_group);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;limits&quot;</span>) {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        SetLimits(option_group);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>&amp; err) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(<span class="stringliteral">&quot;Line &quot;</span> + std::to_string(line_number) + <span class="stringliteral">&quot;:\n&quot;</span> + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keywordtype">void</span> Config::GetOutputPath(<span class="keyword">const</span> xmlpp::Node* root) {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  xmlpp::NodeSet out = root-&gt;find(<span class="stringliteral">&quot;./output-path&quot;</span>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordflow">if</span> (out.empty())</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  assert(out.size() == 1);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <span class="keyword">const</span> xmlpp::Element* element = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(out.front());</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  output_path_ = <a class="code" href="xml_8h.xhtml#a818b7826f3993c5ff58d45a237274285">GetContent</a>(element-&gt;get_child_text());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keywordtype">void</span> Config::SetAlgorithm(<span class="keyword">const</span> xmlpp::Element* analysis) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#af318d3999256756c69c57190ac65b3a5">algorithm</a>(<a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(analysis, <span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keywordtype">void</span> Config::SetAnalysis(<span class="keyword">const</span> xmlpp::Element* analysis) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Attribute* type : analysis-&gt;get_attributes()) {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    std::string name = type-&gt;get_name();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">bool</span> flag = GetBoolFromString(type-&gt;get_value());</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;probability&quot;</span>) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a83ddd939f7217fb9f0438bd1dd01f7b1">probability_analysis</a>(flag);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;importance&quot;</span>) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a16c99e2ccd22a9be037f6c6fe229894b">importance_analysis</a>(flag);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;uncertainty&quot;</span>) {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#aa07ede20b118ae78028fb0807e52f632">uncertainty_analysis</a>(flag);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;ccf&quot;</span>) {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a4a71410d7b91bb82cadc29c0fe0b2506">ccf_analysis</a>(flag);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keywordtype">void</span> Config::SetApproximation(<span class="keyword">const</span> xmlpp::Element* approx) {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#ab319bbe7cbd01fcf0aa601dc5afb2c88">approximation</a>(<a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(approx, <span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keywordtype">void</span> Config::SetLimits(<span class="keyword">const</span> xmlpp::Element* limits) {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : limits-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>)) {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">const</span> xmlpp::Element* limit = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    std::string name = limit-&gt;get_name();</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;product-order&quot;</span>) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>(CastChildText&lt;int&gt;(limit));</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;cut-off&quot;</span>) {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#acbba7a642ade93cf58155748cdf0b446">cut_off</a>(CastChildText&lt;double&gt;(limit));</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;mission-time&quot;</span>) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0c130c599ff39bd4a5b269907f06b66d">mission_time</a>(CastChildText&lt;double&gt;(limit));</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;number-of-trials&quot;</span>) {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#adda26a07ac3d505246a23b80829f8267">num_trials</a>(CastChildText&lt;int&gt;(limit));</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;number-of-quantiles&quot;</span>) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a35d180dd84bc1006157a02791c4bd210">num_quantiles</a>(CastChildText&lt;int&gt;(limit));</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;number-of-bins&quot;</span>) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#ad646c62b90b1e6cef5a2db6ea9834601">num_bins</a>(CastChildText&lt;int&gt;(limit));</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;seed&quot;</span>) {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      settings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a9937a41d3fd1369f2eea59e1f33a1ac5">seed</a>(CastChildText&lt;int&gt;(limit));</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keywordtype">bool</span> Config::GetBoolFromString(<span class="keyword">const</span> std::string&amp; flag) {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  assert(flag == <span class="stringliteral">&quot;1&quot;</span> || flag == <span class="stringliteral">&quot;true&quot;</span> || flag == <span class="stringliteral">&quot;0&quot;</span> || flag == <span class="stringliteral">&quot;false&quot;</span>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keywordflow">if</span> (flag == <span class="stringliteral">&quot;1&quot;</span> || flag == <span class="stringliteral">&quot;true&quot;</span>)</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="structscram_1_1IOError_xhtml"><div class="ttname"><a href="structscram_1_1IOError.xhtml">scram::IOError</a></div><div class="ttdoc">For input/output related errors. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00089">error.h:89</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_adda26a07ac3d505246a23b80829f8267"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#adda26a07ac3d505246a23b80829f8267">scram::core::Settings::num_trials</a></div><div class="ttdeci">int num_trials() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00115">settings.h:115</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_ab319bbe7cbd01fcf0aa601dc5afb2c88"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#ab319bbe7cbd01fcf0aa601dc5afb2c88">scram::core::Settings::approximation</a></div><div class="ttdeci">const std::string &amp; approximation() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00102">settings.h:102</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_aa07ede20b118ae78028fb0807e52f632"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#aa07ede20b118ae78028fb0807e52f632">scram::core::Settings::uncertainty_analysis</a></div><div class="ttdeci">bool uncertainty_analysis() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00210">settings.h:210</a></div></div>
<div class="ttc" id="classscram_1_1Error_xhtml"><div class="ttname"><a href="classscram_1_1Error.xhtml">scram::Error</a></div><div class="ttdoc">The Error class is the base class for common exceptions specific to the SCRAM code. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00031">error.h:31</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="xml_8h_xhtml"><div class="ttname"><a href="xml_8h.xhtml">xml.h</a></div><div class="ttdoc">XML helper facilities to work with libxml++. </div></div>
<div class="ttc" id="xml_8h_xhtml_ac6e06a790ddf60f0108718e37bb405ed"><div class="ttname"><a href="xml_8h.xhtml#ac6e06a790ddf60f0108718e37bb405ed">scram::ConstructDomParser</a></div><div class="ttdeci">std::unique_ptr&lt; xmlpp::DomParser &gt; ConstructDomParser(const std::string &amp;file_path)</div><div class="ttdoc">Initializes a DOM parser and converts library exceptions into local errors. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00044">xml.h:44</a></div></div>
<div class="ttc" id="classscram_1_1Env_xhtml_a370a9dc7fd8098d09cfefc825b4471ed"><div class="ttname"><a href="classscram_1_1Env.xhtml#a370a9dc7fd8098d09cfefc825b4471ed">scram::Env::config_schema</a></div><div class="ttdeci">static std::string config_schema()</div></div>
<div class="ttc" id="xml_8h_xhtml_a818b7826f3993c5ff58d45a237274285"><div class="ttname"><a href="xml_8h.xhtml#a818b7826f3993c5ff58d45a237274285">scram::GetContent</a></div><div class="ttdeci">std::string GetContent(const xmlpp::TextNode *child_text)</div><div class="ttdoc">Returns Normalized content of an XML text node. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00097">xml.h:97</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a35d180dd84bc1006157a02791c4bd210"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a35d180dd84bc1006157a02791c4bd210">scram::core::Settings::num_quantiles</a></div><div class="ttdeci">int num_quantiles() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00127">settings.h:127</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_af318d3999256756c69c57190ac65b3a5"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#af318d3999256756c69c57190ac65b3a5">scram::core::Settings::algorithm</a></div><div class="ttdeci">const std::string &amp; algorithm() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00040">settings.h:40</a></div></div>
<div class="ttc" id="classscram_1_1Error_xhtml_a35818dcc7c8dde101d4fd117adf47bc3"><div class="ttname"><a href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">scram::Error::msg</a></div><div class="ttdeci">const std::string &amp; msg() const </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00046">error.h:46</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a0c130c599ff39bd4a5b269907f06b66d"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a0c130c599ff39bd4a5b269907f06b66d">scram::core::Settings::mission_time</a></div><div class="ttdeci">double mission_time() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00163">settings.h:163</a></div></div>
<div class="ttc" id="xml_8h_xhtml_ab908f9834f69be3009ee07445b51a673"><div class="ttname"><a href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">scram::XmlElement</a></div><div class="ttdeci">const xmlpp::Element * XmlElement(const xmlpp::Node *node)</div><div class="ttdoc">Helper function to statically cast to XML element. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00060">xml.h:60</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a0e43ec0f017d23a4fa4e376c4060d380"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">scram::core::Settings::limit_order</a></div><div class="ttdeci">int limit_order() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00075">settings.h:75</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a9937a41d3fd1369f2eea59e1f33a1ac5"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a9937a41d3fd1369f2eea59e1f33a1ac5">scram::core::Settings::seed</a></div><div class="ttdeci">int seed() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00151">settings.h:151</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a4a71410d7b91bb82cadc29c0fe0b2506"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a4a71410d7b91bb82cadc29c0fe0b2506">scram::core::Settings::ccf_analysis</a></div><div class="ttdeci">bool ccf_analysis() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00227">settings.h:227</a></div></div>
<div class="ttc" id="config_8h_xhtml"><div class="ttname"><a href="config_8h.xhtml">config.h</a></div><div class="ttdoc">Configuration management facilities to make various setups for analysis possible. ...</div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a83ddd939f7217fb9f0438bd1dd01f7b1"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a83ddd939f7217fb9f0438bd1dd01f7b1">scram::core::Settings::probability_analysis</a></div><div class="ttdeci">bool probability_analysis() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00175">settings.h:175</a></div></div>
<div class="ttc" id="classscram_1_1Config_xhtml_ab0d7940fbb627fab9867821e133eab5d"><div class="ttname"><a href="classscram_1_1Config.xhtml#ab0d7940fbb627fab9867821e133eab5d">scram::Config::Config</a></div><div class="ttdeci">Config(const std::string &amp;config_file)</div><div class="ttdoc">A constructor with configurations for analysis. </div><div class="ttdef"><b>Definition:</b> <a href="config_8cc_source.xhtml#l00035">config.cc:35</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_ae64f362fceb44402e101140dfc1725ba"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#ae64f362fceb44402e101140dfc1725ba">scram::core::Settings::prime_implicants</a></div><div class="ttdeci">bool prime_implicants() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00059">settings.h:59</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a16c99e2ccd22a9be037f6c6fe229894b"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a16c99e2ccd22a9be037f6c6fe229894b">scram::core::Settings::importance_analysis</a></div><div class="ttdeci">bool importance_analysis() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00192">settings.h:192</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_acbba7a642ade93cf58155748cdf0b446"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#acbba7a642ade93cf58155748cdf0b446">scram::core::Settings::cut_off</a></div><div class="ttdeci">double cut_off() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00087">settings.h:87</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_ad646c62b90b1e6cef5a2db6ea9834601"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#ad646c62b90b1e6cef5a2db6ea9834601">scram::core::Settings::num_bins</a></div><div class="ttdeci">int num_bins() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00139">settings.h:139</a></div></div>
<div class="ttc" id="classscram_1_1Config_xhtml_a5ac61fcdac1a41a1d19c191c9a5c50b4"><div class="ttname"><a href="classscram_1_1Config.xhtml#a5ac61fcdac1a41a1d19c191c9a5c50b4">scram::Config::input_files</a></div><div class="ttdeci">const std::vector&lt; std::string &gt; &amp; input_files() const </div><div class="ttdef"><b>Definition:</b> <a href="config_8h_source.xhtml#l00050">config.h:50</a></div></div>
<div class="ttc" id="xml_8h_xhtml_a0c5491388e25d1f1badb26b56ef302e7"><div class="ttname"><a href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">scram::GetAttributeValue</a></div><div class="ttdeci">std::string GetAttributeValue(const xmlpp::Element *element, const std::string &amp;attribute_name)</div><div class="ttdoc">Returns Normalized (trimmed) string value of an XML element attribute. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00065">xml.h:65</a></div></div>
<div class="ttc" id="env_8h_xhtml"><div class="ttname"><a href="env_8h.xhtml">env.h</a></div><div class="ttdoc">Environmental Variables. </div></div>
<div class="ttc" id="structscram_1_1InvalidArgument_xhtml"><div class="ttname"><a href="structscram_1_1InvalidArgument.xhtml">scram::InvalidArgument</a></div><div class="ttdoc">This error class can be used to indicate unacceptable arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00095">error.h:95</a></div></div>
<div class="ttc" id="structscram_1_1ValidationError_xhtml"><div class="ttname"><a href="structscram_1_1ValidationError.xhtml">scram::ValidationError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00069">error.h:69</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
