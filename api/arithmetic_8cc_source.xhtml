<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>arithmetic.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_eacaf28dc2715349d1b93fdb7927a3cb.xhtml">expression</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">arithmetic.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="arithmetic_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file arithmetic.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of various arithmetic expressions.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arithmetic_8h.xhtml">arithmetic.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">src/error.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Neg.xhtml#a853104bd0aba92aa2b9e57e823fa4e18">   30</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Neg.xhtml#a853104bd0aba92aa2b9e57e823fa4e18">Neg::Neg</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; expression)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>({expression}),</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      expression_(*expression) {}</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BinaryExpression.xhtml#a2fb02fdc2b351bf8b180fd9847e77519">   34</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1BinaryExpression.xhtml#a2fb02fdc2b351bf8b180fd9847e77519">BinaryExpression::BinaryExpression</a>(std::vector&lt;ExpressionPtr&gt; <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">args</a>)</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>(std::move(args)) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().size() &lt; 2)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Expression requires 2 or more arguments.&quot;</span>);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Mul.xhtml#a0bf0978d21e3124febae69aff2a5e48c">   40</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Mul.xhtml#a0bf0978d21e3124febae69aff2a5e48c">Mul::Mean</a>() noexcept {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keywordtype">double</span> mean = 1;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; arg : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>())</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    mean *= arg-&gt;Mean();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keywordflow">return</span> mean;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keywordtype">double</span> Mul::GetSample() noexcept {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keywordtype">double</span> result = 1;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; arg : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>())</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    result *= arg-&gt;Sample();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keywordtype">double</span> Mul::GetExtremum(<span class="keywordtype">bool</span> maximum) noexcept {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordtype">double</span> max_val = 1;  <span class="comment">// Maximum possible product.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordtype">double</span> min_val = 1;  <span class="comment">// Minimum possible product.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; arg : <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>()) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">double</span> mult_max = arg-&gt;Max();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">double</span> mult_min = arg-&gt;Min();</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordtype">double</span> max_max = max_val * mult_max;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordtype">double</span> max_min = max_val * mult_min;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordtype">double</span> min_max = min_val * mult_max;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">double</span> min_min = min_val * mult_min;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    max_val = std::max({max_max, max_min, min_max, min_min});</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    min_val = std::min({max_max, max_min, min_max, min_min});</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordflow">return</span> maximum ? max_val : min_val;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Div.xhtml#a7aa2e954d532b10230ae7a2a808192de">   70</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Div.xhtml#a7aa2e954d532b10230ae7a2a808192de">Div::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keyword">auto</span> it = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().begin();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keywordflow">for</span> (++it; it != <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().end(); ++it) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; expr = *it;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">if</span> (!expr-&gt;Mean() || !expr-&gt;Max() || !expr-&gt;Min())</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Division by 0.&quot;</span>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Div.xhtml#acb849e9339e68a6e2da69a1ed13b39cc">   79</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Div.xhtml#acb849e9339e68a6e2da69a1ed13b39cc">Div::Mean</a>() noexcept {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keyword">auto</span> it = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().begin();</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordtype">double</span> mean = (*it)-&gt;Mean();</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">for</span> (++it; it != <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().end(); ++it) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    mean /= (*it)-&gt;Mean();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keywordflow">return</span> mean;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keywordtype">double</span> Div::GetSample() noexcept {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keyword">auto</span> it = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().begin();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordtype">double</span> result = (*it)-&gt;Sample();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordflow">for</span> (++it; it != <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().end(); ++it)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    result /= (*it)-&gt;Sample();</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keywordtype">double</span> Div::GetExtremum(<span class="keywordtype">bool</span> maximum) noexcept {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keyword">auto</span> it = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().begin();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordtype">double</span> max_value = (*it)-&gt;Max();  <span class="comment">// Maximum possible result.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordtype">double</span> min_value = (*it)-&gt;Min();  <span class="comment">// Minimum possible result.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keywordflow">for</span> (++it; it != <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().end(); ++it) {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">double</span> div_max = (*it)-&gt;Max();</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">double</span> div_min = (*it)-&gt;Min();</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">double</span> max_max = max_value / div_max;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">double</span> max_min = max_value / div_min;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">double</span> min_max = min_value / div_max;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">double</span> min_min = min_value / div_min;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    max_value = std::max({max_max, max_min, min_max, min_min});</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    min_value = std::min({max_max, max_min, min_max, min_min});</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordflow">return</span> maximum ? max_value : min_value;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="arithmetic_8h_xhtml"><div class="ttname"><a href="arithmetic_8h.xhtml">arithmetic.h</a></div><div class="ttdoc">A collection of arithmetic expressions. </div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="expression_8h_xhtml_a1834910c86a27726923fb285f73cd839"><div class="ttname"><a href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">scram::mef::ExpressionPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Expression &gt; ExpressionPtr</div><div class="ttdoc">Shared expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00038">expression.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Neg_xhtml_a853104bd0aba92aa2b9e57e823fa4e18"><div class="ttname"><a href="classscram_1_1mef_1_1Neg.xhtml#a853104bd0aba92aa2b9e57e823fa4e18">scram::mef::Neg::Neg</a></div><div class="ttdeci">Neg(const ExpressionPtr &amp;expression)</div><div class="ttdoc">Construct a new expression that negates a given argument expression. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8cc_source.xhtml#l00030">arithmetic.cc:30</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Div_xhtml_a7aa2e954d532b10230ae7a2a808192de"><div class="ttname"><a href="classscram_1_1mef_1_1Div.xhtml#a7aa2e954d532b10230ae7a2a808192de">scram::mef::Div::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8cc_source.xhtml#l00070">arithmetic.cc:70</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ad4d7901b9be9105c9799167cac7af3e1"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; ExpressionPtr &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00079">expression.h:79</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Mul_xhtml_a0bf0978d21e3124febae69aff2a5e48c"><div class="ttname"><a href="classscram_1_1mef_1_1Mul.xhtml#a0bf0978d21e3124febae69aff2a5e48c">scram::mef::Mul::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8cc_source.xhtml#l00040">arithmetic.cc:40</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BinaryExpression_xhtml_a2fb02fdc2b351bf8b180fd9847e77519"><div class="ttname"><a href="classscram_1_1mef_1_1BinaryExpression.xhtml#a2fb02fdc2b351bf8b180fd9847e77519">scram::mef::BinaryExpression::BinaryExpression</a></div><div class="ttdeci">BinaryExpression(std::vector&lt; ExpressionPtr &gt; args)</div><div class="ttdoc">Checks the number of provided arguments upon initialization. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8cc_source.xhtml#l00034">arithmetic.cc:34</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Div_xhtml_acb849e9339e68a6e2da69a1ed13b39cc"><div class="ttname"><a href="classscram_1_1mef_1_1Div.xhtml#acb849e9339e68a6e2da69a1ed13b39cc">scram::mef::Div::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8cc_source.xhtml#l00079">arithmetic.cc:79</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00049">expression.h:49</a></div></div>
<div class="ttc" id="structscram_1_1InvalidArgument_xhtml"><div class="ttname"><a href="structscram_1_1InvalidArgument.xhtml">scram::InvalidArgument</a></div><div class="ttdoc">This error class can be used to indicate unacceptable arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00095">error.h:95</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
