<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>ccf_group.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ccf_group.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ccf__group_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file ccf_group.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of various common cause failure models.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ccf__group_8h.xhtml">ccf_group.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm.hpp&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arithmetic_8h.xhtml">expression/arithmetic.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="constant_8h.xhtml">expression/constant.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#a2cc90ded3fd4643dbe65c8411c4f2165">   31</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a2cc90ded3fd4643dbe65c8411c4f2165">CcfGroup::CcfGroup</a>(std::string name, std::string base_path, <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> role)</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>(std::move(name)),</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      <a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>(role, std::move(base_path)),</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;      <a class="code" href="classscram_1_1mef_1_1Id.xhtml">Id</a>(*this, *this) {}</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#a8321bf4372a0575c88b7162716469d15">   36</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a8321bf4372a0575c88b7162716469d15">CcfGroup::AddMember</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a>&amp; basic_event) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="keywordflow">if</span> (distribution_) {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1IllegalOperation.xhtml">IllegalOperation</a>(<span class="stringliteral">&quot;No more members accepted. The distribution for &quot;</span> +</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                           <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() +</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                           <span class="stringliteral">&quot; CCF group has already been defined.&quot;</span>);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordflow">if</span> (members_.insert(basic_event).second == <span class="keyword">false</span>) {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>(<span class="stringliteral">&quot;Duplicate member &quot;</span> + basic_event-&gt;name() +</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                 <span class="stringliteral">&quot; in &quot;</span> + <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group.&quot;</span>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  }</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#a723878c7c836a52cf9edb5c8d1a37868">   48</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a723878c7c836a52cf9edb5c8d1a37868">CcfGroup::AddDistribution</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; distr) {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordflow">if</span> (distribution_)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;CCF distribution is already defined.&quot;</span>);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  distribution_ = distr;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="comment">// Define probabilities of all basic events.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a>&amp; member : members_)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    member-&gt;expression(distribution_);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keywordtype">void</span> CcfGroup::CheckLevel(<span class="keywordtype">int</span> level) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordflow">if</span> (level &lt;= 0)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;CCF group level is not positive.&quot;</span>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keywordflow">if</span> (level != factors_.size() + 1) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group level expected &quot;</span> +</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                          std::to_string(factors_.size() + 1) +</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                          <span class="stringliteral">&quot;. Instead was given &quot;</span> + std::to_string(level));</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#a25e28f28d5ebf344bc17dc7d0c50a497">   67</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a25e28f28d5ebf344bc17dc7d0c50a497">CcfGroup::ValidateDistribution</a>() {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordflow">if</span> (distribution_-&gt;Min() &lt; 0 || distribution_-&gt;Max() &gt; 1) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Distribution for &quot;</span> + <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group&quot;</span> +</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                          <span class="stringliteral">&quot; has illegal values.&quot;</span>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#a31cbe59ce89f295de7bb810d8b75990e">   74</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a31cbe59ce89f295de7bb810d8b75990e">CcfGroup::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordflow">if</span> (members_.size() &lt; 2) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() +</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                          <span class="stringliteral">&quot; CCF group must have at least 2 members.&quot;</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keywordflow">if</span> (factors_.back().first &gt; members_.size()) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;The level of factors for &quot;</span> + <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() +</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                          <span class="stringliteral">&quot; CCF group cannot be more than # of members.&quot;</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;int, ExpressionPtr&gt;&amp; f : factors_) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">if</span> (f.second-&gt;Max() &gt; 1 || f.second-&gt;Min() &lt; 0) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Factors for &quot;</span> + <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>() + <span class="stringliteral">&quot; CCF group&quot;</span> +</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                            <span class="stringliteral">&quot; have illegal values.&quot;</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">/// Generates combinations of elements from a range.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">/// @tparam Iterator  Iterator type of the range.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">///                   Best if it&#39;s a random access iterator.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">/// @param[in] first1  The beginning of the range.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">/// @param[in] last1  The end of the range.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">/// @param[in] k  The number of elements to choose into a combination.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">/// @returns  A container of all possible combinations.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;std::vector&lt;std::vector&lt;typename Iterator::value_type&gt;&gt;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;GenerateCombinations(Iterator first1, Iterator last1, <span class="keywordtype">int</span> k) {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  assert(k &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;No negative choice number.&quot;</span>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keyword">auto</span> size = std::distance(first1, last1);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  assert(size &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;Invalid iterators.&quot;</span>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">if</span> (k &gt; size)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> {};</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keywordflow">if</span> (k == 0)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">return</span> {{}};  <span class="comment">// The notion of &#39;nothing&#39;.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keywordflow">if</span> (k == size)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> {{first1, last1}};</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keyword">auto</span> c = GenerateCombinations(std::next(first1), last1, k - 1);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; v : c)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    v.push_back(*first1);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keyword">auto</span> rest = GenerateCombinations(std::next(first1), last1, k);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  c.reserve(c.size() + rest.size());</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  std::move(rest.begin(), rest.end(), std::back_inserter(c));</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  assert(rest.empty() || rest.front().empty());  <span class="comment">// Verify the move.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordflow">return</span> c;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">/// Joins CCF combination proxy gate names</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">/// to create a distinct name for a new CCF event.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">/// @param[in] combination  The combination of events.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">/// @returns A uniquely mangled string for the combination.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"></span>std::string JoinNames(<span class="keyword">const</span> std::vector&lt;Gate*&gt;&amp; combination) {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  std::string <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a> = <span class="stringliteral">&quot;[&quot;</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = combination.begin(), it_end = std::prev(combination.end());</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;       it != it_end; ++it) {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    name += (*it)-&gt;name() + <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  name += combination.back()-&gt;name() + <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;std::vector&lt;BasicEvent*&gt; CcfGroup::StabilizeMembers() {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  std::vector&lt;BasicEvent*&gt; stable_members;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  stable_members.reserve(members_.size());</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a>&amp; member : members_)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    stable_members.push_back(member.get());</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  boost::sort(stable_members,</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;              [](<span class="keyword">auto</span>* lhs, <span class="keyword">auto</span>* rhs) { <span class="keywordflow">return</span> lhs-&gt;name() &lt; rhs-&gt;name(); });</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keywordflow">return</span> stable_members;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CcfGroup.xhtml#ab399c5ed0c1d7d0a316ac3b7244b7eb9">  160</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ab399c5ed0c1d7d0a316ac3b7244b7eb9">CcfGroup::ApplyModel</a>() {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="comment">// Construct replacement proxy gates for member basic events.</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  std::vector&lt;Gate*&gt; proxy_gates;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* member : StabilizeMembers()) {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">auto</span> new_gate = std::make_unique&lt;Gate&gt;(member-&gt;name(), member-&gt;base_path(),</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                           member-&gt;role());</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    assert(member-&gt;id() == new_gate-&gt;id());</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    new_gate-&gt;formula(std::make_unique&lt;Formula&gt;(kOr));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    proxy_gates.push_back(new_gate.get());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    member-&gt;ccf_gate(std::move(new_gate));</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ae82ce7133ed17766d54fb927f8935277">ExpressionMap</a> probabilities = this-&gt;CalculateProbabilities();</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  assert(probabilities.size() &gt; 1);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; entry : probabilities) {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">int</span> level = entry.first;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> prob = entry.second;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    std::vector&lt;std::vector&lt;Gate*&gt;&gt; combinations =</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        GenerateCombinations(proxy_gates.begin(), proxy_gates.end(), level);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; combination : combinations) {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      <span class="keyword">auto</span> ccf_event = std::make_shared&lt;CcfEvent&gt;(JoinNames(combination), <span class="keyword">this</span>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      ccf_event-&gt;expression(prob);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate : combination)</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        gate-&gt;formula().AddArgument(ccf_event);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      ccf_event-&gt;members(std::move(combination));  <span class="comment">// Move, at last.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  }</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keywordtype">void</span> BetaFactorModel::CheckLevel(<span class="keywordtype">int</span> level) {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keywordflow">if</span> (level &lt;= 0)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;CCF group level is not positive.&quot;</span>);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keywordflow">if</span> (!<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().empty()) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Beta-Factor Model &quot;</span> + <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">CcfGroup::name</a>() +</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                          <span class="stringliteral">&quot; CCF group must have exactly one factor.&quot;</span>);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keywordflow">if</span> (level != <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ac2e32b2b8b441c3605780181651af31c">CcfGroup::members</a>().size()) {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="stringliteral">&quot;Beta-Factor Model &quot;</span> + <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">CcfGroup::name</a>() + <span class="stringliteral">&quot; CCF group&quot;</span> +</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="stringliteral">&quot; must have the level matching the number of its members.&quot;</span>);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ae82ce7133ed17766d54fb927f8935277">CcfGroup::ExpressionMap</a> BetaFactorModel::CalculateProbabilities() {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  assert(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().size() == 1);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  assert(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ac2e32b2b8b441c3605780181651af31c">CcfGroup::members</a>().size() == <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().front().first);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ae82ce7133ed17766d54fb927f8935277">ExpressionMap</a> probabilities;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> beta = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().begin()-&gt;second;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> indep_factor(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Sub.xhtml">Sub</a>({<a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#aa3e2d564faa05a384d1fe531328c272a">ConstantExpression::kOne</a>, beta}));</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  probabilities.emplace_back(  <span class="comment">// (1 - beta) * Q</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      1,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;      <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Mul.xhtml">Mul</a>({indep_factor, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a89c5531144ef16c6f28be333166ab839">CcfGroup::distribution</a>()})));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  probabilities.emplace_back(  <span class="comment">// beta * Q</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().front().first,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Mul.xhtml">Mul</a>({beta, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a89c5531144ef16c6f28be333166ab839">CcfGroup::distribution</a>()})));</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="keywordflow">return</span> probabilities;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keywordtype">void</span> MglModel::CheckLevel(<span class="keywordtype">int</span> level) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  <span class="keywordflow">if</span> (level &lt;= 0)</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1LogicError.xhtml">LogicError</a>(<span class="stringliteral">&quot;CCF group level is not positive.&quot;</span>);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <span class="keywordflow">if</span> (level != <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().size() + 2) {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">CcfGroup::name</a>() +</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                          <span class="stringliteral">&quot; MGL model CCF group level expected &quot;</span> +</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                          std::to_string(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().size() + 2) +</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                          <span class="stringliteral">&quot;. Instead was given &quot;</span> + std::to_string(level));</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">/// Helper function to calculate reciprocal of</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">/// nCk (n-choose-k) combination.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">/// @param[in] n  The total number elements.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">/// @param[in] k  Subset size.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">/// @returns 1 / nCk</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"></span><span class="keywordtype">double</span> CalculateCombinationReciprocal(<span class="keywordtype">int</span> n, <span class="keywordtype">int</span> k) {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  assert(n &gt;= 0);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  assert(k &gt;= 0);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  assert(n &gt;= k);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keywordflow">if</span> (n - k &gt; k)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    k = n - k;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  <span class="keywordtype">double</span> result = 1;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= n - k; ++i) {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    result *= <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(i) / static_cast&lt;double&gt;(k + i);</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ae82ce7133ed17766d54fb927f8935277">CcfGroup::ExpressionMap</a> MglModel::CalculateProbabilities() {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ae82ce7133ed17766d54fb927f8935277">ExpressionMap</a> probabilities;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <span class="keywordtype">int</span> max_level = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().back().first;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  assert(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().size() == max_level - 1);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="keywordtype">int</span> num_members = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ac2e32b2b8b441c3605780181651af31c">CcfGroup::members</a>().size();</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; max_level; ++i) {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordtype">double</span> mult = CalculateCombinationReciprocal(num_members - 1, i);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    std::vector&lt;ExpressionPtr&gt; args;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    args.emplace_back(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml">ConstantExpression</a>(mult));</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; i; ++j) {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      args.push_back(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()[j].second);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">if</span> (i &lt; max_level - 1) {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      args.emplace_back(</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;          <span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Sub.xhtml">Sub</a>({<a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#aa3e2d564faa05a384d1fe531328c272a">ConstantExpression::kOne</a>, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()[i].second}));</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    args.push_back(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a89c5531144ef16c6f28be333166ab839">CcfGroup::distribution</a>());</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    probabilities.emplace_back(i + 1, <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Mul.xhtml">Mul</a>(args)));</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  assert(probabilities.size() == max_level);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  <span class="keywordflow">return</span> probabilities;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ae82ce7133ed17766d54fb927f8935277">CcfGroup::ExpressionMap</a> AlphaFactorModel::CalculateProbabilities() {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ae82ce7133ed17766d54fb927f8935277">ExpressionMap</a> probabilities;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="keywordtype">int</span> max_level = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().back().first;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  assert(<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().size() == max_level);</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  std::vector&lt;ExpressionPtr&gt; sum_args;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;int, ExpressionPtr&gt;&amp; factor : <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()) {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    sum_args.emplace_back(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Mul.xhtml">Mul</a>(</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        {<a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml">ConstantExpression</a>(factor.first)), factor.second}));</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  }</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> sum(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Add.xhtml">Add</a>(std::move(sum_args)));</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keywordtype">int</span> num_members = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ac2e32b2b8b441c3605780181651af31c">CcfGroup::members</a>().size();</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; max_level; ++i) {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordtype">double</span> mult = CalculateCombinationReciprocal(num_members - 1, i);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> level(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml">ConstantExpression</a>(i + 1));</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> fraction(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Div.xhtml">Div</a>({<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()[i].second, sum}));</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> prob(</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Mul.xhtml">Mul</a>({level, <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml">ConstantExpression</a>(mult)), fraction,</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                 <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a89c5531144ef16c6f28be333166ab839">CcfGroup::distribution</a>()}));</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    probabilities.emplace_back(i + 1, prob);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  assert(probabilities.size() == max_level);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  <span class="keywordflow">return</span> probabilities;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1PhiFactorModel.xhtml#a8acc9117aefc7fe25bef61fe216b7ab1">  308</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1PhiFactorModel.xhtml#a8acc9117aefc7fe25bef61fe216b7ab1">PhiFactorModel::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a31cbe59ce89f295de7bb810d8b75990e">CcfGroup::Validate</a>();</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="keywordtype">double</span> sum = 0;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  <span class="keywordtype">double</span> sum_min = 0;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  <span class="keywordtype">double</span> sum_max = 0;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;int, ExpressionPtr&gt;&amp; factor : <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()) {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    sum += factor.second-&gt;Mean();</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    sum_min += factor.second-&gt;Min();</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    sum_max += factor.second-&gt;Max();</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">  /// @todo Problems with floating point number comparison.</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> epsilon = 1e-4;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keywordtype">double</span> diff = std::abs(sum - 1);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  <span class="keywordtype">double</span> diff_min = std::abs(sum_min - 1);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  <span class="keywordtype">double</span> diff_max = std::abs(sum_max - 1);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keywordflow">if</span> (diff_min &gt; epsilon || diff &gt; epsilon || diff_max &gt; epsilon) {</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;The factors for Phi model &quot;</span> + <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">CcfGroup::name</a>() +</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                          <span class="stringliteral">&quot; CCF group must sum to 1.&quot;</span>);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ae82ce7133ed17766d54fb927f8935277">CcfGroup::ExpressionMap</a> PhiFactorModel::CalculateProbabilities() {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#ae82ce7133ed17766d54fb927f8935277">ExpressionMap</a> probabilities;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <span class="keywordtype">int</span> max_level = <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>().back().first;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;int, ExpressionPtr&gt;&amp; factor : <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">CcfGroup::factors</a>()) {</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> prob(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Mul.xhtml">Mul</a>({factor.second, <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a89c5531144ef16c6f28be333166ab839">CcfGroup::distribution</a>()}));</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    probabilities.emplace_back(factor.first, prob);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  assert(probabilities.size() == max_level);</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keywordflow">return</span> probabilities;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1mef_1_1Mul_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Mul.xhtml">scram::mef::Mul</a></div><div class="ttdoc">This expression performs multiplication operation. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00129">arithmetic.h:129</a></div></div>
<div class="ttc" id="structscram_1_1DuplicateArgumentError_xhtml"><div class="ttname"><a href="structscram_1_1DuplicateArgumentError.xhtml">scram::DuplicateArgumentError</a></div><div class="ttdoc">This error indicates that arguments must be unique. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00079">error.h:79</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml">scram::mef::Id</a></div><div class="ttdoc">Mixin class for assigning unique identifiers to elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00173">element.h:173</a></div></div>
<div class="ttc" id="arithmetic_8h_xhtml"><div class="ttname"><a href="arithmetic_8h.xhtml">arithmetic.h</a></div><div class="ttdoc">A collection of arithmetic expressions. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sub_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sub.xhtml">scram::mef::Sub</a></div><div class="ttdoc">This expression performs subtraction operation. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00090">arithmetic.h:90</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Add_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Add.xhtml">scram::mef::Add</a></div><div class="ttdoc">This expression adds all the given expressions&amp;#39; values. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00062">arithmetic.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a870cff942d6ce90dc50de37e17a151ee"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a870cff942d6ce90dc50de37e17a151ee">scram::mef::CcfGroup::factors</a></div><div class="ttdeci">const ExpressionMap &amp; factors() const </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00128">ccf_group.h:128</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00118">event.h:118</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a1834910c86a27726923fb285f73cd839"><div class="ttname"><a href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">scram::mef::ExpressionPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Expression &gt; ExpressionPtr</div><div class="ttdoc">Shared expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00038">expression.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_ae82ce7133ed17766d54fb927f8935277"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#ae82ce7133ed17766d54fb927f8935277">scram::mef::CcfGroup::ExpressionMap</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; int, ExpressionPtr &gt;&gt; ExpressionMap</div><div class="ttdoc">Mapping expressions and their application levels. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00122">ccf_group.h:122</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml">scram::mef::ConstantExpression</a></div><div class="ttdoc">Indicates a constant value. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00030">constant.h:30</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a31cbe59ce89f295de7bb810d8b75990e"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a31cbe59ce89f295de7bb810d8b75990e">scram::mef::CcfGroup::Validate</a></div><div class="ttdeci">virtual void Validate() const </div><div class="ttdoc">Validates the setup for the CCF model and group. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00074">ccf_group.cc:74</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a723878c7c836a52cf9edb5c8d1a37868"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a723878c7c836a52cf9edb5c8d1a37868">scram::mef::CcfGroup::AddDistribution</a></div><div class="ttdeci">void AddDistribution(const ExpressionPtr &amp;distr)</div><div class="ttdoc">Adds the distribution that describes the probability of basic events in this CCF group. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00048">ccf_group.cc:48</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_ab399c5ed0c1d7d0a316ac3b7244b7eb9"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#ab399c5ed0c1d7d0a316ac3b7244b7eb9">scram::mef::CcfGroup::ApplyModel</a></div><div class="ttdeci">void ApplyModel()</div><div class="ttdoc">Processes the given factors and members to create common cause failure probabilities and new events t...</div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00160">ccf_group.cc:160</a></div></div>
<div class="ttc" id="constant_8h_xhtml"><div class="ttname"><a href="constant_8h.xhtml">constant.h</a></div><div class="ttdoc">Constant expressions that cannot have uncertainties. </div></div>
<div class="ttc" id="structscram_1_1IllegalOperation_xhtml"><div class="ttname"><a href="structscram_1_1IllegalOperation.xhtml">scram::IllegalOperation</a></div><div class="ttdoc">This error can be used to indicate that call for a function or operation is not legal. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00110">error.h:110</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml_aa3e2d564faa05a384d1fe531328c272a"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml#aa3e2d564faa05a384d1fe531328c272a">scram::mef::ConstantExpression::kOne</a></div><div class="ttdeci">static const ExpressionPtr kOne</div><div class="ttdoc">Constant 1 or True. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00032">constant.h:32</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a89c5531144ef16c6f28be333166ab839"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a89c5531144ef16c6f28be333166ab839">scram::mef::CcfGroup::distribution</a></div><div class="ttdeci">const ExpressionPtr &amp; distribution() const </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00125">ccf_group.h:125</a></div></div>
<div class="ttc" id="event_8h_xhtml_a014b1b08212f876b5f342bb4b52e3d39"><div class="ttname"><a href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">scram::mef::BasicEventPtr</a></div><div class="ttdeci">std::shared_ptr&lt; BasicEvent &gt; BasicEventPtr</div><div class="ttdoc">Shared basic events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00254">event.h:254</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1PhiFactorModel_xhtml_a8acc9117aefc7fe25bef61fe216b7ab1"><div class="ttname"><a href="classscram_1_1mef_1_1PhiFactorModel.xhtml#a8acc9117aefc7fe25bef61fe216b7ab1">scram::mef::PhiFactorModel::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdoc">In addition to the default validation of CcfGroup, checks if the given factors&amp;#39; sum is 1...</div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00308">ccf_group.cc:308</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00262">event.h:262</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00127">element.h:127</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a2cc90ded3fd4643dbe65c8411c4f2165"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a2cc90ded3fd4643dbe65c8411c4f2165">scram::mef::CcfGroup::CcfGroup</a></div><div class="ttdeci">CcfGroup(std::string name, std::string base_path=&quot;&quot;, RoleSpecifier role=RoleSpecifier::kPublic)</div><div class="ttdoc">Constructor to be used by derived classes. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00031">ccf_group.cc:31</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a25e28f28d5ebf344bc17dc7d0c50a497"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a25e28f28d5ebf344bc17dc7d0c50a497">scram::mef::CcfGroup::ValidateDistribution</a></div><div class="ttdeci">void ValidateDistribution()</div><div class="ttdoc">Checks if the provided distribution is between 0 and 1. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00067">ccf_group.cc:67</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00062">element.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00048">element.h:48</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a8321bf4372a0575c88b7162716469d15"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a8321bf4372a0575c88b7162716469d15">scram::mef::CcfGroup::AddMember</a></div><div class="ttdeci">void AddMember(const BasicEventPtr &amp;basic_event)</div><div class="ttdoc">Adds a basic event into this CCF group. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00036">ccf_group.cc:36</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_ac2e32b2b8b441c3605780181651af31c"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#ac2e32b2b8b441c3605780181651af31c">scram::mef::CcfGroup::members</a></div><div class="ttdeci">const ElementTable&lt; BasicEventPtr &gt; &amp; members() const </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00061">ccf_group.h:61</a></div></div>
<div class="ttc" id="ccf__group_8h_xhtml"><div class="ttname"><a href="ccf__group_8h.xhtml">ccf_group.h</a></div><div class="ttdoc">Functional containers for basic events grouped by common cause failure. </div></div>
<div class="ttc" id="structscram_1_1LogicError_xhtml"><div class="ttname"><a href="structscram_1_1LogicError.xhtml">scram::LogicError</a></div><div class="ttdoc">Signals internal logic errors, for example, pre-condition failure or use of functionality in ways not...</div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00102">error.h:102</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Div_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Div.xhtml">scram::mef::Div</a></div><div class="ttdoc">This expression performs division operation. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00161">arithmetic.h:161</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml">scram::mef::Role</a></div><div class="ttdoc">Mixin class that manages private or public roles for elements as needed. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00133">element.h:133</a></div></div>
<div class="ttc" id="structscram_1_1ValidationError_xhtml"><div class="ttname"><a href="structscram_1_1ValidationError.xhtml">scram::ValidationError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00069">error.h:69</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
