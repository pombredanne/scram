<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>fault_tree.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">fault_tree.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="fault__tree_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file fault_tree.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Fault Tree and Component containers.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_FAULT_TREE_H_</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define SCRAM_SRC_FAULT_TREE_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;boost/noncopyable.hpp&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ccf__group_8h.xhtml">ccf_group.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="parameter_8h.xhtml">parameter.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/// Component is for logical grouping of events, gates, and other components.</span></div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml">   40</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>, <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">  /// Constructs a component assuming</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">  /// that it exists within some fault tree.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">  /// The public or private role of a component is not</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">  /// for the components itself,</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">  /// but for the events and parameters of the component.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">  /// Component name is not meant to be public;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">  /// however, it must be unique within the parent fault tree or component.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">  /// @param[in] name  The name identifier for the component.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">  /// @param[in] base_path  The series of containers to get this container.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">  /// @param[in] role  The default role for container members.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">  /// @throws LogicError  The name is empty.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">  /// @throws InvalidArgument  The name or reference paths are malformed.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">Component</a>(std::string <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>, std::string <a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a> = <span class="stringliteral">&quot;&quot;</span>,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                     <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> <a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a> = RoleSpecifier::kPublic);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  /// @returns The container of component constructs of specific kind</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  ///          with construct original names as keys.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">   64</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;GatePtr&gt;</a>&amp; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">gates</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> gates_; }</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#ac23bd495ecf6e2d9056032afd7587202">   65</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;BasicEventPtr&gt;</a>&amp; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#ac23bd495ecf6e2d9056032afd7587202">basic_events</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">return</span> basic_events_;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  }</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#af3da5437eaee378c0c3890ad8ddac7ba">   68</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;HouseEventPtr&gt;</a>&amp; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#af3da5437eaee378c0c3890ad8ddac7ba">house_events</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> house_events_;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  }</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#af2cb7ff060d1d4596dfa1e6214b7dfee">   71</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;ParameterPtr&gt;</a>&amp; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#af2cb7ff060d1d4596dfa1e6214b7dfee">parameters</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> parameters_; }</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a428fa6726c1e48f70ebb1408d91834cd">   72</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;CcfGroupPtr&gt;</a>&amp; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a428fa6726c1e48f70ebb1408d91834cd">ccf_groups</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ccf_groups_; }</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Component.xhtml#a483f7a67e2197449902bddc48756e2cd">   73</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;std::unique_ptr&lt;Component&gt;</a>&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a483f7a67e2197449902bddc48756e2cd">components</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> components_;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  /// Adds a gate into this component container.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">  /// @param[in] gate  The gate to be added to this tree.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">  /// @throws ValidationError  The event is already in this container.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a13bc34265c377d54084bda85de38e5ef">AddGate</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a>&amp; gate);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">  /// Adds a basic event into this component container.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// @param[in] basic_event  The basic event to be added to this tree.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">  /// @throws ValidationError  The event is already in this container.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a1be65078ba5109830655771471d0cdf5">AddBasicEvent</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a>&amp; basic_event);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  /// Adds a house event into this component container.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">  /// @param[in] house_event  The house event to be added to this tree.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  /// @throws ValidationError  The event is already in this container.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#af39cf695b8aff1bbc17ee6545e3b33f2">AddHouseEvent</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a4ebd6466b2d3ea77c0780af19d75adb9">HouseEventPtr</a>&amp; house_event);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">  /// Adds a parameter into this component container.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">  /// @param[in] parameter  The parameter to be added to this tree.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">  /// @throws ValidationError  The parameter is already in this container.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a5b857d255c4d6471a7c0101c36493c75">AddParameter</a>(<span class="keyword">const</span> <a class="code" href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">ParameterPtr</a>&amp; parameter);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">  /// Adds a CCF group and its members into this component container.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  /// @param[in] ccf_group  The CCF group to be added to this container.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">  /// @throws ValidationError  Duplicate CCF groups</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">  ///                          or duplicate basic event members.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a96be4497b7269c094864d096ee0c789c">AddCcfGroup</a>(<span class="keyword">const</span> <a class="code" href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">CcfGroupPtr</a>&amp; ccf_group);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">  /// Adds a member component container into this component container.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">  /// Components are unique.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  /// The ownership is transferred to this component only.</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">  /// @param[in] component  The CCF group to be added to this container.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">  /// @throws ValidationError  The component is already in this container.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a223846da8f5f38b27022cdb1143a258e">AddComponent</a>(std::unique_ptr&lt;Component&gt; component);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">  /// Recursively traverses components</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">  /// to gather gates relevant to the whole component.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">  /// @param[out] gates  Gates belonging to this component</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">  ///                    and its subcomponents.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">GatherGates</a>(std::unordered_set&lt;Gate*&gt;* <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">gates</a>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">  /// Adds an event into this component container.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">  /// @tparam Ptr  The smart pointer type to the event.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">  /// @tparam Container  Map with the event&#39;s original name as the key.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">  /// @param[in] event  The event to be added to this component.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">  /// @param[in,out] container  The destination container.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">  /// @throws ValidationError  The event is already in this container.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> Ptr, <span class="keyword">class</span> Container&gt;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordtype">void</span> AddEvent(<span class="keyword">const</span> Ptr&amp; event, Container* container);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">  /// Container for component constructs with original names as keys.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span>  <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;GatePtr&gt;</a> gates_;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;BasicEventPtr&gt;</a> basic_events_;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;HouseEventPtr&gt;</a> house_events_;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;ParameterPtr&gt;</a> parameters_;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;CcfGroupPtr&gt;</a> ccf_groups_;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;std::unique_ptr&lt;Component&gt;</a>&gt; components_;<span class="comment"></span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">  155</a></span>&#160;<span class="keyword">using</span> <a class="code" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">ComponentPtr</a> = std::unique_ptr&lt;Component&gt;;  <span class="comment">///&lt; Unique system components.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">/// Fault tree representation as a container of</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">/// gates, basic and house events, and other information.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">/// Additional functionality of a fault tree includes</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">/// detection of top events.</span></div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FaultTree.xhtml">  161</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml">FaultTree</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a> {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">  /// The main constructor of the Fault Tree.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">  /// Fault trees are assumed to be public and belong to the root model.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">  /// @param[in] name  The name identifier of this fault tree.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml">FaultTree</a>(<span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  /// @returns The collected top events of this fault tree.</span></div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FaultTree.xhtml#a502dde7fc11b6023dc59675f924539da">  170</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;const Gate*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml#a502dde7fc11b6023dc59675f924539da">top_events</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> top_events_; }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">  /// Collects top event gates in this fault tree with components.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">  /// This function is essential to guess the analysis targets</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">  /// if the user does not supply any.</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">  /// If the structure of the fault tree changes,</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">  /// this function must be called again to update the top events.</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">  /// @pre Gate marks are clear.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> CollectTopEvents();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">  /// Recursively marks descendant gates</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">  /// with an unspecified-but-non-clear mark.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">  /// These gates belong to this fault tree only.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">  /// @param[in,out] gate  The ancestor gate.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">  /// @param[in] gates  Gates belonging to the whole fault tree with components.</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> MarkNonTopGates(<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate, <span class="keyword">const</span> std::unordered_set&lt;Gate*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">gates</a>);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">  /// Recursively marks descendant gates in formulas as &quot;non-top&quot;</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">  /// @param[in] formula  The formula of a gate or another formula.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">  /// @param[in] gates  Gates belonging to the whole fault tree with components.</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> MarkNonTopGates(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp; formula,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                       <span class="keyword">const</span> std::unordered_set&lt;Gate*&gt;&amp; gates);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  std::vector&lt;const Gate*&gt; top_events_;  <span class="comment">///&lt; Top events of this fault tree.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">  200</a></span>&#160;<span class="keyword">using</span> <a class="code" href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">FaultTreePtr</a> = std::unique_ptr&lt;FaultTree&gt;;  <span class="comment">///&lt; Unique trees in models.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_FAULT_TREE_H_</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00326">event.h:326</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml">scram::mef::Component</a></div><div class="ttdoc">Component is for logical grouping of events, gates, and other components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00040">fault_tree.h:40</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FaultTree_xhtml_a502dde7fc11b6023dc59675f924539da"><div class="ttname"><a href="classscram_1_1mef_1_1FaultTree.xhtml#a502dde7fc11b6023dc59675f924539da">scram::mef::FaultTree::top_events</a></div><div class="ttdeci">const std::vector&lt; const Gate * &gt; &amp; top_events() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00170">fault_tree.h:170</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_aa1843c29411c29b27d79414d34525bbc"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">scram::mef::Role::role</a></div><div class="ttdeci">RoleSpecifier role() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00147">element.h:147</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a5b857d255c4d6471a7c0101c36493c75"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a5b857d255c4d6471a7c0101c36493c75">scram::mef::Component::AddParameter</a></div><div class="ttdeci">void AddParameter(const ParameterPtr &amp;parameter)</div><div class="ttdoc">Adds a parameter into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00045">fault_tree.cc:45</a></div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Helper classes, structs, and properties common to all other classes. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a223846da8f5f38b27022cdb1143a258e"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a223846da8f5f38b27022cdb1143a258e">scram::mef::Component::AddComponent</a></div><div class="ttdeci">void AddComponent(std::unique_ptr&lt; Component &gt; component)</div><div class="ttdoc">Adds a member component container into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00068">fault_tree.cc:68</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a63441da08667fe6826f3ae0c0a5a94fe"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a63441da08667fe6826f3ae0c0a5a94fe">scram::mef::Component::GatherGates</a></div><div class="ttdeci">void GatherGates(std::unordered_set&lt; Gate * &gt; *gates)</div><div class="ttdoc">Recursively traverses components to gather gates relevant to the whole component. ...</div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00075">fault_tree.cc:75</a></div></div>
<div class="ttc" id="event_8h_xhtml_a04cb31142e9883483951cba3ab63b597"><div class="ttname"><a href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">scram::mef::GatePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Shared gates in models. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00115">event.h:115</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a1572ca4bef5e3095daa07536ec422ac7"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a1572ca4bef5e3095daa07536ec422ac7">scram::mef::Component::Component</a></div><div class="ttdeci">Component(std::string name, std::string base_path=&quot;&quot;, RoleSpecifier role=RoleSpecifier::kPublic)</div><div class="ttdoc">Constructs a component assuming that it exists within some fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00028">fault_tree.cc:28</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a83d4c556f58ec061175b71895877375b"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a83d4c556f58ec061175b71895877375b">scram::mef::Component::gates</a></div><div class="ttdeci">const ElementTable&lt; GatePtr &gt; &amp; gates() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00064">fault_tree.h:64</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml_a8538f816ccf630916e93bd1432fa07d6"><div class="ttname"><a href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">scram::mef::FaultTreePtr</a></div><div class="ttdeci">std::unique_ptr&lt; FaultTree &gt; FaultTreePtr</div><div class="ttdoc">Unique trees in models. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00200">fault_tree.h:200</a></div></div>
<div class="ttc" id="parameter_8h_xhtml_ad02b8dbf956c6c94b34ce9a703d7b408"><div class="ttname"><a href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">scram::mef::ParameterPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Parameter &gt; ParameterPtr</div><div class="ttdoc">Shared parameters. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00088">parameter.h:88</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_af2cb7ff060d1d4596dfa1e6214b7dfee"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#af2cb7ff060d1d4596dfa1e6214b7dfee">scram::mef::Component::parameters</a></div><div class="ttdeci">const ElementTable&lt; ParameterPtr &gt; &amp; parameters() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00071">fault_tree.h:71</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a483f7a67e2197449902bddc48756e2cd"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a483f7a67e2197449902bddc48756e2cd">scram::mef::Component::components</a></div><div class="ttdeci">const ElementTable&lt; std::unique_ptr&lt; Component &gt; &gt; &amp; components() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00073">fault_tree.h:73</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a96be4497b7269c094864d096ee0c789c"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a96be4497b7269c094864d096ee0c789c">scram::mef::Component::AddCcfGroup</a></div><div class="ttdeci">void AddCcfGroup(const CcfGroupPtr &amp;ccf_group)</div><div class="ttdoc">Adds a CCF group and its members into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00051">fault_tree.cc:51</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="event_8h_xhtml_a4ebd6466b2d3ea77c0780af19d75adb9"><div class="ttname"><a href="event_8h.xhtml#a4ebd6466b2d3ea77c0780af19d75adb9">scram::mef::HouseEventPtr</a></div><div class="ttdeci">std::shared_ptr&lt; HouseEvent &gt; HouseEventPtr</div><div class="ttdoc">Shared house events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00253">event.h:253</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a13bc34265c377d54084bda85de38e5ef"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a13bc34265c377d54084bda85de38e5ef">scram::mef::Component::AddGate</a></div><div class="ttdeci">void AddGate(const GatePtr &amp;gate)</div><div class="ttdoc">Adds a gate into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00033">fault_tree.cc:33</a></div></div>
<div class="ttc" id="event_8h_xhtml_a014b1b08212f876b5f342bb4b52e3d39"><div class="ttname"><a href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">scram::mef::BasicEventPtr</a></div><div class="ttdeci">std::shared_ptr&lt; BasicEvent &gt; BasicEventPtr</div><div class="ttdoc">Shared basic events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00254">event.h:254</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a428fa6726c1e48f70ebb1408d91834cd"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a428fa6726c1e48f70ebb1408d91834cd">scram::mef::Component::ccf_groups</a></div><div class="ttdeci">const ElementTable&lt; CcfGroupPtr &gt; &amp; ccf_groups() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00072">fault_tree.h:72</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a1be65078ba5109830655771471d0cdf5"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a1be65078ba5109830655771471d0cdf5">scram::mef::Component::AddBasicEvent</a></div><div class="ttdeci">void AddBasicEvent(const BasicEventPtr &amp;basic_event)</div><div class="ttdoc">Adds a basic event into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00037">fault_tree.cc:37</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00262">event.h:262</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00127">element.h:127</a></div></div>
<div class="ttc" id="element_8h_xhtml_ab162a6f742c23405f33db706d5a927b4"><div class="ttname"><a href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">scram::mef::ElementTable</a></div><div class="ttdeci">boost::multi_index_container&lt; T, boost::multi_index::indexed_by&lt; boost::multi_index::hashed_unique&lt; boost::multi_index::const_mem_fun&lt; Element, const std::string &amp;,&amp;Element::name &gt;&gt;&gt;&gt; ElementTable</div><div class="ttdoc">Table of elements with unique names. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00124">element.h:124</a></div></div>
<div class="ttc" id="ccf__group_8h_xhtml_a2736f823d103bed2d002c9ce6f0c217c"><div class="ttname"><a href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">scram::mef::CcfGroupPtr</a></div><div class="ttdeci">std::shared_ptr&lt; CcfGroup &gt; CcfGroupPtr</div><div class="ttdoc">Shared CCF groups. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00164">ccf_group.h:164</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00062">element.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FaultTree_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1FaultTree.xhtml">scram::mef::FaultTree</a></div><div class="ttdoc">Fault tree representation as a container of gates, basic and house events, and other information...</div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00161">fault_tree.h:161</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00048">element.h:48</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_af3da5437eaee378c0c3890ad8ddac7ba"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#af3da5437eaee378c0c3890ad8ddac7ba">scram::mef::Component::house_events</a></div><div class="ttdeci">const ElementTable&lt; HouseEventPtr &gt; &amp; house_events() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00068">fault_tree.h:68</a></div></div>
<div class="ttc" id="ccf__group_8h_xhtml"><div class="ttname"><a href="ccf__group_8h.xhtml">ccf_group.h</a></div><div class="ttdoc">Functional containers for basic events grouped by common cause failure. </div></div>
<div class="ttc" id="fault__tree_8h_xhtml_ad5409b17f257599c4dd852533a4f289a"><div class="ttname"><a href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">scram::mef::ComponentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Component &gt; ComponentPtr</div><div class="ttdoc">Unique system components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00155">fault_tree.h:155</a></div></div>
<div class="ttc" id="parameter_8h_xhtml"><div class="ttname"><a href="parameter_8h.xhtml">parameter.h</a></div><div class="ttdoc">Parameter expressions that act like a shareable variable. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_ac23bd495ecf6e2d9056032afd7587202"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#ac23bd495ecf6e2d9056032afd7587202">scram::mef::Component::basic_events</a></div><div class="ttdeci">const ElementTable&lt; BasicEventPtr &gt; &amp; basic_events() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00065">fault_tree.h:65</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_ab91a51488ee8c4ed054de1e8450c8a59"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">scram::mef::Role::base_path</a></div><div class="ttdeci">const std::string &amp; base_path() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00150">element.h:150</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml">scram::mef::Role</a></div><div class="ttdoc">Mixin class that manages private or public roles for elements as needed. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00133">element.h:133</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_af39cf695b8aff1bbc17ee6545e3b33f2"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#af39cf695b8aff1bbc17ee6545e3b33f2">scram::mef::Component::AddHouseEvent</a></div><div class="ttdeci">void AddHouseEvent(const HouseEventPtr &amp;house_event)</div><div class="ttdoc">Adds a house event into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00041">fault_tree.cc:41</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
