<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>scram.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">scram.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="scram_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file scram.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Main entrance.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;boost/exception/all.hpp&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;boost/program_options.hpp&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="config_8h.xhtml">config.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="initializer_8h.xhtml">initializer.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="logger_8h.xhtml">logger.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="reporter_8h.xhtml">reporter.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="risk__analysis_8h.xhtml">risk_analysis.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="settings_8h.xhtml">settings.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="version_8h.xhtml">version.h</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>po = boost::program_options;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// @returns Command-line option descriptions.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span>po::options_description ConstructOptions() {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  po::options_description desc(<span class="stringliteral">&quot;Options&quot;</span>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  desc.add_options()</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      (<span class="stringliteral">&quot;help&quot;</span>, <span class="stringliteral">&quot;Display this help message&quot;</span>)</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      (<span class="stringliteral">&quot;version&quot;</span>, <span class="stringliteral">&quot;Display version information&quot;</span>)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      (<span class="stringliteral">&quot;input-files&quot;</span>, po::value&lt;std::vector&lt;std::string&gt;&gt;(),</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;       <span class="stringliteral">&quot;XML input files with analysis constructs&quot;</span>)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      (<span class="stringliteral">&quot;config-file&quot;</span>, po::value&lt;std::string&gt;(),</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;       <span class="stringliteral">&quot;XML file with analysis configurations&quot;</span>)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      (<span class="stringliteral">&quot;validate&quot;</span>, <span class="stringliteral">&quot;Validate input files without analysis&quot;</span>)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      (<span class="stringliteral">&quot;bdd&quot;</span>, <span class="stringliteral">&quot;Perform qualitative analysis with BDD&quot;</span>)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      (<span class="stringliteral">&quot;zbdd&quot;</span>, <span class="stringliteral">&quot;Perform qualitative analysis with ZBDD&quot;</span>)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      (<span class="stringliteral">&quot;mocus&quot;</span>, <span class="stringliteral">&quot;Perform qualitative analysis with MOCUS&quot;</span>)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      (<span class="stringliteral">&quot;prime-implicants&quot;</span>, <span class="stringliteral">&quot;Calculate prime implicants&quot;</span>)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      (<span class="stringliteral">&quot;probability&quot;</span>, po::value&lt;bool&gt;(), <span class="stringliteral">&quot;Perform probability analysis&quot;</span>)</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      (<span class="stringliteral">&quot;importance&quot;</span>, po::value&lt;bool&gt;(), <span class="stringliteral">&quot;Perform importance analysis&quot;</span>)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      (<span class="stringliteral">&quot;uncertainty&quot;</span>, po::value&lt;bool&gt;(), <span class="stringliteral">&quot;Perform uncertainty analysis&quot;</span>)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      (<span class="stringliteral">&quot;ccf&quot;</span>, po::value&lt;bool&gt;(), <span class="stringliteral">&quot;Perform common-cause failure analysis&quot;</span>)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      (<span class="stringliteral">&quot;rare-event&quot;</span>, <span class="stringliteral">&quot;Use the rare event approximation&quot;</span>)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      (<span class="stringliteral">&quot;mcub&quot;</span>, <span class="stringliteral">&quot;Use the MCUB approximation&quot;</span>)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      (<span class="stringliteral">&quot;limit-order,l&quot;</span>, po::value&lt;int&gt;(), <span class="stringliteral">&quot;Upper limit for the product order&quot;</span>)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      (<span class="stringliteral">&quot;cut-off&quot;</span>, po::value&lt;double&gt;(), <span class="stringliteral">&quot;Cut-off probability for products&quot;</span>)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      (<span class="stringliteral">&quot;mission-time&quot;</span>, po::value&lt;double&gt;(), <span class="stringliteral">&quot;System mission time in hours&quot;</span>)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      (<span class="stringliteral">&quot;num-trials&quot;</span>, po::value&lt;int&gt;(),</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;       <span class="stringliteral">&quot;Number of trials for Monte Carlo simulations&quot;</span>)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      (<span class="stringliteral">&quot;num-quantiles&quot;</span>, po::value&lt;int&gt;(),</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;       <span class="stringliteral">&quot;Number of quantiles for distributions&quot;</span>)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      (<span class="stringliteral">&quot;num-bins&quot;</span>, po::value&lt;int&gt;(), <span class="stringliteral">&quot;Number of bins for histograms&quot;</span>)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      (<span class="stringliteral">&quot;seed&quot;</span>, po::value&lt;int&gt;(),</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;       <span class="stringliteral">&quot;Seed for the pseudo-random number generator&quot;</span>)</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      (<span class="stringliteral">&quot;output-path,o&quot;</span>, po::value&lt;std::string&gt;(), <span class="stringliteral">&quot;Output path for reports&quot;</span>)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      (<span class="stringliteral">&quot;verbosity&quot;</span>, po::value&lt;int&gt;(), <span class="stringliteral">&quot;Set log verbosity&quot;</span>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#ifndef NDEBUG</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  desc.add_options()</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      (<span class="stringliteral">&quot;preprocessor&quot;</span>, <span class="stringliteral">&quot;Stop analysis after the preprocessing step&quot;</span>)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      (<span class="stringliteral">&quot;print&quot;</span>, <span class="stringliteral">&quot;Print analysis results in a terminal friendly way&quot;</span>)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      (<span class="stringliteral">&quot;no-report&quot;</span>, <span class="stringliteral">&quot;Don&#39;t generate analysis report&quot;</span>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">return</span> desc;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">/// Parses the command-line arguments.</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">/// @param[in] argc  Count of arguments.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">/// @param[in] argv  Values of arguments.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">/// @param[out] vm  Variables map of program options.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">/// @returns 0 for success.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">/// @returns 1 for errored state.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">/// @returns -1 for information only state like help and version.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span><span class="keywordtype">int</span> ParseArguments(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[], po::variables_map* vm) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  std::string usage = <span class="stringliteral">&quot;Usage:    scram [input-files] [options]&quot;</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  po::options_description desc = ConstructOptions();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    po::store(po::parse_command_line(argc, argv, desc), *vm);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  } <span class="keywordflow">catch</span> (std::exception&amp; err) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    std::cerr &lt;&lt; <span class="stringliteral">&quot;Option error: &quot;</span> &lt;&lt; err.what() &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span> &lt;&lt; usage &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;              &lt;&lt; desc &lt;&lt; std::endl;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  po::notify(*vm);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  po::positional_options_description p;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  p.add(<span class="stringliteral">&quot;input-files&quot;</span>, -1);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  po::store(</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      po::command_line_parser(argc, argv).options(desc).positional(p).run(),</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      *vm);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  po::notify(*vm);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="comment">// Process command-line arguments.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">if</span> (vm-&gt;count(<span class="stringliteral">&quot;help&quot;</span>)) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    std::cout &lt;&lt; usage &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span> &lt;&lt; desc &lt;&lt; std::endl;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keywordflow">if</span> (vm-&gt;count(<span class="stringliteral">&quot;version&quot;</span>)) {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;SCRAM &quot;</span> &lt;&lt; <a class="code" href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">scram::version::core</a>()</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;              &lt;&lt; <span class="stringliteral">&quot; (&quot;</span> &lt;&lt; <a class="code" href="version_8h.xhtml#a099665461e19219a024fec3d8ecf9d7a">scram::version::describe</a>() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;              &lt;&lt; <span class="stringliteral">&quot;\n\nDependencies:\n&quot;</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;              &lt;&lt; <span class="stringliteral">&quot;   Boost    &quot;</span> &lt;&lt; <a class="code" href="version_8h.xhtml#ace6060b98964e624ee4b58cc94ef8221">scram::version::boost</a>() &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;              &lt;&lt; <span class="stringliteral">&quot;   xml2     &quot;</span> &lt;&lt; <a class="code" href="version_8h.xhtml#ac19efb722c04f80561319bd782b30ec6">scram::version::xml2</a>() &lt;&lt; std::endl;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <span class="keywordflow">if</span> (!vm-&gt;count(<span class="stringliteral">&quot;input-files&quot;</span>) &amp;&amp; !vm-&gt;count(<span class="stringliteral">&quot;config-file&quot;</span>)) {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    std::cerr &lt;&lt; <span class="stringliteral">&quot;No input or configuration file is given.\n&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    std::cerr &lt;&lt; usage &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span> &lt;&lt; desc &lt;&lt; std::endl;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordflow">if</span> ((vm-&gt;count(<span class="stringliteral">&quot;bdd&quot;</span>) + vm-&gt;count(<span class="stringliteral">&quot;zbdd&quot;</span>) + vm-&gt;count(<span class="stringliteral">&quot;mocus&quot;</span>)) &gt; 1) {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    std::cerr &lt;&lt; <span class="stringliteral">&quot;Mutually exclusive qualitative analysis algorithms.\n&quot;</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;              &lt;&lt; <span class="stringliteral">&quot;(MOCUS/BDD/ZBDD) cannot be applied at the same time.\n\n&quot;</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;              &lt;&lt; usage &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span> &lt;&lt; desc &lt;&lt; std::endl;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordflow">if</span> (vm-&gt;count(<span class="stringliteral">&quot;rare-event&quot;</span>) &amp;&amp; vm-&gt;count(<span class="stringliteral">&quot;mcub&quot;</span>)) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    std::cerr &lt;&lt; <span class="stringliteral">&quot;The rare event and MCUB approximations cannot be &quot;</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;              &lt;&lt; <span class="stringliteral">&quot;applied at the same time.\n\n&quot;</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;              &lt;&lt; usage &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span> &lt;&lt; desc &lt;&lt; std::endl;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">/// Helper macro for ConstructSettings</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">/// to set the flag in &quot;settings&quot;</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">/// only if provided by &quot;vm&quot; arguments.</span></div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">  147</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define SET(tag, type, member) \</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">  if (vm.count(tag)) settings-&gt;member(vm[tag].as&lt;type&gt;())</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">/// Updates analysis settings from command-line arguments.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">/// @param[in] vm  Variables map of program options.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">/// @param[in,out] settings  Pre-configured or default settings.</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">/// @throws InvalidArgument  The indication of an error in arguments.</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">/// @throws std::exception  vm does not contain a required option.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">///                         At least defaults are expected.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> ConstructSettings(<span class="keyword">const</span> po::variables_map&amp; vm,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                       <a class="code" href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a>* settings) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;bdd&quot;</span>)) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    settings-&gt;<a class="code" href="classscram_1_1core_1_1Settings.xhtml#af318d3999256756c69c57190ac65b3a5">algorithm</a>(<span class="stringliteral">&quot;bdd&quot;</span>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;zbdd&quot;</span>)) {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    settings-&gt;<a class="code" href="classscram_1_1core_1_1Settings.xhtml#af318d3999256756c69c57190ac65b3a5">algorithm</a>(<span class="stringliteral">&quot;zbdd&quot;</span>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;mocus&quot;</span>)) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    settings-&gt;<a class="code" href="classscram_1_1core_1_1Settings.xhtml#af318d3999256756c69c57190ac65b3a5">algorithm</a>(<span class="stringliteral">&quot;mocus&quot;</span>);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  settings-&gt;<a class="code" href="classscram_1_1core_1_1Settings.xhtml#ae64f362fceb44402e101140dfc1725ba">prime_implicants</a>(vm.count(<span class="stringliteral">&quot;prime-implicants&quot;</span>));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="comment">// Determine if the probability approximation is requested.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;rare-event&quot;</span>)) {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    assert(!vm.count(<span class="stringliteral">&quot;mcub&quot;</span>));</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    settings-&gt;<a class="code" href="classscram_1_1core_1_1Settings.xhtml#ab319bbe7cbd01fcf0aa601dc5afb2c88">approximation</a>(<span class="stringliteral">&quot;rare-event&quot;</span>);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;mcub&quot;</span>)) {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    settings-&gt;<a class="code" href="classscram_1_1core_1_1Settings.xhtml#ab319bbe7cbd01fcf0aa601dc5afb2c88">approximation</a>(<span class="stringliteral">&quot;mcub&quot;</span>);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;probability&quot;</span>, <span class="keywordtype">bool</span>, probability_analysis);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;importance&quot;</span>, <span class="keywordtype">bool</span>, importance_analysis);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;uncertainty&quot;</span>, <span class="keywordtype">bool</span>, uncertainty_analysis);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;ccf&quot;</span>, <span class="keywordtype">bool</span>, ccf_analysis);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;seed&quot;</span>, <span class="keywordtype">int</span>, seed);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;limit-order&quot;</span>, <span class="keywordtype">int</span>, limit_order);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;cut-off&quot;</span>, <span class="keywordtype">double</span>, cut_off);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;mission-time&quot;</span>, <span class="keywordtype">double</span>, mission_time);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;num-trials&quot;</span>, <span class="keywordtype">int</span>, num_trials);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;num-quantiles&quot;</span>, <span class="keywordtype">int</span>, num_quantiles);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <a class="code" href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a>(<span class="stringliteral">&quot;num-bins&quot;</span>, <span class="keywordtype">int</span>, num_bins);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">#ifndef NDEBUG</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  settings-&gt;<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a2f732cd2550e6b41654a772aaa3d75b0">preprocessor</a> = vm.count(<span class="stringliteral">&quot;preprocessor&quot;</span>);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  settings-&gt;<a class="code" href="classscram_1_1core_1_1Settings.xhtml#acbb6dc29f2facdc8878d7c0accfaa30a">print</a> = vm.count(<span class="stringliteral">&quot;print&quot;</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#undef SET</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">/// Main body of command-line entrance to run the program.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">/// @param[in] vm  Variables map of program options.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">/// @throws Error  Exceptions specific to SCRAM.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">/// @throws boost::exception  Boost errors.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">/// @throws std::exception  All other problems.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> RunScram(<span class="keyword">const</span> po::variables_map&amp; vm) {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;verbosity&quot;</span>)) {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="classscram_1_1Logger.xhtml#aebef6b78425a64649abea7dfe7b7d0bc">scram::Logger::SetVerbosity</a>(vm[<span class="stringliteral">&quot;verbosity&quot;</span>].as&lt;int&gt;());</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <a class="code" href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a> settings;  <span class="comment">// Analysis settings.</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  std::vector&lt;std::string&gt; input_files;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  std::string output_path;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="comment">// Get configurations if any.</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  <span class="comment">// Invalid configurations will throw.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;config-file&quot;</span>)) {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">auto</span> config =</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        std::make_unique&lt;scram::Config&gt;(vm[<span class="stringliteral">&quot;config-file&quot;</span>].as&lt;std::string&gt;());</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    settings = config-&gt;settings();</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    input_files = config-&gt;input_files();</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    output_path = config-&gt;output_path();</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="comment">// Command-line settings overwrite</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="comment">// the settings from the configurations.</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  ConstructSettings(vm, &amp;settings);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;input-files&quot;</span>)) {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">auto</span> cmd_input = vm[<span class="stringliteral">&quot;input-files&quot;</span>].as&lt;std::vector&lt;std::string&gt;&gt;();</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    input_files.insert(input_files.end(), cmd_input.begin(), cmd_input.end());</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;output-path&quot;</span>)) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    output_path = vm[<span class="stringliteral">&quot;output-path&quot;</span>].as&lt;std::string&gt;();</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <span class="comment">// Process input files</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="comment">// into valid analysis containers and constructs.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="comment">// Throws if anything is invalid.</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  <span class="keyword">auto</span> init = std::make_unique&lt;scram::mef::Initializer&gt;(input_files, settings);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;validate&quot;</span>))</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span>;  <span class="comment">// Stop if only validation is requested.</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <span class="comment">// Initiate risk analysis with the given information.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  <span class="keyword">auto</span> analysis =</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      std::make_unique&lt;scram::core::RiskAnalysis&gt;(init-&gt;model(), settings);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  init.reset();  <span class="comment">// Remove extra reference counts to shared objects.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  analysis-&gt;Analyze();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">#ifndef NDEBUG</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keywordflow">if</span> (vm.count(<span class="stringliteral">&quot;no-report&quot;</span>) || vm.count(<span class="stringliteral">&quot;preprocessor&quot;</span>) || vm.count(<span class="stringliteral">&quot;print&quot;</span>))</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <a class="code" href="classscram_1_1Reporter.xhtml">scram::Reporter</a> reporter;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <span class="keywordflow">if</span> (output_path.empty()) {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    reporter.<a class="code" href="classscram_1_1Reporter.xhtml#a6a6327c0fc2d0e8ab6ec24a145ae1abe">Report</a>(*analysis, std::cout);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    reporter.<a class="code" href="classscram_1_1Reporter.xhtml#a6a6327c0fc2d0e8ab6ec24a145ae1abe">Report</a>(*analysis, output_path);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">/// Catches an exception,</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">/// prints its message to the standard error,</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">/// and returns error code of 1 to exit from the main function.</span></div><div class="line"><a name="l00257"></a><span class="lineno"><a class="line" href="scram_8cc.xhtml#a46994f8258d1358419dc15c0619fc05e">  257</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define CATCH(exception_type)                                         \</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">  catch (const exception_type&amp; err) {                                 \</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor">    std::cerr &lt;&lt; #exception_type &lt;&lt; &quot;:\n&quot; &lt;&lt; err.what() &lt;&lt; std::endl; \</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">    return 1;                                                         \</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">  }</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">/// Command-line SCRAM entrance.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">/// @param[in] argc  Argument count.</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">/// @param[in] argv  Argument vector.</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">/// @returns 0 for success.</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">/// @returns 1 for errored state.</span></div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="scram_8cc.xhtml#a0ddf1224851353fc92bfbff6f499fa97">  270</a></span>&#160;<span class="comment"></span><span class="keywordtype">int</span> <a class="code" href="scram_8cc.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[]) {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="preprocessor">#ifdef NDEBUG</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="keywordflow">try</span> {  <span class="comment">// Catch exceptions only for non-debug builds.</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// Parse command-line options.</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    po::variables_map vm;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordtype">int</span> ret = ParseArguments(argc, argv, &amp;vm);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">if</span> (ret == 1)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">if</span> (ret == 0)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;      RunScram(vm);</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor">#ifdef NDEBUG</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <a class="code" href="scram_8cc.xhtml#a46994f8258d1358419dc15c0619fc05e">CATCH</a>(<a class="code" href="structscram_1_1IOError.xhtml">scram::IOError</a>)</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <a class="code" href="scram_8cc.xhtml#a46994f8258d1358419dc15c0619fc05e">CATCH</a>(<a class="code" href="structscram_1_1ValidationError.xhtml">scram::ValidationError</a>)</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <a class="code" href="scram_8cc.xhtml#a46994f8258d1358419dc15c0619fc05e">CATCH</a>(<a class="code" href="structscram_1_1ValueError.xhtml">scram::ValueError</a>)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <a class="code" href="scram_8cc.xhtml#a46994f8258d1358419dc15c0619fc05e">CATCH</a>(<a class="code" href="structscram_1_1LogicError.xhtml">scram::LogicError</a>)</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <a class="code" href="scram_8cc.xhtml#a46994f8258d1358419dc15c0619fc05e">CATCH</a>(<a class="code" href="structscram_1_1IllegalOperation.xhtml">scram::IllegalOperation</a>)</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <a class="code" href="scram_8cc.xhtml#a46994f8258d1358419dc15c0619fc05e">CATCH</a>(<a class="code" href="structscram_1_1InvalidArgument.xhtml">scram::InvalidArgument</a>)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <a class="code" href="scram_8cc.xhtml#a46994f8258d1358419dc15c0619fc05e">CATCH</a>(<a class="code" href="classscram_1_1Error.xhtml">scram::Error</a>)</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="keywordflow">catch</span> (boost::exception&amp; boost_err) {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    std::cerr &lt;&lt; <span class="stringliteral">&quot;Boost Exception:\n&quot;</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;              &lt;&lt; boost::diagnostic_information(boost_err) &lt;&lt; std::endl;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  }</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <a class="code" href="scram_8cc.xhtml#a46994f8258d1358419dc15c0619fc05e">CATCH</a>(std::exception)</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;}  <span class="comment">// End of main.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="preprocessor">#undef CATCH</span></div><div class="ttc" id="structscram_1_1IOError_xhtml"><div class="ttname"><a href="structscram_1_1IOError.xhtml">scram::IOError</a></div><div class="ttdoc">For input/output related errors. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00089">error.h:89</a></div></div>
<div class="ttc" id="scram_8cc_xhtml_a46994f8258d1358419dc15c0619fc05e"><div class="ttname"><a href="scram_8cc.xhtml#a46994f8258d1358419dc15c0619fc05e">CATCH</a></div><div class="ttdeci">#define CATCH(exception_type)</div><div class="ttdoc">Catches an exception, prints its message to the standard error, and returns error code of 1 to exit f...</div><div class="ttdef"><b>Definition:</b> <a href="scram_8cc_source.xhtml#l00257">scram.cc:257</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_ab319bbe7cbd01fcf0aa601dc5afb2c88"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#ab319bbe7cbd01fcf0aa601dc5afb2c88">scram::core::Settings::approximation</a></div><div class="ttdeci">const std::string &amp; approximation() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00102">settings.h:102</a></div></div>
<div class="ttc" id="scram_8cc_xhtml_a934d4c3300539a334fe65b5314948f5d"><div class="ttname"><a href="scram_8cc.xhtml#a934d4c3300539a334fe65b5314948f5d">SET</a></div><div class="ttdeci">#define SET(tag, type, member)</div><div class="ttdoc">Helper macro for ConstructSettings to set the flag in &quot;settings&quot; only if provided by &quot;vm&quot; arguments...</div><div class="ttdef"><b>Definition:</b> <a href="scram_8cc_source.xhtml#l00147">scram.cc:147</a></div></div>
<div class="ttc" id="version_8h_xhtml_a08935e0d1ae92ad3bf839e9757fbb53c"><div class="ttname"><a href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">scram::version::core</a></div><div class="ttdeci">const char * core()</div></div>
<div class="ttc" id="classscram_1_1Error_xhtml"><div class="ttname"><a href="classscram_1_1Error.xhtml">scram::Error</a></div><div class="ttdoc">The Error class is the base class for common exceptions specific to the SCRAM code. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00031">error.h:31</a></div></div>
<div class="ttc" id="structscram_1_1ValueError_xhtml"><div class="ttname"><a href="structscram_1_1ValueError.xhtml">scram::ValueError</a></div><div class="ttdoc">For values that are not acceptable. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00064">error.h:64</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_acbb6dc29f2facdc8878d7c0accfaa30a"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#acbb6dc29f2facdc8878d7c0accfaa30a">scram::core::Settings::print</a></div><div class="ttdeci">bool print</div><div class="ttdoc">Print analysis results in a terminal friendly way. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00241">settings.h:241</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_af318d3999256756c69c57190ac65b3a5"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#af318d3999256756c69c57190ac65b3a5">scram::core::Settings::algorithm</a></div><div class="ttdeci">const std::string &amp; algorithm() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00040">settings.h:40</a></div></div>
<div class="ttc" id="logger_8h_xhtml"><div class="ttname"><a href="logger_8h.xhtml">logger.h</a></div><div class="ttdoc">Logging capability for various purposes, such as warnings and debugging. </div></div>
<div class="ttc" id="risk__analysis_8h_xhtml"><div class="ttname"><a href="risk__analysis_8h.xhtml">risk_analysis.h</a></div><div class="ttdoc">Contains the main system for performing analysis. </div></div>
<div class="ttc" id="version_8h_xhtml_ace6060b98964e624ee4b58cc94ef8221"><div class="ttname"><a href="version_8h.xhtml#ace6060b98964e624ee4b58cc94ef8221">scram::version::boost</a></div><div class="ttdeci">const char * boost()</div></div>
<div class="ttc" id="initializer_8h_xhtml"><div class="ttname"><a href="initializer_8h.xhtml">initializer.h</a></div><div class="ttdoc">A facility that processes input files into analysis constructs. </div></div>
<div class="ttc" id="reporter_8h_xhtml"><div class="ttname"><a href="reporter_8h.xhtml">reporter.h</a></div><div class="ttdoc">Reporter of results. </div></div>
<div class="ttc" id="structscram_1_1IllegalOperation_xhtml"><div class="ttname"><a href="structscram_1_1IllegalOperation.xhtml">scram::IllegalOperation</a></div><div class="ttdoc">This error can be used to indicate that call for a function or operation is not legal. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00110">error.h:110</a></div></div>
<div class="ttc" id="config_8h_xhtml"><div class="ttname"><a href="config_8h.xhtml">config.h</a></div><div class="ttdoc">Configuration management facilities to make various setups for analysis possible. ...</div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_ae64f362fceb44402e101140dfc1725ba"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#ae64f362fceb44402e101140dfc1725ba">scram::core::Settings::prime_implicants</a></div><div class="ttdeci">bool prime_implicants() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00059">settings.h:59</a></div></div>
<div class="ttc" id="version_8h_xhtml_ac19efb722c04f80561319bd782b30ec6"><div class="ttname"><a href="version_8h.xhtml#ac19efb722c04f80561319bd782b30ec6">scram::version::xml2</a></div><div class="ttdeci">const char * xml2()</div></div>
<div class="ttc" id="scram_8cc_xhtml_a0ddf1224851353fc92bfbff6f499fa97"><div class="ttname"><a href="scram_8cc.xhtml#a0ddf1224851353fc92bfbff6f499fa97">main</a></div><div class="ttdeci">int main(int argc, char *argv[])</div><div class="ttdoc">Command-line SCRAM entrance. </div><div class="ttdef"><b>Definition:</b> <a href="scram_8cc_source.xhtml#l00270">scram.cc:270</a></div></div>
<div class="ttc" id="settings_8h_xhtml"><div class="ttname"><a href="settings_8h.xhtml">settings.h</a></div><div class="ttdoc">Builder for settings. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00037">settings.h:37</a></div></div>
<div class="ttc" id="classscram_1_1Reporter_xhtml"><div class="ttname"><a href="classscram_1_1Reporter.xhtml">scram::Reporter</a></div><div class="ttdoc">Facilities to report analysis results. </div><div class="ttdef"><b>Definition:</b> <a href="reporter_8h_source.xhtml#l00040">reporter.h:40</a></div></div>
<div class="ttc" id="classscram_1_1Logger_xhtml_aebef6b78425a64649abea7dfe7b7d0bc"><div class="ttname"><a href="classscram_1_1Logger.xhtml#aebef6b78425a64649abea7dfe7b7d0bc">scram::Logger::SetVerbosity</a></div><div class="ttdeci">static void SetVerbosity(int level)</div><div class="ttdoc">Sets the reporting level cut-off from an integer. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8cc_source.xhtml#l00043">logger.cc:43</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a2f732cd2550e6b41654a772aaa3d75b0"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a2f732cd2550e6b41654a772aaa3d75b0">scram::core::Settings::preprocessor</a></div><div class="ttdeci">bool preprocessor</div><div class="ttdoc">Stop analysis after preprocessor. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00240">settings.h:240</a></div></div>
<div class="ttc" id="version_8h_xhtml"><div class="ttname"><a href="version_8h.xhtml">version.h</a></div><div class="ttdoc">Set of functions with version information of the core and dependencies. </div></div>
<div class="ttc" id="structscram_1_1LogicError_xhtml"><div class="ttname"><a href="structscram_1_1LogicError.xhtml">scram::LogicError</a></div><div class="ttdoc">Signals internal logic errors, for example, pre-condition failure or use of functionality in ways not...</div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00102">error.h:102</a></div></div>
<div class="ttc" id="version_8h_xhtml_a099665461e19219a024fec3d8ecf9d7a"><div class="ttname"><a href="version_8h.xhtml#a099665461e19219a024fec3d8ecf9d7a">scram::version::describe</a></div><div class="ttdeci">const char * describe()</div></div>
<div class="ttc" id="structscram_1_1InvalidArgument_xhtml"><div class="ttname"><a href="structscram_1_1InvalidArgument.xhtml">scram::InvalidArgument</a></div><div class="ttdoc">This error class can be used to indicate unacceptable arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00095">error.h:95</a></div></div>
<div class="ttc" id="classscram_1_1Reporter_xhtml_a6a6327c0fc2d0e8ab6ec24a145ae1abe"><div class="ttname"><a href="classscram_1_1Reporter.xhtml#a6a6327c0fc2d0e8ab6ec24a145ae1abe">scram::Reporter::Report</a></div><div class="ttdeci">void Report(const core::RiskAnalysis &amp;risk_an, std::ostream &amp;out)</div><div class="ttdoc">Reports the results of risk analysis on a model. </div><div class="ttdef"><b>Definition:</b> <a href="reporter_8cc_source.xhtml#l00037">reporter.cc:37</a></div></div>
<div class="ttc" id="structscram_1_1ValidationError_xhtml"><div class="ttname"><a href="structscram_1_1ValidationError.xhtml">scram::ValidationError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00069">error.h:69</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
