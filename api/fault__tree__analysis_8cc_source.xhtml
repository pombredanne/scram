<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>fault_tree_analysis.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">fault_tree_analysis.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="fault__tree__analysis_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file fault_tree_analysis.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of fault tree analysis.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fault__tree__analysis_8h.xhtml">fault_tree_analysis.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;boost/container/flat_set.hpp&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm.hpp&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">core</a> {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="fault__tree__analysis_8cc.xhtml#ae462a016941b9c817b69891ea5dfd1e1">   35</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="fault__tree__analysis_8cc.xhtml#ae462a016941b9c817b69891ea5dfd1e1">Print</a>(<span class="keyword">const</span> std::vector&lt;Product&gt;&amp; products) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keywordflow">if</span> (products.empty()) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    std::cerr &lt;&lt; <span class="stringliteral">&quot;No products!&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keywordflow">if</span> (products.front().empty()) {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    assert(products.size() == 1 &amp;&amp; <span class="stringliteral">&quot;Unity case must have only one product.&quot;</span>);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    std::cerr &lt;&lt; <span class="stringliteral">&quot;Single Unity product.&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keyword">using</span> ProductSet = boost::container::flat_set&lt;std::string&gt;;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  std::vector&lt;ProductSet&gt; to_print;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; product : products) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    ProductSet ids;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; literal : product) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      ids.insert((literal.complement ? <span class="stringliteral">&quot;~&quot;</span> : <span class="stringliteral">&quot;&quot;</span>) + literal.event.name());</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    to_print.push_back(std::move(ids));</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  boost::sort(to_print, [](<span class="keyword">const</span> ProductSet&amp; lhs, <span class="keyword">const</span> ProductSet&amp; rhs) {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">if</span> (lhs.size() == rhs.size())</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      <span class="keywordflow">return</span> lhs &lt; rhs;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> lhs.size() &lt; rhs.size();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  });</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  assert(!to_print.front().empty() &amp;&amp; <span class="stringliteral">&quot;Failure of the analysis with Unity!&quot;</span>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  std::vector&lt;int&gt; distribution(to_print.back().size());</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; product : to_print)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    distribution[product.size() - 1]++;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  std::cerr &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; to_print.size() &lt;&lt; <span class="stringliteral">&quot; : {&quot;</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i : distribution)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    std::cerr &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; i;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  std::cerr &lt;&lt; <span class="stringliteral">&quot; }\n\n&quot;</span>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; product : to_print) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; <span class="keywordtype">id</span> : product)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      std::cerr &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; id;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    std::cerr &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  std::cerr &lt;&lt; std::flush;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="fault__tree__analysis_8cc.xhtml#ae728f907b1ba93340d9c376af734cd6c">   76</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="fault__tree__analysis_8cc.xhtml#ae728f907b1ba93340d9c376af734cd6c">CalculateProbability</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Product.xhtml">Product</a>&amp; product) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keywordtype">double</span> p = 1;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Literal.xhtml">Literal</a>&amp; literal : product) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    p *= literal.complement ? 1 - literal.event.p() : literal.event.p();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">return</span> p;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="fault__tree__analysis_8cc.xhtml#a686e89790b4b25c69dc35922d1b40688">   84</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="fault__tree__analysis_8cc.xhtml#a686e89790b4b25c69dc35922d1b40688">GetOrder</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Product.xhtml">Product</a>&amp; product) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keywordflow">return</span> product.<a class="code" href="classscram_1_1core_1_1Product.xhtml#a76fc3f1f84ea87d601c5c268639137a9">empty</a>() ? 1 : product.<a class="code" href="classscram_1_1core_1_1Product.xhtml#a23c2873c9198ab74446508995c8925e2">size</a>();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a8a677b3b6067fe4baafec4691dc92f9b">   88</a></span>&#160;<a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a8a677b3b6067fe4baafec4691dc92f9b">FaultTreeAnalysis::FaultTreeAnalysis</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">mef::Gate</a>&amp; root,</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    : <a class="code" href="classscram_1_1core_1_1Analysis.xhtml">Analysis</a>(settings),</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      top_event_(root) {}</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a87d670c8f26414bdf60d0f14ba904619">   93</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a87d670c8f26414bdf60d0f14ba904619">FaultTreeAnalysis::Convert</a>(<span class="keyword">const</span> std::vector&lt;std::vector&lt;int&gt;&gt;&amp; results,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml">BooleanGraph</a>* graph) noexcept {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <span class="comment">// Special cases of sets.</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  <span class="keywordflow">if</span> (results.empty()) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="classscram_1_1core_1_1Analysis.xhtml#abb78b5ecbaae6f4e7ccbca0b51cf2187">Analysis::AddWarning</a>(<span class="stringliteral">&quot;The top event is NULL. Success is guaranteed.&quot;</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (results.size() == 1 &amp;&amp; results.back().empty()) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="classscram_1_1core_1_1Analysis.xhtml#abb78b5ecbaae6f4e7ccbca0b51cf2187">Analysis::AddWarning</a>(<span class="stringliteral">&quot;The top event is UNITY. Failure is guaranteed.&quot;</span>);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  assert(products_.empty());</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  products_.reserve(results.size());</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keyword">struct </span>GeneratorIterator {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">void</span> operator++() { ++it; }<span class="comment"></span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">    /// Populates the Product with Literals.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"></span>    std::pair&lt;bool, const mef::BasicEvent*&gt; operator*() {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">mef::BasicEvent</a>* basic_event = graph.GetBasicEvent(std::abs(*it));</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      <a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a6175bdcb7609a1ac498c5d533421e575">product_events</a>.insert(basic_event);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      <span class="keywordflow">return</span> {*it &lt; 0, basic_event};</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    std::vector&lt;int&gt;::const_iterator it;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml">BooleanGraph</a>&amp; graph;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    decltype(product_events_)&amp; <a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a6175bdcb7609a1ac498c5d533421e575">product_events</a>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  };</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; result_set : results) {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    assert(result_set.size() &lt;= <a class="code" href="classscram_1_1core_1_1Analysis.xhtml#ab04a96c555ba726368fa3868a8701610">Analysis::settings</a>().<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>() &amp;&amp;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;           <span class="stringliteral">&quot;Miscalculated product sets with larger-than-required order.&quot;</span>);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    products_.emplace_back(</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        result_set.size(),</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        GeneratorIterator{result_set.begin(), *graph, product_events_});</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#ifndef NDEBUG</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1core_1_1Analysis.xhtml#ab04a96c555ba726368fa3868a8701610">Analysis::settings</a>().<a class="code" href="classscram_1_1core_1_1Settings.xhtml#acbb6dc29f2facdc8878d7c0accfaa30a">print</a>)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="fault__tree__analysis_8cc.xhtml#ae462a016941b9c817b69891ea5dfd1e1">Print</a>(products_);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}  <span class="comment">// namespace core</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="fault__tree__analysis_8cc_xhtml_a686e89790b4b25c69dc35922d1b40688"><div class="ttname"><a href="fault__tree__analysis_8cc.xhtml#a686e89790b4b25c69dc35922d1b40688">scram::core::GetOrder</a></div><div class="ttdeci">int GetOrder(const Product &amp;product)</div><div class="ttdoc">Helper function to determine order of a Boolean product. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8cc_source.xhtml#l00084">fault_tree_analysis.cc:84</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Product_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Product.xhtml">scram::core::Product</a></div><div class="ttdoc">Collection of unique literals. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00065">fault_tree_analysis.h:65</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Literal_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1Literal.xhtml">scram::core::Literal</a></div><div class="ttdoc">Event or its complement that may appear in products. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00049">fault_tree_analysis.h:49</a></div></div>
<div class="ttc" id="version_8h_xhtml_a08935e0d1ae92ad3bf839e9757fbb53c"><div class="ttname"><a href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">scram::version::core</a></div><div class="ttdeci">const char * core()</div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00118">event.h:118</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_acbb6dc29f2facdc8878d7c0accfaa30a"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#acbb6dc29f2facdc8878d7c0accfaa30a">scram::core::Settings::print</a></div><div class="ttdeci">bool print</div><div class="ttdoc">Print analysis results in a terminal friendly way. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00241">settings.h:241</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Analysis_xhtml_abb78b5ecbaae6f4e7ccbca0b51cf2187"><div class="ttname"><a href="classscram_1_1core_1_1Analysis.xhtml#abb78b5ecbaae6f4e7ccbca0b51cf2187">scram::core::Analysis::AddWarning</a></div><div class="ttdeci">void AddWarning(std::string msg)</div><div class="ttdoc">Appends a warning message to the analysis warnings. </div><div class="ttdef"><b>Definition:</b> <a href="analysis_8h_source.xhtml#l00057">analysis.h:57</a></div></div>
<div class="ttc" id="fault__tree__analysis_8cc_xhtml_ae728f907b1ba93340d9c376af734cd6c"><div class="ttname"><a href="fault__tree__analysis_8cc.xhtml#ae728f907b1ba93340d9c376af734cd6c">scram::core::CalculateProbability</a></div><div class="ttdeci">double CalculateProbability(const Product &amp;product)</div><div class="ttdoc">Helper function to compute a Boolean product probability. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8cc_source.xhtml#l00076">fault_tree_analysis.cc:76</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="fault__tree__analysis_8h_xhtml"><div class="ttname"><a href="fault__tree__analysis_8h.xhtml">fault_tree_analysis.h</a></div><div class="ttdoc">Fault Tree Analysis. </div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalysis_xhtml_a8a677b3b6067fe4baafec4691dc92f9b"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a8a677b3b6067fe4baafec4691dc92f9b">scram::core::FaultTreeAnalysis::FaultTreeAnalysis</a></div><div class="ttdeci">FaultTreeAnalysis(const mef::Gate &amp;root, const Settings &amp;settings)</div><div class="ttdoc">Traverses a valid fault tree from the root gate to collect databases of events, gates, and other members of the fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8cc_source.xhtml#l00088">fault_tree_analysis.cc:88</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a0e43ec0f017d23a4fa4e376c4060d380"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">scram::core::Settings::limit_order</a></div><div class="ttdeci">int limit_order() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00075">settings.h:75</a></div></div>
<div class="ttc" id="fault__tree__analysis_8cc_xhtml_ae462a016941b9c817b69891ea5dfd1e1"><div class="ttname"><a href="fault__tree__analysis_8cc.xhtml#ae462a016941b9c817b69891ea5dfd1e1">scram::core::Print</a></div><div class="ttdeci">void Print(const std::vector&lt; Product &gt; &amp;products)</div><div class="ttdoc">Prints a collection of products to the standard error. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8cc_source.xhtml#l00035">fault_tree_analysis.cc:35</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Analysis_xhtml_ab04a96c555ba726368fa3868a8701610"><div class="ttname"><a href="classscram_1_1core_1_1Analysis.xhtml#ab04a96c555ba726368fa3868a8701610">scram::core::Analysis::settings</a></div><div class="ttdeci">const Settings &amp; settings() const </div><div class="ttdef"><b>Definition:</b> <a href="analysis_8h_source.xhtml#l00044">analysis.h:44</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalysis_xhtml_a6175bdcb7609a1ac498c5d533421e575"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a6175bdcb7609a1ac498c5d533421e575">scram::core::FaultTreeAnalysis::product_events</a></div><div class="ttdeci">const std::unordered_set&lt; const mef::BasicEvent * &gt; &amp; product_events() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00253">fault_tree_analysis.h:253</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00262">event.h:262</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Product_xhtml_a23c2873c9198ab74446508995c8925e2"><div class="ttname"><a href="classscram_1_1core_1_1Product.xhtml#a23c2873c9198ab74446508995c8925e2">scram::core::Product::size</a></div><div class="ttdeci">int size() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00139">fault_tree_analysis.h:139</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Analysis_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Analysis.xhtml">scram::core::Analysis</a></div><div class="ttdoc">Base abstract class for all analysis with settings. </div><div class="ttdef"><b>Definition:</b> <a href="analysis_8h_source.xhtml#l00036">analysis.h:36</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalysis_xhtml_a87d670c8f26414bdf60d0f14ba904619"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml#a87d670c8f26414bdf60d0f14ba904619">scram::core::FaultTreeAnalysis::Convert</a></div><div class="ttdeci">void Convert(const std::vector&lt; std::vector&lt; int &gt;&gt; &amp;results, const BooleanGraph *graph) noexcept</div><div class="ttdoc">Converts resultant sets of basic event indices to strings for future reporting. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8cc_source.xhtml#l00093">fault_tree_analysis.cc:93</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00037">settings.h:37</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Product_xhtml_a76fc3f1f84ea87d601c5c268639137a9"><div class="ttname"><a href="classscram_1_1core_1_1Product.xhtml#a76fc3f1f84ea87d601c5c268639137a9">scram::core::Product::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00136">fault_tree_analysis.h:136</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml">scram::core::BooleanGraph</a></div><div class="ttdoc">BooleanGraph is a propositional directed acyclic graph (PDAG). </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00780">boolean_graph.h:780</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
