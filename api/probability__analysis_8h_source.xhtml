<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>probability_analysis.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">probability_analysis.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="probability__analysis_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file probability_analysis.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Contains functionality to do numerical analysis of probabilities.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_PROBABILITY_ANALYSIS_H_</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define SCRAM_SRC_PROBABILITY_ANALYSIS_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="analysis_8h.xhtml">analysis.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="bdd_8h.xhtml">bdd.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="boolean__graph_8h.xhtml">boolean_graph.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fault__tree__analysis_8h.xhtml">fault_tree_analysis.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">core</a> {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">/// Main quantitative analysis class.</span></div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml">   35</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml">ProbabilityAnalysis</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1Analysis.xhtml">Analysis</a> {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">  /// Probability analysis</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">  /// with the results of qualitative analysis.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">  /// @param[in] fta  Fault tree analysis with results.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">  /// @pre The underlying fault tree must not have changed in any way</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">  ///      since the fault tree analysis finished.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml#a96fdaa4c4b7615383d2328d0bbe3c526">ProbabilityAnalysis</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml">FaultTreeAnalysis</a>* fta);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml">ProbabilityAnalysis</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">  /// Performs quantitative analysis on the supplied fault tree.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">  /// @pre Analysis is called only once.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml#ab68a356b0bdeb793d30d3b6e84847d12">Analyze</a>() noexcept;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">  /// @returns The total probability calculated by the analysis.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">  /// @note The user should make sure that the analysis is actually done.</span></div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml#a1911b04166a0f1ee816410482f14fe9a">   56</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml#a1911b04166a0f1ee816410482f14fe9a">p_total</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> p_total_; }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">  /// Calculates the total probability.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  /// @returns The total probability of the graph or products.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">double</span> CalculateTotalProbability() noexcept = 0;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordtype">double</span> p_total_;  <span class="comment">///&lt; Total probability of the top event.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// Quantitative calculator of a probability value of a single cut set.</span></div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml">   68</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml">CutSetProbabilityCalculator</a> {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml#a724f1666a241004637d3b8d8298efeb8">   70</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml#a724f1666a241004637d3b8d8298efeb8">CutSet</a> = std::vector&lt;int&gt;;  <span class="comment">///&lt; Alias for clarity.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">  /// Calculates a probability of a cut set,</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">  /// whose members are in AND relationship with each other.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">  /// This function assumes independence of each member.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">  /// @param[in] cut_set  A cut set with positive indices of basic events.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  /// @param[in] p_vars  Probabilities of events mapped to a vector.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">  /// @returns The total probability of the cut set.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  /// @pre The cut set doesn&#39;t contain complements.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">  /// @pre Probability values are non-negative.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">  /// @pre Indices of events directly map to vector indices.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> Calculate(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml#a724f1666a241004637d3b8d8298efeb8">CutSet</a>&amp; cut_set,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                   <span class="keyword">const</span> std::vector&lt;double&gt;&amp; p_vars) noexcept;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// Checks the special case of a unity set with probability 1.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">  /// @param[in] cut_sets  Collection of ALL cut sets.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">  /// @returns true if the Unity set is detected.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">  /// @pre The unity set is indicated by a single empty set.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">  /// @pre Provided cut sets are ALL the cut sets under consideration.</span></div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml#a65d68a9aacfdcb5a918f5d33bd43306d">   95</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml#a65d68a9aacfdcb5a918f5d33bd43306d">CheckUnity</a>(<span class="keyword">const</span> std::vector&lt;CutSet&gt;&amp; cut_sets) noexcept {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> cut_sets.size() == 1 &amp;&amp; cut_sets.front().empty();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;};</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">/// Quantitative calculator of probability values</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">/// with the Rare-Event approximation.</span></div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1RareEventCalculator.xhtml">  102</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1RareEventCalculator.xhtml">RareEventCalculator</a> : <span class="keyword">private</span> <a class="code" href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml">CutSetProbabilityCalculator</a> {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">  /// Calculates probabilities</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">  /// using the Rare-Event approximation.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">  /// @param[in] cut_sets  A collection of sets of indices of basic events.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  /// @param[in] p_vars  Probabilities of events mapped to a vector.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">  /// @returns The total probability with the rare-event approximation.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">  /// @pre Absolute indices of events directly map to vector indices.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">  /// @post In case the calculated probability exceeds 1,</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">  ///       the probability is adjusted to 1.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  ///       It is very unwise to use the rare-event approximation</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  ///       with large probability values.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> Calculate(<span class="keyword">const</span> std::vector&lt;CutSet&gt;&amp; cut_sets,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                   <span class="keyword">const</span> std::vector&lt;double&gt;&amp; p_vars) noexcept;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;};</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">/// Quantitative calculator of probability values</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">/// with the Min-Cut-Upper Bound approximation.</span></div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1McubCalculator.xhtml">  124</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1McubCalculator.xhtml">McubCalculator</a> : <span class="keyword">private</span> <a class="code" href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml">CutSetProbabilityCalculator</a> {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">  /// Calculates probabilities</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">  /// using the minimal cut set upper bound (MCUB) approximation.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">  /// @param[in] cut_sets  A collection of sets of indices of basic events.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">  /// @param[in] p_vars  Probabilities of events mapped to a vector.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">  /// @returns The total probability with the MCUB approximation.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> Calculate(<span class="keyword">const</span> std::vector&lt;CutSet&gt;&amp; cut_sets,</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                   <span class="keyword">const</span> std::vector&lt;double&gt;&amp; p_vars) noexcept;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;};</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">/// Base class for Probability analyzers.</span></div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml">  138</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml">ProbabilityAnalyzerBase</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml">ProbabilityAnalysis</a> {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a83544a21ce0aec76ccf1526f3d19b054">  140</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a83544a21ce0aec76ccf1526f3d19b054">Product</a> = std::vector&lt;int&gt;;  <span class="comment">///&lt; Alias for clarity.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">  /// Constructs probability analyzer from a fault tree analyzer.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">  /// @tparam Algorithm  Qualitative analysis algorithm.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  /// @param[in] fta  Finished fault tree analyzer with results.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> Algorithm&gt;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a5433f78a2e5c51ce9602cb5647686c7e">  148</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a5433f78a2e5c51ce9602cb5647686c7e">ProbabilityAnalyzerBase</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml">FaultTreeAnalyzer&lt;Algorithm&gt;</a>* fta)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      : <a class="code" href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml">ProbabilityAnalysis</a>(fta),</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        graph_(fta-&gt;graph()),</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        products_(fta-&gt;algorithm()-&gt;products()) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    ExtractVariableProbabilities();</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">  /// @returns The original Boolean graph from the fault tree analyzer.</span></div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a981c5a77ea4002ea7794854ffb801791">  156</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml">BooleanGraph</a>* <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a981c5a77ea4002ea7794854ffb801791">graph</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> graph_; }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">  /// @returns The resulting products of the fault tree analyzer.</span></div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a77b6b0303fefce13025243dbdf48061b">  159</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Product&gt;&amp; <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a77b6b0303fefce13025243dbdf48061b">products</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> products_; }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">  /// @returns A mapping for probability values and indices.</span></div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a9497e06d2d9a5ab524179b45c37011b2">  162</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;double&gt;&amp; <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a9497e06d2d9a5ab524179b45c37011b2">p_vars</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> p_vars_; }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  ~<a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml">ProbabilityAnalyzerBase</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">  /// Upon construction of the probability analysis,</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  /// stores the variable probabilities in a continuous container</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">  /// for retrieval by their indices instead of pointers.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">  /// @note This function may seem redundant,</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">  ///       for it&#39;s super-short and simple to do it inline in the constructor.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">  ///       The main benefit of the out-of-line implementation</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">  ///       is compile-time decoupling from the input BasicEvent classes.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> ExtractVariableProbabilities();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml">BooleanGraph</a>* graph_;  <span class="comment">///&lt; Boolean graph from the fault tree analysis.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Product&gt;&amp; products_;  <span class="comment">///&lt; A collection of products.</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span>  std::vector&lt;double&gt; p_vars_;  <span class="comment">///&lt; Variable probabilities.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">/// Fault-tree-analysis-aware probability analyzer.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">/// Probability analyzer provides the main engine for probability analysis.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">/// @tparam Calculator  Quantitative analysis calculator.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Calculator&gt;</div><div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzer.xhtml">  188</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzer.xhtml">ProbabilityAnalyzer</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml">ProbabilityAnalyzerBase</a> {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a5433f78a2e5c51ce9602cb5647686c7e">ProbabilityAnalyzerBase::ProbabilityAnalyzerBase</a>;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">  /// Calculates the total probability</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">  /// with a different set of probability values</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">  /// than the one given upon construction.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">  /// @param[in] p_vars  A map of probabilities of the graph variables.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">  ///                    The indices of the variables must map</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">  ///                    exactly to the vector indices.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">  /// @returns The total probability calculated with the given values.</span></div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzer.xhtml#a1aa8708811e73f05456aaf90abcdc6c6">  201</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzer.xhtml#a1aa8708811e73f05456aaf90abcdc6c6">CalculateTotalProbability</a>(<span class="keyword">const</span> std::vector&lt;double&gt;&amp; p_vars) noexcept {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">return</span> calc_.Calculate(<a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a77b6b0303fefce13025243dbdf48061b">ProbabilityAnalyzerBase::products</a>(), p_vars);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">  /// Calculates the total probability.</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">  /// @returns The total probability of the graph or the sum of products.</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> CalculateTotalProbability() noexcept <span class="keyword">override</span> {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">return</span> CalculateTotalProbability(<a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a9497e06d2d9a5ab524179b45c37011b2">ProbabilityAnalyzerBase::p_vars</a>());</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  Calculator calc_;  <span class="comment">///&lt; Provider of the calculation logic.</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">/// Specialization of probability analyzer with Binary Decision Diagrams.</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">/// The quantitative analysis is done with BDD.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzer_3_01Bdd_01_4.xhtml">  219</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzer.xhtml">ProbabilityAnalyzer</a>&lt;<a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>&gt; : <span class="keyword">public</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml">ProbabilityAnalyzerBase</a> {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">  /// Constructs probability analyzer from a fault tree analyzer</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">  /// with the same algorithm.</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">  /// @tparam Algorithm  Fault tree analysis algorithm.</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">  /// @param[in] fta  Finished fault tree analyzer with results.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> Algorithm&gt;</div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzer_3_01Bdd_01_4.xhtml#a367643ac8e7d50c5ba762d1162f37168">  228</a></span>&#160;  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzer_3_01Bdd_01_4.xhtml#a367643ac8e7d50c5ba762d1162f37168">ProbabilityAnalyzer</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml">FaultTreeAnalyzer&lt;Algorithm&gt;</a>* fta)</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      : <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml">ProbabilityAnalyzerBase</a>(fta),</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        current_mark_(false),</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        owner_(true) {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    CreateBdd(*fta);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">  /// Reuses BDD structures from Fault tree analyzer.</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">  /// @param[in] fta  Finished fault tree analyzer with BDD algorithms.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">  /// @pre BDD is fully formed and used.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">  /// @post FaultTreeAnalyzer is not corrupted</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">  ///       by use of its BDD internals.</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzer.xhtml">ProbabilityAnalyzer</a>(<a class="code" href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml">FaultTreeAnalyzer&lt;Bdd&gt;</a>* fta);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">  /// Deletes the Boolean graph and BDD</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">  /// only if ProbabilityAnalyzer is the owner of them.</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"></span>  ~<a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzer.xhtml">ProbabilityAnalyzer</a>() noexcept;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">  /// @returns Binary decision diagram used for calculations.</span></div><div class="line"><a name="l00250"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1ProbabilityAnalyzer_3_01Bdd_01_4.xhtml#abaf6378f795be32f54c6e5829c350c37">  250</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* <a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzer_3_01Bdd_01_4.xhtml#abaf6378f795be32f54c6e5829c350c37">bdd_graph</a>() { <span class="keywordflow">return</span> bdd_graph_; }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">  /// @copydoc ProbabilityAnalyzer::CalculateTotalProbability</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> CalculateTotalProbability(<span class="keyword">const</span> std::vector&lt;double&gt;&amp; p_vars) noexcept;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">  /// Calculates the total probability.</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">  /// @returns The total probability of the graph.</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> CalculateTotalProbability() noexcept <span class="keyword">override</span> {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">return</span> CalculateTotalProbability(<a class="code" href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a9497e06d2d9a5ab524179b45c37011b2">ProbabilityAnalyzerBase::p_vars</a>());</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">  /// Creates a new BDD for use by the analyzer.</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">  /// @param[in] fta  The fault tree analysis providing the root gate.</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">  /// @pre The function is called in the constructor only once.</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> CreateBdd(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml">FaultTreeAnalysis</a>&amp; fta) noexcept;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">  /// Calculates exact probability</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">  /// of a function graph represented by its root BDD vertex.</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">  /// @param[in] vertex  The root vertex of a function graph.</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">  /// @param[in] mark  A flag to mark traversed vertices.</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">  /// @param[in] p_vars  The probabilities of the variables</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">  ///                    mapped by their indices.</span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">  /// @returns Probability value.</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">  /// @warning If a vertex is already marked with the input mark,</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">  ///          it will not be traversed and updated with a probability value.</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="fault__tree__analysis_8cc.xhtml#ae728f907b1ba93340d9c376af734cd6c">CalculateProbability</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">Bdd::VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> mark,</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                              <span class="keyword">const</span> std::vector&lt;double&gt;&amp; p_vars) noexcept;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd_graph_;  <span class="comment">///&lt; The main BDD graph for analysis.</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> current_mark_;  <span class="comment">///&lt; To keep track of BDD current mark.</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> owner_;  <span class="comment">///&lt; Indication that pointers are handles.</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}  <span class="comment">// namespace core</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_PROBABILITY_ANALYSIS_H_</span></div><div class="ttc" id="bdd_8h_xhtml"><div class="ttname"><a href="bdd_8h.xhtml">bdd.h</a></div><div class="ttdoc">Fault tree analysis with the Binary Decision Diagram algorithms. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml">scram::core::Bdd</a></div><div class="ttdoc">Analysis of Boolean graphs with Binary Decision Diagrams. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00700">bdd.h:700</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1RareEventCalculator_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1RareEventCalculator.xhtml">scram::core::RareEventCalculator</a></div><div class="ttdoc">Quantitative calculator of probability values with the Rare-Event approximation. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00102">probability_analysis.h:102</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalyzerBase_xhtml_a83544a21ce0aec76ccf1526f3d19b054"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a83544a21ce0aec76ccf1526f3d19b054">scram::core::ProbabilityAnalyzerBase::Product</a></div><div class="ttdeci">std::vector&lt; int &gt; Product</div><div class="ttdoc">Alias for clarity. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00140">probability_analysis.h:140</a></div></div>
<div class="ttc" id="version_8h_xhtml_a08935e0d1ae92ad3bf839e9757fbb53c"><div class="ttname"><a href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">scram::version::core</a></div><div class="ttdeci">const char * core()</div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalyzerBase_xhtml_a5433f78a2e5c51ce9602cb5647686c7e"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a5433f78a2e5c51ce9602cb5647686c7e">scram::core::ProbabilityAnalyzerBase::ProbabilityAnalyzerBase</a></div><div class="ttdeci">ProbabilityAnalyzerBase(const FaultTreeAnalyzer&lt; Algorithm &gt; *fta)</div><div class="ttdoc">Constructs probability analyzer from a fault tree analyzer. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00148">probability_analysis.h:148</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalysis_xhtml_a96fdaa4c4b7615383d2328d0bbe3c526"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml#a96fdaa4c4b7615383d2328d0bbe3c526">scram::core::ProbabilityAnalysis::ProbabilityAnalysis</a></div><div class="ttdeci">ProbabilityAnalysis(const FaultTreeAnalysis *fta)</div><div class="ttdoc">Probability analysis with the results of qualitative analysis. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8cc_source.xhtml#l00031">probability_analysis.cc:31</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalyzerBase_xhtml_a9497e06d2d9a5ab524179b45c37011b2"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a9497e06d2d9a5ab524179b45c37011b2">scram::core::ProbabilityAnalyzerBase::p_vars</a></div><div class="ttdeci">const std::vector&lt; double &gt; &amp; p_vars() const </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00162">probability_analysis.h:162</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalyzerBase_xhtml_a981c5a77ea4002ea7794854ffb801791"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a981c5a77ea4002ea7794854ffb801791">scram::core::ProbabilityAnalyzerBase::graph</a></div><div class="ttdeci">const BooleanGraph * graph() const </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00156">probability_analysis.h:156</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalyzerBase_xhtml_a77b6b0303fefce13025243dbdf48061b"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml#a77b6b0303fefce13025243dbdf48061b">scram::core::ProbabilityAnalyzerBase::products</a></div><div class="ttdeci">const std::vector&lt; Product &gt; &amp; products() const </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00159">probability_analysis.h:159</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalyzerBase_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalyzerBase.xhtml">scram::core::ProbabilityAnalyzerBase</a></div><div class="ttdoc">Base class for Probability analyzers. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00138">probability_analysis.h:138</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CutSetProbabilityCalculator_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml">scram::core::CutSetProbabilityCalculator</a></div><div class="ttdoc">Quantitative calculator of a probability value of a single cut set. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00068">probability_analysis.h:68</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalysis_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml">scram::core::ProbabilityAnalysis</a></div><div class="ttdoc">Main quantitative analysis class. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00035">probability_analysis.h:35</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalyzer_3_01Bdd_01_4_xhtml_abaf6378f795be32f54c6e5829c350c37"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalyzer_3_01Bdd_01_4.xhtml#abaf6378f795be32f54c6e5829c350c37">scram::core::ProbabilityAnalyzer&lt; Bdd &gt;::bdd_graph</a></div><div class="ttdeci">Bdd * bdd_graph()</div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00250">probability_analysis.h:250</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_abac07f2126ed657d744a92e4f88415fd"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">scram::core::Bdd::VertexPtr</a></div><div class="ttdeci">IntrusivePtr&lt; Vertex&lt; Ite &gt;&gt; VertexPtr</div><div class="ttdoc">BDD vertex base. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00702">bdd.h:702</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalyzer_3_01Bdd_01_4_xhtml_a367643ac8e7d50c5ba762d1162f37168"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalyzer_3_01Bdd_01_4.xhtml#a367643ac8e7d50c5ba762d1162f37168">scram::core::ProbabilityAnalyzer&lt; Bdd &gt;::ProbabilityAnalyzer</a></div><div class="ttdeci">ProbabilityAnalyzer(const FaultTreeAnalyzer&lt; Algorithm &gt; *fta)</div><div class="ttdoc">Constructs probability analyzer from a fault tree analyzer with the same algorithm. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00228">probability_analysis.h:228</a></div></div>
<div class="ttc" id="fault__tree__analysis_8cc_xhtml_ae728f907b1ba93340d9c376af734cd6c"><div class="ttname"><a href="fault__tree__analysis_8cc.xhtml#ae728f907b1ba93340d9c376af734cd6c">scram::core::CalculateProbability</a></div><div class="ttdeci">double CalculateProbability(const Product &amp;product)</div><div class="ttdoc">Helper function to compute a Boolean product probability. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8cc_source.xhtml#l00076">fault_tree_analysis.cc:76</a></div></div>
<div class="ttc" id="fault__tree__analysis_8h_xhtml"><div class="ttname"><a href="fault__tree__analysis_8h.xhtml">fault_tree_analysis.h</a></div><div class="ttdoc">Fault Tree Analysis. </div></div>
<div class="ttc" id="classscram_1_1core_1_1McubCalculator_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1McubCalculator.xhtml">scram::core::McubCalculator</a></div><div class="ttdoc">Quantitative calculator of probability values with the Min-Cut-Upper Bound approximation. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00124">probability_analysis.h:124</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalysis_xhtml_a1911b04166a0f1ee816410482f14fe9a"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml#a1911b04166a0f1ee816410482f14fe9a">scram::core::ProbabilityAnalysis::p_total</a></div><div class="ttdeci">double p_total() const </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00056">probability_analysis.h:56</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml"><div class="ttname"><a href="boolean__graph_8h.xhtml">boolean_graph.h</a></div><div class="ttdoc">Classes and facilities to represent simplified fault trees as Boolean graphs with event and gate indi...</div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalysis_xhtml_ab68a356b0bdeb793d30d3b6e84847d12"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalysis.xhtml#ab68a356b0bdeb793d30d3b6e84847d12">scram::core::ProbabilityAnalysis::Analyze</a></div><div class="ttdeci">void Analyze() noexcept</div><div class="ttdoc">Performs quantitative analysis on the supplied fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8cc_source.xhtml#l00035">probability_analysis.cc:35</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalyzer_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalyzer.xhtml">scram::core::ProbabilityAnalyzer</a></div><div class="ttdoc">Fault-tree-analysis-aware probability analyzer. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00188">probability_analysis.h:188</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Analysis_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Analysis.xhtml">scram::core::Analysis</a></div><div class="ttdoc">Base abstract class for all analysis with settings. </div><div class="ttdef"><b>Definition:</b> <a href="analysis_8h_source.xhtml#l00036">analysis.h:36</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1ProbabilityAnalyzer_xhtml_a1aa8708811e73f05456aaf90abcdc6c6"><div class="ttname"><a href="classscram_1_1core_1_1ProbabilityAnalyzer.xhtml#a1aa8708811e73f05456aaf90abcdc6c6">scram::core::ProbabilityAnalyzer::CalculateTotalProbability</a></div><div class="ttdeci">double CalculateTotalProbability(const std::vector&lt; double &gt; &amp;p_vars) noexcept</div><div class="ttdoc">Calculates the total probability with a different set of probability values than the one given upon c...</div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00201">probability_analysis.h:201</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CutSetProbabilityCalculator_xhtml_a724f1666a241004637d3b8d8298efeb8"><div class="ttname"><a href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml#a724f1666a241004637d3b8d8298efeb8">scram::core::CutSetProbabilityCalculator::CutSet</a></div><div class="ttdeci">std::vector&lt; int &gt; CutSet</div><div class="ttdoc">Alias for clarity. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00070">probability_analysis.h:70</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml">scram::core::BooleanGraph</a></div><div class="ttdoc">BooleanGraph is a propositional directed acyclic graph (PDAG). </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00780">boolean_graph.h:780</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1CutSetProbabilityCalculator_xhtml_a65d68a9aacfdcb5a918f5d33bd43306d"><div class="ttname"><a href="classscram_1_1core_1_1CutSetProbabilityCalculator.xhtml#a65d68a9aacfdcb5a918f5d33bd43306d">scram::core::CutSetProbabilityCalculator::CheckUnity</a></div><div class="ttdeci">double CheckUnity(const std::vector&lt; CutSet &gt; &amp;cut_sets) noexcept</div><div class="ttdoc">Checks the special case of a unity set with probability 1. </div><div class="ttdef"><b>Definition:</b> <a href="probability__analysis_8h_source.xhtml#l00095">probability_analysis.h:95</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalysis_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalysis.xhtml">scram::core::FaultTreeAnalysis</a></div><div class="ttdoc">Fault tree analysis functionality. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00211">fault_tree_analysis.h:211</a></div></div>
<div class="ttc" id="analysis_8h_xhtml"><div class="ttname"><a href="analysis_8h.xhtml">analysis.h</a></div><div class="ttdoc">Common facilities for all analysis classes. </div></div>
<div class="ttc" id="classscram_1_1core_1_1FaultTreeAnalyzer_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1FaultTreeAnalyzer.xhtml">scram::core::FaultTreeAnalyzer</a></div><div class="ttdoc">Fault tree analysis facility with specific algorithms. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree__analysis_8h_source.xhtml#l00279">fault_tree_analysis.h:279</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
