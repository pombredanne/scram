<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>cycle.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">cycle.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cycle_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file cycle.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Validation facilities to detect and print cycles in graphs.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_CYCLE_H_</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define SCRAM_SRC_CYCLE_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="parameter_8h.xhtml">parameter.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>cycle {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">/// Determines the connectors between nodes.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">/// @param[in] node  The node under cycle investigation.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/// @returns The connector belonging to the node.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a46b3599407a818c753d9116f05a87a94">   41</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>* <a class="code" href="cycle_8h.xhtml#a46b3599407a818c753d9116f05a87a94">GetConnector</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a>&amp; node) {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordflow">return</span> &amp;node-&gt;formula();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a9e6597aceeba7d68d9cfac2069efbd37">   44</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* <a class="code" href="cycle_8h.xhtml#a46b3599407a818c753d9116f05a87a94">GetConnector</a>(<a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>* node) { <span class="keywordflow">return</span> node; }<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">/// Retrieves nodes from a connector.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">/// @param[in] connector  The connector starting from another node.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">/// @returns  The iterable collection of nodes on the other end of connection.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#ac1279787280e6e95fefd75ad5b2c177a">   54</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keyword">const</span> std::vector&lt;GatePtr&gt;&amp; <a class="code" href="cycle_8h.xhtml#ac1279787280e6e95fefd75ad5b2c177a">GetNodes</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a>&amp; connector) {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordflow">return</span> connector-&gt;gate_args();</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#aded5afc42939ab61ad13d36a91a613ae">   57</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> std::vector&lt;GatePtr&gt;&amp; <a class="code" href="cycle_8h.xhtml#ac1279787280e6e95fefd75ad5b2c177a">GetNodes</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>* connector) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordflow">return</span> connector-&gt;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a053f49daf89fecd37c4af5ac465b122b">gate_args</a>();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a17ce6226d352271752ef495762868a03">   60</a></span>&#160;<span class="keyword">inline</span> std::vector&lt;Parameter*&gt; <a class="code" href="cycle_8h.xhtml#ac1279787280e6e95fefd75ad5b2c177a">GetNodes</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* connector) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  std::vector&lt;Parameter*&gt; nodes;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; arg : connector-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">args</a>()) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">auto</span>* ptr = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>*<span class="keyword">&gt;</span>(arg.get());</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">if</span> (ptr)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      nodes.push_back(ptr);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordflow">return</span> nodes;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/// Retrieves connectors from a connector.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">/// @param[in] connector  The connector starting from another node.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">/// @returns  The iterable collection of connectors.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"></span><span class="keyword">inline</span></div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#ab4edc4da0dc37e4f9410df2c127a985d">   79</a></span>&#160;<span class="keyword">const</span> std::vector&lt;FormulaPtr&gt;&amp; <a class="code" href="cycle_8h.xhtml#ab4edc4da0dc37e4f9410df2c127a985d">GetConnectors</a>(<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a>&amp; connector) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keywordflow">return</span> connector-&gt;formula_args();</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a822bdf06747434b6100131d718eda562">   82</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> std::vector&lt;FormulaPtr&gt;&amp; <a class="code" href="cycle_8h.xhtml#ab4edc4da0dc37e4f9410df2c127a985d">GetConnectors</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>* connector) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordflow">return</span> connector-&gt;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">formula_args</a>();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a2cdb529c18dd257f342fe68192801b4e">   85</a></span>&#160;<span class="keyword">inline</span> std::vector&lt;Expression*&gt; <a class="code" href="cycle_8h.xhtml#ab4edc4da0dc37e4f9410df2c127a985d">GetConnectors</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* connector) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  std::vector&lt;Expression*&gt; connectors;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; arg : connector-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">args</a>()) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">if</span> (dynamic_cast&lt;Parameter*&gt;(arg.get()) == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      connectors.push_back(arg.get());</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordflow">return</span> connectors;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}<span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Ptr&gt;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="cycle_8h.xhtml#a5ef074c191f83ce2c79187459b2231d7">ContinueConnector</a>(<span class="keyword">const</span> Ptr&amp; connector, std::vector&lt;std::string&gt;* cycle);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">/// Traverses nodes with connectors to find a cycle.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">/// Interrupts the detection at first cycle.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">/// Nodes get marked.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">/// The connector of the node is retrieved via unqualified call to</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">/// GetConnector(node).</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">/// @tparam Ptr  The pointer type managing nodes in the graph.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">/// @param[in,out] node  The node to start with.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">/// @param[out] cycle  If a cycle is detected,</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">///                    it is given in reverse,</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">///                    ending with the input node&#39;s original name.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">///                    This is for printing errors and efficiency.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">/// @returns True if a cycle is found.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">/// @post All traversed nodes are marked with non-clear marks.</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Ptr&gt;</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#aa171bdba0b088457d0a26b9b78562bee">  117</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="cycle_8h.xhtml#aa171bdba0b088457d0a26b9b78562bee">DetectCycle</a>(<span class="keyword">const</span> Ptr&amp; node, std::vector&lt;std::string&gt;* cycle) {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <span class="keywordflow">if</span> (!node-&gt;mark()) {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    node-&gt;mark(NodeMark::kTemporary);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span> (ContinueConnector(<a class="code" href="cycle_8h.xhtml#a46b3599407a818c753d9116f05a87a94">GetConnector</a>(node), cycle)) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      cycle-&gt;push_back(node-&gt;name());</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    node-&gt;mark(NodeMark::kPermanent);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (node-&gt;mark() == NodeMark::kTemporary) {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    cycle-&gt;push_back(node-&gt;name());</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  assert(node-&gt;mark() == NodeMark::kPermanent);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">/// Helper function to check for cyclic references through connectors.</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">/// Connectors may get market upon traversal.</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">/// Connectors and nodes of the connector are retrieved via unqualified calls:</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">/// GetConnectors(connector) and GetNodes(connector).</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">/// @tparam Ptr  The pointer type managing the connectors (nodes, edges).</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">/// @param[in,out] connector  Connector to nodes.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">/// @param[out] cycle  The cycle path if detected.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">/// @returns True if a cycle is detected.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Ptr&gt;</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="cycle_8h.xhtml#a5ef074c191f83ce2c79187459b2231d7">  146</a></span>&#160;<span class="keywordtype">bool</span> ContinueConnector(<span class="keyword">const</span> Ptr&amp; connector, std::vector&lt;std::string&gt;* cycle) {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; node : <a class="code" href="cycle_8h.xhtml#ac1279787280e6e95fefd75ad5b2c177a">GetNodes</a>(connector)) {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="cycle_8h.xhtml#aa171bdba0b088457d0a26b9b78562bee">DetectCycle</a>(node, cycle))</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; link : <a class="code" href="cycle_8h.xhtml#ab4edc4da0dc37e4f9410df2c127a985d">GetConnectors</a>(connector)) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">if</span> (ContinueConnector(link, cycle))</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">/// Prints the detected cycle from the output</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">/// produced by cycle detection functions.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">/// @param[in] cycle  Cycle containing names in reverse order.</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">/// @returns String representation of the cycle.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span>std::string <a class="code" href="cycle_8cc.xhtml#a01c9d88b1399bae82aef8d4dfef37014">PrintCycle</a>(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; cycle);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}  <span class="comment">// namespace cycle</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_CYCLE_H_</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00326">event.h:326</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a053f49daf89fecd37c4af5ac465b122b"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a053f49daf89fecd37c4af5ac465b122b">scram::mef::Formula::gate_args</a></div><div class="ttdeci">const std::vector&lt; GatePtr &gt; &amp; gate_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00361">event.h:361</a></div></div>
<div class="ttc" id="cycle_8cc_xhtml_a01c9d88b1399bae82aef8d4dfef37014"><div class="ttname"><a href="cycle_8cc.xhtml#a01c9d88b1399bae82aef8d4dfef37014">scram::mef::cycle::PrintCycle</a></div><div class="ttdeci">std::string PrintCycle(const std::vector&lt; std::string &gt; &amp;cycle)</div><div class="ttdoc">Prints the detected cycle from the output produced by cycle detection functions. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8cc_source.xhtml#l00029">cycle.cc:29</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a1834910c86a27726923fb285f73cd839"><div class="ttname"><a href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">scram::mef::ExpressionPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Expression &gt; ExpressionPtr</div><div class="ttdoc">Shared expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00038">expression.h:38</a></div></div>
<div class="ttc" id="event_8h_xhtml_a04cb31142e9883483951cba3ab63b597"><div class="ttname"><a href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">scram::mef::GatePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Shared gates in models. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00115">event.h:115</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_ac1279787280e6e95fefd75ad5b2c177a"><div class="ttname"><a href="cycle_8h.xhtml#ac1279787280e6e95fefd75ad5b2c177a">scram::mef::cycle::GetNodes</a></div><div class="ttdeci">const std::vector&lt; GatePtr &gt; &amp; GetNodes(const FormulaPtr &amp;connector)</div><div class="ttdoc">Retrieves nodes from a connector. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00054">cycle.h:54</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ad4d7901b9be9105c9799167cac7af3e1"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; ExpressionPtr &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00079">expression.h:79</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_ab4edc4da0dc37e4f9410df2c127a985d"><div class="ttname"><a href="cycle_8h.xhtml#ab4edc4da0dc37e4f9410df2c127a985d">scram::mef::cycle::GetConnectors</a></div><div class="ttdeci">const std::vector&lt; FormulaPtr &gt; &amp; GetConnectors(const FormulaPtr &amp;connector)</div><div class="ttdoc">Retrieves connectors from a connector. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00079">cycle.h:79</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="cycle_8h_xhtml_aa171bdba0b088457d0a26b9b78562bee"><div class="ttname"><a href="cycle_8h.xhtml#aa171bdba0b088457d0a26b9b78562bee">scram::mef::cycle::DetectCycle</a></div><div class="ttdeci">bool DetectCycle(const Ptr &amp;node, std::vector&lt; std::string &gt; *cycle)</div><div class="ttdoc">Traverses nodes with connectors to find a cycle. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00117">cycle.h:117</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_af3c5953f817cc202b5009cc4557c7d72"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">scram::mef::Formula::formula_args</a></div><div class="ttdeci">const std::vector&lt; FormulaPtr &gt; &amp; formula_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00362">event.h:362</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_a5ef074c191f83ce2c79187459b2231d7"><div class="ttname"><a href="cycle_8h.xhtml#a5ef074c191f83ce2c79187459b2231d7">scram::mef::cycle::ContinueConnector</a></div><div class="ttdeci">bool ContinueConnector(const Ptr &amp;connector, std::vector&lt; std::string &gt; *cycle)</div><div class="ttdoc">Helper function to check for cyclic references through connectors. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00146">cycle.h:146</a></div></div>
<div class="ttc" id="cycle_8h_xhtml_a46b3599407a818c753d9116f05a87a94"><div class="ttname"><a href="cycle_8h.xhtml#a46b3599407a818c753d9116f05a87a94">scram::mef::cycle::GetConnector</a></div><div class="ttdeci">const Formula * GetConnector(const GatePtr &amp;node)</div><div class="ttdoc">Determines the connectors between nodes. </div><div class="ttdef"><b>Definition:</b> <a href="cycle_8h_source.xhtml#l00041">cycle.h:41</a></div></div>
<div class="ttc" id="parameter_8h_xhtml"><div class="ttname"><a href="parameter_8h.xhtml">parameter.h</a></div><div class="ttdoc">Parameter expressions that act like a shareable variable. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00049">expression.h:49</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00257">event.h:257</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Parameter_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Parameter.xhtml">scram::mef::Parameter</a></div><div class="ttdoc">This class provides a representation of a variable in basic event description. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00036">parameter.h:36</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
