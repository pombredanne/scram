<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>zbdd.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">zbdd.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="zbdd_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2015-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file zbdd.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of Zero-Suppressed BDD algorithms.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="zbdd_8h.xhtml">zbdd.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm.hpp&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ext_8h.xhtml">ext.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="logger_8h.xhtml">logger.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">core</a> {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#ifndef NDEBUG</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">/// Runs assertions on ZBDD structure.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"></span><span class="comment">///</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span><span class="comment">/// @param[in] full  A flag for full test including submodules.</span></div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="zbdd_8cc.xhtml#a99fa6e0c04a9aa2b3bceac30ae9d7643">   37</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define CHECK_ZBDD(full)      \</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">  ClearMarks(root_, full);    \</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">  TestStructure(root_, full); \</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">  ClearMarks(root_, full)</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#define CHECK_ZBDD(full)  </span><span class="comment">///&lt; No checks on release.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span>#endif</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#ae819f5439416479971018ac134233091">   45</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ae819f5439416479971018ac134233091">Zbdd::Log</a>() noexcept {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <a class="code" href="zbdd_8cc.xhtml#a99fa6e0c04a9aa2b3bceac30ae9d7643">CHECK_ZBDD</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of ZBDD nodes created: &quot;</span> &lt;&lt; set_id_ - 1;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of entries in unique table: &quot;</span> &lt;&lt; unique_table_.size();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of entries in AND table: &quot;</span> &lt;&lt; and_table_.size();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of entries in OR table: &quot;</span> &lt;&lt; or_table_.size();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of entries in subsume table: &quot;</span> &lt;&lt; subsume_table_.size();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of entries in minimal table: &quot;</span> &lt;&lt; minimal_results_.size();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  ClearMarks(root_, <span class="keyword">false</span>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of SetNodes in ZBDD: &quot;</span> &lt;&lt; CountSetNodes(root_);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  ClearMarks(root_, <span class="keyword">false</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of products: &quot;</span> &lt;&lt; CountProducts(root_, <span class="keyword">false</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  ClearMarks(root_, <span class="keyword">false</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">   60</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd::Zbdd</a>(<a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>) noexcept</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    : <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd</a>(bdd-&gt;root(), bdd-&gt;coherent(), bdd, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>) {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <a class="code" href="zbdd_8cc.xhtml#a99fa6e0c04a9aa2b3bceac30ae9d7643">CHECK_ZBDD</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a33d57c1808da12dc735a6850b2c83282">   65</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd::Zbdd</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml">BooleanGraph</a>* fault_tree, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>) noexcept</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    : <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd</a>(*fault_tree-&gt;root(), <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>) {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  assert(!fault_tree-&gt;complement() &amp;&amp; <span class="stringliteral">&quot;Complements must be propagated.&quot;</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordflow">if</span> (fault_tree-&gt;root()-&gt;IsConstant()) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">if</span> (fault_tree-&gt;root()-&gt;state() == <a class="code" href="boolean__graph_8h.xhtml#ac030b66fb750e5de6987fe8c5201b008aec44cbf0ef06b0fda33dc3b276edd6a2">kNullState</a>) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (fault_tree-&gt;root()-&gt;type() == <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>) {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; top_gate = fault_tree-&gt;root();</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    assert(top_gate-&gt;args().size() == 1);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    assert(top_gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;().empty());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">int</span> child = *top_gate-&gt;args().begin();</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span> (child &lt; 0) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      <span class="keyword">const</span> <a class="code" href="boolean__graph_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">VariablePtr</a>&amp; var = top_gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;().<a class="code" href="boolean__graph_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>()-&gt;second;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">FindOrAddVertex</a>(var-&gt;index(), <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>, var-&gt;order());</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <a class="code" href="zbdd_8cc.xhtml#a99fa6e0c04a9aa2b3bceac30ae9d7643">CHECK_ZBDD</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a77945d28bd832d2735969d0b0a451c78">   89</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a77945d28bd832d2735969d0b0a451c78">Zbdd::Analyze</a>() noexcept {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  assert(root_-&gt;terminal() ||</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;         <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(root_)-&gt;max_set_order() &lt;= kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Minimize</a>(root_);  <span class="comment">// Likely to be minimal by now.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  assert(root_-&gt;terminal() || <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(root_)-&gt;minimal());</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; entry : modules_)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    entry.second-&gt;Analyze();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(gen_time);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>) &lt;&lt; <span class="stringliteral">&quot;Getting products from minimized ZBDD: G&quot;</span> &lt;&lt; module_index_;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="comment">// Complete cleanup of the memory.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#af9f012da1bb6b0835b56dfd98f5dde64">ReleaseTables</a>();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  ClearMarks(root_, <span class="keyword">false</span>);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  ClearCounts(root_, <span class="keyword">false</span>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  EncodeLimitOrder(root_, kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  ClearMarks(root_, <span class="keyword">false</span>);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  products_ = GenerateProducts(root_);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="comment">// Cleanup of temporary products.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  modules_.clear();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of generated products: &quot;</span> &lt;&lt; products_.size();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>) &lt;&lt; <span class="stringliteral">&quot;G&quot;</span> &lt;&lt; module_index_ &lt;&lt; <span class="stringliteral">&quot; analysis time: &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(gen_time);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#af92e04ed908364e0177ce444d7b72712">  114</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd::Zbdd</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>, <span class="keywordtype">bool</span> coherent, <span class="keywordtype">int</span> module_index) noexcept</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    : <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>(<span class="keyword">new</span> <a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;</a>(<span class="keyword">true</span>)),</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>(<span class="keyword">new</span> <a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;</a>(<span class="keyword">false</span>)),</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      kSettings_(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>),</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      root_(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>),</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      coherent_(coherent),</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      module_index_(module_index),</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      set_id_(2) {}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd::Zbdd</a>(<span class="keyword">const</span> <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Bdd::Function</a>&amp; module, <span class="keywordtype">bool</span> coherent, <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;           <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>, <span class="keywordtype">int</span> module_index) noexcept</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    : <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd</a>(settings, coherent, module_index) {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(init_time);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Creating ZBDD from BDD: G&quot;</span> &lt;&lt; module_index;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Limit on product order: &quot;</span> &lt;&lt; settings.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">PairTable&lt;VertexPtr&gt;</a> ites;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Minimize</a>(ConvertBdd(module.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>, module.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">complement</a>, bdd,</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                              kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>(), &amp;ites));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  assert(root_-&gt;terminal() || <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(root_)-&gt;minimal());</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ae819f5439416479971018ac134233091">Log</a>();</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Created ZBDD from BDD in &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(init_time);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  std::map&lt;int, std::pair&lt;bool, int&gt;&gt; sub_modules;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a516f0d2f35ad213399f83fb9ab102561">GatherModules</a>(root_, 0, &amp;sub_modules);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; entry : sub_modules) {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordtype">int</span> index = entry.first;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    assert(!modules_.count(index) &amp;&amp; <span class="stringliteral">&quot;Recalculating modules.&quot;</span>);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Bdd::Function</a> sub = bdd-&gt;<a class="code" href="classscram_1_1core_1_1Bdd.xhtml#a084e72279927831ec728a1542861dfec">modules</a>().find(std::abs(index))-&gt;second;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    assert(!sub.vertex-&gt;terminal() &amp;&amp; <span class="stringliteral">&quot;Unexpected BDD terminal vertex.&quot;</span>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordtype">int</span> limit = entry.second.second;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    assert(limit &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;Order cut-off is not strict.&quot;</span>);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordtype">bool</span> module_coherence = entry.second.first &amp;&amp; (index &gt; 0);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">if</span> (limit == 0 &amp;&amp; module_coherence) {  <span class="comment">// Unity is impossible.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a4ecbf60e6ac51e5260e8d8139c1b8599">JoinModule</a>(index, std::unique_ptr&lt;Zbdd&gt;(<span class="keyword">new</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd</a>(settings)));</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a> adjusted(settings);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    adjusted.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>(limit);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    sub.complement ^= index &lt; 0;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a4ecbf60e6ac51e5260e8d8139c1b8599">JoinModule</a>(index, std::unique_ptr&lt;Zbdd&gt;(<span class="keyword">new</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd</a>(sub, module_coherence, bdd,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                                     adjusted, index)));</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordflow">if</span> (ext::any_of(modules_, [](<span class="keyword">const</span> ModuleEntry&amp; member) {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">return</span> member.second-&gt;root_-&gt;terminal();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      })) {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Eliminating constant modules from ZBDD...&quot;</span>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    std::unordered_map&lt;int, VertexPtr&gt; results;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">EliminateConstantModules</a>(root_, &amp;results);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd::Zbdd</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings) noexcept</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    : <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd</a>(settings, gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">coherent</a>(), gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>()) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keywordflow">if</span> (gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aeaaa462ccbdef3cb95d70d966ce1740a">IsConstant</a>() || gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ad5a5766ce9dbbd2104c0bb07b9639a48">type</a>() == <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  assert(!settings.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#ae64f362fceb44402e101140dfc1725ba">prime_implicants</a>() &amp;&amp; <span class="stringliteral">&quot;Not implemented.&quot;</span>);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(init_time);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  assert(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">module</a>() &amp;&amp; <span class="stringliteral">&quot;The constructor is meant for module gates.&quot;</span>);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>) &lt;&lt; <span class="stringliteral">&quot;Converting module to ZBDD: G&quot;</span> &lt;&lt; gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Limit on product order: &quot;</span> &lt;&lt; settings.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  std::unordered_map&lt;int, std::pair&lt;VertexPtr, int&gt;&gt; <a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  std::unordered_map&lt;int, const Gate*&gt; module_gates;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  root_ = ConvertGraph(gate, &amp;gates, &amp;module_gates);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordflow">if</span> (!coherent_) {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Eliminating complements from ZBDD...&quot;</span>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    std::unordered_map&lt;int, VertexPtr&gt; results;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac3ac27090b550d973b20bd971c3de9f9">EliminateComplements</a>(root_, &amp;results);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Minimizing ZBDD...&quot;</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Minimize</a>(root_);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ae819f5439416479971018ac134233091">Log</a>();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>) &lt;&lt; <span class="stringliteral">&quot;Finished module conversion to ZBDD in &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(init_time);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  std::map&lt;int, std::pair&lt;bool, int&gt;&gt; sub_modules;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a516f0d2f35ad213399f83fb9ab102561">GatherModules</a>(root_, 0, &amp;sub_modules);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; entry : sub_modules) {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordtype">int</span> index = entry.first;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    assert(index &gt; 0 &amp;&amp; <span class="stringliteral">&quot;No complement gates.&quot;</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    assert(!modules_.count(index) &amp;&amp; <span class="stringliteral">&quot;Recalculating modules.&quot;</span>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">int</span> limit = entry.second.second;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    assert(limit &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;Order cut-off is not strict.&quot;</span>);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordtype">bool</span> coherent = entry.second.first;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">if</span> (limit == 0 &amp;&amp; coherent) {  <span class="comment">// Unity is impossible.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a4ecbf60e6ac51e5260e8d8139c1b8599">JoinModule</a>(index, std::unique_ptr&lt;Zbdd&gt;(<span class="keyword">new</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd</a>(settings)));</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>* module_gate = module_gates.find(index)-&gt;second;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a> adjusted(settings);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    adjusted.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>(limit);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a4ecbf60e6ac51e5260e8d8139c1b8599">JoinModule</a>(index, std::unique_ptr&lt;Zbdd&gt;(<span class="keyword">new</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd</a>(*module_gate, adjusted)));</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">EliminateConstantModules</a>();</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">#undef CHECK_ZBDD</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">  208</a></span>&#160;<a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">Zbdd::FindOrAddVertex</a>(<span class="keywordtype">int</span> index, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low, <span class="keywordtype">int</span> order,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                 <span class="keywordtype">bool</span> module, <span class="keywordtype">bool</span> coherent) noexcept {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  assert(high-&gt;id() != low-&gt;id() &amp;&amp; <span class="stringliteral">&quot;Reduction failure.&quot;</span>);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <a class="code" href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">SetNodeWeakPtr</a>&amp; in_table =</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      unique_table_.FindOrAdd(index, high-&gt;id(), low-&gt;id());</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="keywordflow">if</span> (!in_table.expired())</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">return</span> in_table.lock();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  assert(order &gt; 0 &amp;&amp; <span class="stringliteral">&quot;Improper order.&quot;</span>);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node(<span class="keyword">new</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml">SetNode</a>(index, order, set_id_++, high, low));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  node-&gt;module(module);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  node-&gt;coherent(coherent);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="keywordtype">int</span> high_order = high-&gt;terminal() ? 0 : <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(high)-&gt;max_set_order();</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  high_order += !MayBeUnity(node);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keywordtype">int</span> low_order = low-&gt;terminal() ? 0 : <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(low)-&gt;max_set_order();</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  node-&gt;max_set_order(std::max(high_order, low_order));</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  in_table = node;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <span class="keywordflow">return</span> node;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">Zbdd::FindOrAddVertex</a>(<span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; node, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  <span class="keywordflow">if</span> (node-&gt;high()-&gt;id() == high-&gt;id() &amp;&amp;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      node-&gt;low()-&gt;id() == low-&gt;id()) <span class="keywordflow">return</span> node;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">FindOrAddVertex</a>(node-&gt;index(), high, low, node-&gt;order(),</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                         node-&gt;module(), node-&gt;coherent());</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#ac90d12f0c653c679d22109124fa6344c">  238</a></span>&#160;<a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">Zbdd::FindOrAddVertex</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">FindOrAddVertex</a>(gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>(), high, low, gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">order</a>(), gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">module</a>(),</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                         gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">coherent</a>());</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::GetReducedVertex(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite, <span class="keywordtype">bool</span> complement,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keywordflow">if</span> (high-&gt;id() == low-&gt;id())</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordflow">return</span> low;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="keywordflow">if</span> (high-&gt;terminal() &amp;&amp; !<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#ab615ba4379a9ae2a882177a6d120ece9">Terminal&lt;SetNode&gt;::Ptr</a>(high)-&gt;value())</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">return</span> low;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  <span class="keywordflow">if</span> (low-&gt;terminal() &amp;&amp; <a class="code" href="classscram_1_1core_1_1Terminal.xhtml#ab615ba4379a9ae2a882177a6d120ece9">Terminal&lt;SetNode&gt;::Ptr</a>(low)-&gt;value())</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> low;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  assert(ite-&gt;index() &gt; 0 &amp;&amp; <span class="stringliteral">&quot;BDD indices are never negative.&quot;</span>);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac90d12f0c653c679d22109124fa6344c">FindOrAddVertex</a>(complement ? -ite-&gt;index() : ite-&gt;index(),</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                         high, low, ite-&gt;order(), ite-&gt;module(),</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                         ite-&gt;coherent());</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::GetReducedVertex(<span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; node,</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                       <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  <span class="keywordflow">if</span> (high-&gt;id() == low-&gt;id())</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">return</span> low;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="keywordflow">if</span> (high-&gt;terminal() &amp;&amp; !<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#ab615ba4379a9ae2a882177a6d120ece9">Terminal&lt;SetNode&gt;::Ptr</a>(high)-&gt;value())</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> low;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <span class="keywordflow">if</span> (low-&gt;terminal() &amp;&amp; <a class="code" href="classscram_1_1core_1_1Terminal.xhtml#ab615ba4379a9ae2a882177a6d120ece9">Terminal&lt;SetNode&gt;::Ptr</a>(low)-&gt;value())</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">return</span> low;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keywordflow">if</span> (node-&gt;high()-&gt;id() == high-&gt;id() &amp;&amp; node-&gt;low()-&gt;id() == low-&gt;id())</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">return</span> node;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">FindOrAddVertex</a>(node, high, low);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::ConvertBdd(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">Bdd::VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> complement,</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                 <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd_graph, <span class="keywordtype">int</span> limit_order,</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                 <a class="code" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">PairTable&lt;VertexPtr&gt;</a>* ites) noexcept {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> complement ? <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a> : <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; result =</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      (*ites)[{complement ? -vertex-&gt;id() : vertex-&gt;id(), limit_order}];</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  <span class="keywordflow">if</span> (result)</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keywordflow">if</span> (!coherent_ &amp;&amp; kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#ae64f362fceb44402e101140dfc1725ba">prime_implicants</a>()) {</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    result = ConvertBddPrimeImplicants(<a class="code" href="classscram_1_1core_1_1Ite.xhtml#a55a7d6955f67d68f01287950c7efc782">Ite::Ptr</a>(vertex), complement, bdd_graph,</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                       limit_order, ites);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    result =</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        ConvertBdd(<a class="code" href="classscram_1_1core_1_1Ite.xhtml#a55a7d6955f67d68f01287950c7efc782">Ite::Ptr</a>(vertex), complement, bdd_graph, limit_order, ites);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  }</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  assert(result-&gt;terminal() ||</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;         <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(result)-&gt;max_set_order() &lt;= limit_order);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::ConvertBdd(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite, <span class="keywordtype">bool</span> complement,</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                 <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd_graph, <span class="keywordtype">int</span> limit_order,</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                 <a class="code" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">PairTable&lt;VertexPtr&gt;</a>* ites) noexcept {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="keywordflow">if</span> (ite-&gt;module() &amp;&amp; !ite-&gt;coherent())</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">return</span> ConvertBddPrimeImplicants(ite, complement, bdd_graph, limit_order,</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                     ites);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> low = ConvertBdd(ite-&gt;low(), ite-&gt;complement_edge() ^ complement,</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                             bdd_graph, limit_order, ites);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="keywordflow">if</span> (limit_order == 0) {  <span class="comment">// Cut-off on the set order.</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">if</span> (low-&gt;terminal())</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;      <span class="keywordflow">return</span> low;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> high =</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;      ConvertBdd(ite-&gt;high(), complement, bdd_graph, --limit_order, ites);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  <span class="keywordflow">return</span> GetReducedVertex(ite, <span class="keyword">false</span>, high, low);</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;Zbdd::ConvertBddPrimeImplicants(<span class="keyword">const</span> <a class="code" href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">ItePtr</a>&amp; ite, <span class="keywordtype">bool</span> complement,</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                <a class="code" href="classscram_1_1core_1_1Bdd.xhtml">Bdd</a>* bdd_graph, <span class="keywordtype">int</span> limit_order,</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                <a class="code" href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">PairTable&lt;VertexPtr&gt;</a>* ites) noexcept {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">Bdd::Function</a> common = Bdd::Consensus::Calculate(bdd_graph, ite, complement);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> consensus = ConvertBdd(common.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">vertex</a>, common.<a class="code" href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">complement</a>, bdd_graph,</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                   limit_order, ites);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <span class="keywordflow">if</span> (limit_order == 0) {  <span class="comment">// Cut-off on the product order.</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordflow">if</span> (consensus-&gt;terminal())</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;      <span class="keywordflow">return</span> consensus;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordtype">int</span> sublimit = limit_order - 1;  <span class="comment">// Assumes non-Unity element.</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <span class="keywordflow">if</span> (ite-&gt;module() &amp;&amp; !kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#ae64f362fceb44402e101140dfc1725ba">prime_implicants</a>()) {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    assert(!ite-&gt;coherent() &amp;&amp; <span class="stringliteral">&quot;Only non-coherent modules through PI.&quot;</span>);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    sublimit += 1;  <span class="comment">// Unity modules may happen with minimal cut sets.</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  }</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> high =</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      ConvertBdd(ite-&gt;high(), complement, bdd_graph, sublimit, ites);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> low = ConvertBdd(ite-&gt;low(), ite-&gt;complement_edge() ^ complement,</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                             bdd_graph, sublimit, ites);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keywordflow">return</span> GetReducedVertex(ite, <span class="keyword">false</span>, high,</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                          GetReducedVertex(ite, <span class="keyword">true</span>, low, consensus));</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;}</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::ConvertGraph(</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate,</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    std::unordered_map&lt;<span class="keywordtype">int</span>, std::pair&lt;VertexPtr, int&gt;&gt;* <a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    std::unordered_map&lt;int, const Gate*&gt;* module_gates) noexcept {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  assert(!gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aeaaa462ccbdef3cb95d70d966ce1740a">IsConstant</a>() &amp;&amp; <span class="stringliteral">&quot;Unexpected constant gate!&quot;</span>);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> result;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">auto</span> it_entry = ext::find(*<a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>, gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>())) {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    std::pair&lt;VertexPtr, int&gt;&amp; entry = it_entry-&gt;second;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    result = entry.first;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    assert(entry.second &lt; gate.<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">parents</a>().<a class="code" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">size</a>());</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">if</span> (++entry.second == gate.<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">parents</a>().<a class="code" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">size</a>())</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;      <a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>-&gt;erase(it_entry);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  }</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  std::vector&lt;VertexPtr&gt; args;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Variable&gt;</a>&amp; arg : gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    args.push_back(</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">FindOrAddVertex</a>(arg.first, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>, arg.second-&gt;order()));</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    assert(arg.first &gt; 0 &amp;&amp; <span class="stringliteral">&quot;Complements must be pushed down to variables.&quot;</span>);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">if</span> (arg.second-&gt;module()) {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;      module_gates-&gt;emplace(arg.first, arg.second.get());</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;      args.push_back(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">FindOrAddVertex</a>(*arg.second, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>));</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;      args.push_back(ConvertGraph(*arg.second, <a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>, module_gates));</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    }</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  }</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  boost::sort(args, [](<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; rhs) {</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">if</span> (lhs-&gt;terminal())</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">if</span> (rhs-&gt;terminal())</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(lhs)-&gt;order() &gt; <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(rhs)-&gt;order();</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  });</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  <span class="keyword">auto</span> it = args.cbegin();</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <span class="keywordflow">for</span> (result = *it++; it != args.cend(); ++it) {</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    result = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a711aca319bb4d1586bf1ed92eccfaa97">Apply</a>(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#ad5a5766ce9dbbd2104c0bb07b9639a48">type</a>(), result, *it, kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7c1129acd9810b5b9ff4952f587ce490">ClearTables</a>();</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  assert(result);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  assert(result-&gt;terminal() ||</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;         <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(result)-&gt;max_set_order() &lt;= kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  <span class="keywordflow">if</span> (gate.<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">parents</a>().<a class="code" href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">size</a>() &gt; 1)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>-&gt;insert({gate.index(), {result, 1}});</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;}</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<a class="code" href="zbdd_8h.xhtml#a001ce06da985df4ab7c1e77a37d7b109">Triplet</a> Zbdd::GetResultKey(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_one, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_two,</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                           <span class="keywordtype">int</span> order) noexcept {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  assert(order &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;Illegal order for computations.&quot;</span>);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  assert(!arg_one-&gt;terminal() &amp;&amp; !arg_two-&gt;terminal());</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  assert(arg_one-&gt;id() &amp;&amp; arg_two-&gt;id());</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  assert(arg_one-&gt;id() != arg_two-&gt;id());</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  <span class="keywordtype">int</span> min_id = std::min(arg_one-&gt;id(), arg_two-&gt;id());</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  <span class="keywordtype">int</span> max_id = std::max(arg_one-&gt;id(), arg_two-&gt;id());</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <span class="keywordflow">return</span> {min_id, max_id, order};</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">/// Forward declarations of interdependent Apply operation specializations.</span></div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">/// @{</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::Apply&lt;kAnd&gt;(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_two,</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                  <span class="keywordtype">int</span> limit_order) noexcept;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::Apply&lt;kOr&gt;(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_two,</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                 <span class="keywordtype">int</span> limit_order) noexcept;<span class="comment"></span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">/// @}</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment">/// Specialization of Apply for AND operator for non-terminal ZBDD vertices.</span></div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a499a8bc4bc3854e7b2928c08515243cf">  410</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::Apply&lt;kAnd&gt;(<span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; arg_one,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; arg_two,</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                                  <span class="keywordtype">int</span> limit_order) noexcept {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> high;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> low;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  <span class="keywordtype">int</span> limit_high = limit_order - !MayBeUnity(arg_one);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;order() == arg_two-&gt;order() &amp;&amp;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;      arg_one-&gt;index() == arg_two-&gt;index()) {  <span class="comment">// The same variable.</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="comment">// (x*f1 + f0) * (x*g1 + g0) = x*(f1*(g1 + g0) + f0*g1) + f0*g0</span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    high = Apply&lt;kOr&gt;(</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        Apply&lt;kAnd&gt;(arg_one-&gt;high(),</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                    Apply&lt;kOr&gt;(arg_two-&gt;high(), arg_two-&gt;low(), limit_high),</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                    limit_high),</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        Apply&lt;kAnd&gt;(arg_one-&gt;low(), arg_two-&gt;high(), limit_high), limit_high);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    low = Apply&lt;kAnd&gt;(arg_one-&gt;low(), arg_two-&gt;low(), limit_order);</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    assert((arg_one-&gt;order() &lt; arg_two-&gt;order() ||</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            arg_one-&gt;index() &gt; arg_two-&gt;index()) &amp;&amp;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;           <span class="stringliteral">&quot;Ordering contract failed.&quot;</span>);</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">if</span> (arg_one-&gt;order() == arg_two-&gt;order()) {</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;      <span class="comment">// (x*f1 + f0) * (~x*g1 + g0) = x*f1*g0 + f0*(~x*g1 + g0)</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;      high = Apply&lt;kAnd&gt;(arg_one-&gt;high(), arg_two-&gt;low(), limit_high);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;      high = Apply&lt;kAnd&gt;(arg_one-&gt;high(), arg_two, limit_high);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    low = Apply&lt;kAnd&gt;(arg_one-&gt;low(), arg_two, limit_order);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  }</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  <span class="keywordflow">if</span> (!high-&gt;terminal() &amp;&amp; <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(high)-&gt;order() == arg_one-&gt;order()) {</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    assert(<a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(high)-&gt;index() &lt; arg_one-&gt;index());</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    high = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(high)-&gt;low();</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  }</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Minimize</a>(GetReducedVertex(arg_one, high, low));</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;}</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">/// Specialization of Apply for AND operator for any ZBDD vertices.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00446"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a363960002737004ea45f67758d9ac17d">  446</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::Apply&lt;kAnd&gt;(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_two,</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                                  <span class="keywordtype">int</span> limit_order) noexcept {</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  <span class="keywordflow">if</span> (limit_order &lt; 0)</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;terminal()) {</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;::Ptr</a>(arg_one)-&gt;<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>())</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;      <span class="keywordflow">return</span> Prune(arg_two, limit_order);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  }</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  <span class="keywordflow">if</span> (arg_two-&gt;terminal()) {</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;::Ptr</a>(arg_two)-&gt;<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>())</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;      <span class="keywordflow">return</span> Prune(arg_one, limit_order);</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  }</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;id() == arg_two-&gt;id())</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keywordflow">return</span> Prune(arg_one, limit_order);</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; result =</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;      and_table_[GetResultKey(arg_one, arg_two, limit_order)];</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  <span class="keywordflow">if</span> (result)</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keywordflow">return</span> result;  <span class="comment">// Already computed.</span></div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> set_one = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(arg_one);</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> set_two = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(arg_two);</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;  <span class="keywordflow">if</span> (set_one-&gt;order() &gt; set_two-&gt;order()) {</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    std::swap(set_one, set_two);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (set_one-&gt;order() == set_two-&gt;order() &amp;&amp;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;             set_one-&gt;index() &lt; set_two-&gt;index()) {</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    std::swap(set_one, set_two);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;  }</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  result = Apply&lt;kAnd&gt;(set_one, set_two, limit_order);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;  assert(result-&gt;terminal() ||</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;         <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(result)-&gt;max_set_order() &lt;= limit_order);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;}</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment">/// Specialization of Apply for OR operator for non-terminal ZBDD vertices.</span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00485"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a499a8bc4bc3854e7b2928c08515243cf">  485</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::Apply&lt;kOr&gt;(<span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; arg_one,</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; arg_two,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                 <span class="keywordtype">int</span> limit_order) noexcept {</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> high;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> low;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;  <span class="keywordtype">int</span> limit_high = limit_order - !MayBeUnity(arg_one);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;order() == arg_two-&gt;order() &amp;&amp;</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;      arg_one-&gt;index() == arg_two-&gt;index()) {  <span class="comment">// The same variable.</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    high = Apply&lt;kOr&gt;(arg_one-&gt;high(), arg_two-&gt;high(), limit_high);</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    low = Apply&lt;kOr&gt;(arg_one-&gt;low(), arg_two-&gt;low(), limit_order);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    assert((arg_one-&gt;order() &lt; arg_two-&gt;order() ||</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            arg_one-&gt;index() &gt; arg_two-&gt;index()) &amp;&amp;</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;           <span class="stringliteral">&quot;Ordering contract failed.&quot;</span>);</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">if</span> (arg_one-&gt;order() == arg_two-&gt;order()) {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;      <span class="keywordflow">if</span> (arg_one-&gt;high()-&gt;terminal() &amp;&amp; arg_two-&gt;high()-&gt;terminal())</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    }</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    high = Prune(arg_one-&gt;high(), limit_high);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    low = Apply&lt;kOr&gt;(arg_one-&gt;low(), arg_two, limit_order);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  }</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;  <span class="keywordflow">if</span> (!high-&gt;terminal() &amp;&amp; <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(high)-&gt;order() == arg_one-&gt;order()) {</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    assert(<a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(high)-&gt;index() &lt; arg_one-&gt;index());</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    high = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(high)-&gt;low();</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;  }</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Minimize</a>(GetReducedVertex(arg_one, high, low));</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;}</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">/// Specialization of Apply for OR operator for any ZBDD vertices.</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00515"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a363960002737004ea45f67758d9ac17d">  515</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::Apply&lt;kOr&gt;(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                                 <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_two,</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                                 <span class="keywordtype">int</span> limit_order) noexcept {</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;  <span class="keywordflow">if</span> (limit_order &lt; 0)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;terminal()) {</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;::Ptr</a>(arg_one)-&gt;<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>())</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">return</span> Prune(arg_two, limit_order);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  }</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  <span class="keywordflow">if</span> (arg_two-&gt;terminal()) {</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;::Ptr</a>(arg_two)-&gt;<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>())</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordflow">return</span> Prune(arg_one, limit_order);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;  }</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;  <span class="keywordflow">if</span> (arg_one-&gt;id() == arg_two-&gt;id())</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordflow">return</span> Prune(arg_one, limit_order);</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; result =</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;      or_table_[GetResultKey(arg_one, arg_two, limit_order)];</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;  <span class="keywordflow">if</span> (result)</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordflow">return</span> result;  <span class="comment">// Already computed.</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> set_one = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(arg_one);</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> set_two = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(arg_two);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;  <span class="keywordflow">if</span> (set_one-&gt;order() &gt; set_two-&gt;order()) {</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    std::swap(set_one, set_two);</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (set_one-&gt;order() == set_two-&gt;order() &amp;&amp;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;             set_one-&gt;index() &lt; set_two-&gt;index()) {</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    std::swap(set_one, set_two);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  }</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;  result = Apply&lt;kOr&gt;(set_one, set_two, limit_order);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;  assert(result-&gt;terminal() ||</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;         <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(result)-&gt;max_set_order() &lt;= limit_order);</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;}</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a4f2deb99cf4a08565f6c0177ec263961">  552</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a711aca319bb4d1586bf1ed92eccfaa97">Zbdd::Apply</a>(<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_one,</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; arg_two,</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                            <span class="keywordtype">int</span> limit_order) noexcept {</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;  <span class="keywordflow">if</span> (type == <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>)</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keywordflow">return</span> Apply&lt;kAnd&gt;(arg_one, arg_two, limit_order);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  assert(type == <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a> &amp;&amp; <span class="stringliteral">&quot;Only normalized operations in BDD.&quot;</span>);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;  <span class="keywordflow">return</span> Apply&lt;kOr&gt;(arg_one, arg_two, limit_order);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;}</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div><div class="line"><a name="l00561"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#ac3ac27090b550d973b20bd971c3de9f9">  561</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac3ac27090b550d973b20bd971c3de9f9">Zbdd::EliminateComplements</a>(</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex,</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    std::unordered_map&lt;int, VertexPtr&gt;* wide_results) noexcept {</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">return</span> vertex;</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; result = (*wide_results)[vertex-&gt;id()];</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  <span class="keywordflow">if</span> (result)</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;  result = EliminateComplement(</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;      node,</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;      <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac3ac27090b550d973b20bd971c3de9f9">EliminateComplements</a>(node-&gt;high(), wide_results),</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;      <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac3ac27090b550d973b20bd971c3de9f9">EliminateComplements</a>(node-&gt;low(), wide_results));</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::EliminateComplement(<span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; node,</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept {</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;  <span class="comment">// Cut-off does not matter with the OR operation with conforming inputs.</span></div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;  assert(high-&gt;terminal() ||</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;         <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(high)-&gt;terminal() &lt;= kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;  assert(low-&gt;terminal() ||</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;         <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(low)-&gt;terminal() &lt;= kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;  <span class="keywordflow">if</span> (node-&gt;index() &lt; 0 &amp;&amp; !(node-&gt;module() &amp;&amp; !node-&gt;coherent()))</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordflow">return</span> Apply&lt;kOr&gt;(high, low, kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Minimize</a>(GetReducedVertex(node, high, low));</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;}</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div><div class="line"><a name="l00590"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">  590</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">Zbdd::EliminateConstantModules</a>() noexcept {</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;  <span class="keywordflow">if</span> (ext::any_of(modules_, [](<span class="keyword">const</span> ModuleEntry&amp; module) {</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">return</span> module.second-&gt;root_-&gt;terminal();</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;      })) {</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Eliminating constant modules from ZBDD: G&quot;</span> &lt;&lt; module_index_;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    std::unordered_map&lt;int, VertexPtr&gt; results;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    root_ = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">EliminateConstantModules</a>(root_, &amp;results);</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;  }</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;}</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">Zbdd::EliminateConstantModules</a>(</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex,</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    std::unordered_map&lt;int, VertexPtr&gt;* results) noexcept {</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keywordflow">return</span> vertex;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; result = (*results)[vertex-&gt;id()];</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;  <span class="keywordflow">if</span> (result)</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;  result = EliminateConstantModule(</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;      node,</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;      <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">EliminateConstantModules</a>(node-&gt;high(), results),</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;      <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">EliminateConstantModules</a>(node-&gt;low(), results));</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;}</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::EliminateConstantModule(<span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; node,</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;  <span class="keywordflow">if</span> (node-&gt;module()) {</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>* module = modules_.find(node-&gt;index())-&gt;second.get();</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keywordflow">if</span> (module-&gt;root_-&gt;terminal()) {</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;      <span class="keywordflow">if</span> (!<a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;::Ptr</a>(module-&gt;root_)-&gt;<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>())</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        <span class="keywordflow">return</span> low;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;      <span class="keywordflow">return</span> Apply&lt;kOr&gt;(high, low, kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    }</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;  }</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Minimize</a>(GetReducedVertex(node, high, low));</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;}</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div><div class="line"><a name="l00630"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">  630</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Zbdd::Minimize</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex) noexcept {</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keywordflow">return</span> vertex;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;  <span class="keywordflow">if</span> (node-&gt;minimal())</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordflow">return</span> vertex;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; result = minimal_results_[vertex-&gt;id()];</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;  <span class="keywordflow">if</span> (result)</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> high = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Minimize</a>(node-&gt;high());</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> low = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">Minimize</a>(node-&gt;low());</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;  high = Subsume(high, low);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;  assert(high-&gt;id() != low-&gt;id() &amp;&amp; <span class="stringliteral">&quot;Subsume failed!&quot;</span>);</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  <span class="keywordflow">if</span> (high-&gt;terminal() &amp;&amp; !<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#ab615ba4379a9ae2a882177a6d120ece9">Terminal&lt;SetNode&gt;::Ptr</a>(high)-&gt;value()) {</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    result = low;  <span class="comment">// Reduction rule.</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;  }</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  result = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">FindOrAddVertex</a>(node, high, low);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;  <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(result)-&gt;minimal(<span class="keyword">true</span>);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;}</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::Subsume(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; high,</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; low) noexcept {</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;  <span class="keywordflow">if</span> (low-&gt;terminal())</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;::Ptr</a>(low)-&gt;<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>() ? <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a> : high;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;  <span class="keywordflow">if</span> (high-&gt;terminal())</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keywordflow">return</span> high;  <span class="comment">// No need to reduce terminal sets.</span></div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; computed = subsume_table_[{high-&gt;id(), low-&gt;id()}];</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;  <span class="keywordflow">if</span> (computed)</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keywordflow">return</span> computed;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> high_node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(high);</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> low_node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(low);</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;  <span class="keywordflow">if</span> (high_node-&gt;order() &gt; low_node-&gt;order() ||</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;      (high_node-&gt;order() == low_node-&gt;order() &amp;&amp;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;       high_node-&gt;index() &lt; low_node-&gt;index())) {</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    computed = Subsume(high, low_node-&gt;low());</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keywordflow">return</span> computed;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;  }</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> subhigh;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> sublow;</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;  <span class="keywordflow">if</span> (high_node-&gt;order() == low_node-&gt;order() &amp;&amp;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;      high_node-&gt;index() == low_node-&gt;index()) {</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    assert(high_node-&gt;index() == low_node-&gt;index());</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    subhigh = Subsume(high_node-&gt;high(), low_node-&gt;high());</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    subhigh = Subsume(subhigh, low_node-&gt;low());</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    sublow = Subsume(high_node-&gt;low(), low_node-&gt;low());</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    assert(high_node-&gt;order() &lt; low_node-&gt;order() ||</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;           (high_node-&gt;order() == low_node-&gt;order() &amp;&amp;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            high_node-&gt;index() &gt; low_node-&gt;index()));</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    subhigh = Subsume(high_node-&gt;high(), low);</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    sublow = Subsume(high_node-&gt;low(), low);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;  }</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;  <span class="keywordflow">if</span> (subhigh-&gt;terminal() &amp;&amp; !<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#ab615ba4379a9ae2a882177a6d120ece9">Terminal&lt;SetNode&gt;::Ptr</a>(subhigh)-&gt;value()) {</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    computed = sublow;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keywordflow">return</span> computed;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;  }</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;  assert(subhigh-&gt;id() != sublow-&gt;id());</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> new_high = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">FindOrAddVertex</a>(high_node, subhigh, sublow);</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;  new_high-&gt;minimal(high_node-&gt;minimal());</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;  computed = new_high;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;  <span class="keywordflow">return</span> computed;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;}</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> Zbdd::Prune(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">int</span> limit_order) noexcept {</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;  <span class="keywordflow">if</span> (limit_order &lt; 0)</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keywordflow">return</span> vertex;</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;  <span class="keywordflow">if</span> (node-&gt;max_set_order() &lt;= limit_order)</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keywordflow">return</span> node;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; result = prune_results_[{node-&gt;id(), limit_order}];</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;  <span class="keywordflow">if</span> (result)</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;  <span class="keywordtype">int</span> limit_high = limit_order - !MayBeUnity(node);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;  result = GetReducedVertex(node, Prune(node-&gt;high(), limit_high),</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                            Prune(node-&gt;low(), limit_order));</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;  <span class="keywordflow">if</span> (!result-&gt;terminal())</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(result)-&gt;minimal(node-&gt;minimal());</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;}</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="keywordtype">bool</span> Zbdd::MayBeUnity(<span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; node) noexcept {</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;  <span class="keywordflow">if</span> (kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#ae64f362fceb44402e101140dfc1725ba">prime_implicants</a>())</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;  <span class="comment">// Unity node tests for minimal cut sets.</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;  <span class="keywordflow">if</span> (node-&gt;index() &lt; 0)</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;  <span class="comment">// Unity complement vars.</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;  <span class="comment">// Non-modular gates can be implied by other gates in the product;</span></div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;  <span class="comment">// that is, (G1 &amp; G2 = I &amp; G2) if G2 implies G1.</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;  <span class="comment">//</span></div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;  <span class="comment">// Non-coherent gates contain complements to be approximated to Unity.</span></div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;  <span class="keywordflow">if</span> (this-&gt;IsGate(node))</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    <span class="keywordflow">return</span> !node-&gt;module() || !node-&gt;coherent();</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;  <span class="comment">// Positive non-gate variable.</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;}</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div><div class="line"><a name="l00733"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Zbdd.xhtml#a516f0d2f35ad213399f83fb9ab102561">  733</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a516f0d2f35ad213399f83fb9ab102561">Zbdd::GatherModules</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex,</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                        <span class="keywordtype">int</span> current_order,</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                        std::map&lt;<span class="keywordtype">int</span>, std::pair&lt;bool, int&gt;&gt;* <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>) noexcept {</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;  assert(current_order &gt;= 0);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;::Ptr</a>(vertex)-&gt;<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>() ? 0 : -1;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;  <span class="keywordtype">int</span> contribution = !MayBeUnity(node);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;  <span class="keywordtype">int</span> high_order = current_order + contribution;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;  <span class="keywordtype">int</span> min_high = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a516f0d2f35ad213399f83fb9ab102561">GatherModules</a>(node-&gt;high(), high_order, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;  assert(min_high &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;No terminal Empty should be on high branch.&quot;</span>);</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;  <span class="keywordflow">if</span> (node-&gt;module()) {</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="keywordtype">int</span> module_order = kSettings_.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>() - min_high - current_order;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    assert(module_order &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;Improper application of a cut-off.&quot;</span>);</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <span class="keywordflow">if</span> (<span class="keyword">auto</span> it = ext::find(*<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>, node-&gt;index())) {</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;      std::pair&lt;bool, int&gt;&amp; entry = it-&gt;second;</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;      assert(entry.first == node-&gt;coherent() &amp;&amp; <span class="stringliteral">&quot;Inconsistent flags.&quot;</span>);</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;      entry.second = std::max(entry.second, module_order);</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;      <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>-&gt;insert({node-&gt;index(), {node-&gt;coherent(), module_order}});</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    }</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;  }</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;  <span class="keywordtype">int</span> min_low = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a516f0d2f35ad213399f83fb9ab102561">GatherModules</a>(node-&gt;low(), current_order, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>);</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;  assert(min_low &gt;= -1);</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;  <span class="keywordflow">if</span> (min_low == -1)</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <span class="keywordflow">return</span> min_high + contribution;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;  <span class="keywordflow">return</span> std::min(min_high + contribution, min_low);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;}</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="keywordtype">void</span> Zbdd::EncodeLimitOrder(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">int</span> limit_order) noexcept {</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;  <span class="keywordflow">if</span> (node-&gt;count() &gt;= limit_order)</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;  node-&gt;count(limit_order);</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;  EncodeLimitOrder(node-&gt;high(), limit_order - 1);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;  EncodeLimitOrder(node-&gt;low(), limit_order);</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;}</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;std::vector&lt;std::vector&lt;int&gt;&gt;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;Zbdd::GenerateProducts(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex) noexcept {</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal()) {</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;::Ptr</a>(vertex)-&gt;<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>())</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;      <span class="keywordflow">return</span> {{}};  <span class="comment">// The Base set.</span></div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <span class="keywordflow">return</span> {};  <span class="comment">// Don&#39;t include 0/NULL sets.</span></div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;  }</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;  assert(node-&gt;minimal() &amp;&amp; <span class="stringliteral">&quot;Detected non-minimal ZBDD.&quot;</span>);</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;  <span class="keywordflow">if</span> (node-&gt;count() &lt;= 0)</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="keywordflow">return</span> {};  <span class="comment">// The result of a conservative count.</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;  <span class="keywordflow">if</span> (node-&gt;mark())</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="keywordflow">return</span> node-&gt;products();</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;  node-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;  std::vector&lt;Product&gt; low = GenerateProducts(node-&gt;low());</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;  std::vector&lt;Product&gt; high = GenerateProducts(node-&gt;high());</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;  std::vector&lt;Product&gt; result;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; product : low) {</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="keywordflow">if</span> (product.size() &lt;= node-&gt;count())</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;      result.emplace_back(std::move(product));</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;  }</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;  <span class="keywordflow">if</span> (node-&gt;module()) {</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>* module = modules_.find(node-&gt;index())-&gt;second.get();</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; product : high) {  <span class="comment">// Cross-product.</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; module_set : module-&gt;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac1d2e58b1ae5650093bdc2df72f511ce">products</a>()) {</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="keywordflow">if</span> (product.size() + module_set.size() &gt; node-&gt;count())</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;          <span class="keywordflow">continue</span>;  <span class="comment">// Cut-off on the product size.</span></div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        Product combo = product;</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        combo.insert(combo.end(), module_set.begin(), module_set.end());</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        result.emplace_back(std::move(combo));</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;      }</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    }</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; product : high) {</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;      <span class="keywordflow">if</span> (product.size() &lt; node-&gt;count()) {</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        product.push_back(node-&gt;index());</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        result.emplace_back(std::move(product));</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;      }</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    }</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;  }</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;  <span class="comment">// Destroy the subgraph to remove extra reference counts.</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;  node-&gt;CutBranches();</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;  <span class="keywordflow">if</span> (node-&gt;use_count() &gt; 2)</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    node-&gt;products(result);</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;}</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="keywordtype">int</span> Zbdd::CountSetNodes(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex) noexcept {</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;  <span class="keywordflow">if</span> (node-&gt;mark())</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;  node-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;  <span class="keywordflow">return</span> 1 + CountSetNodes(node-&gt;high()) + CountSetNodes(node-&gt;low());</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;}</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;std::int64_t Zbdd::CountProducts(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex,</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                                 <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>) noexcept {</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal()) {</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1core_1_1Terminal.xhtml">Terminal&lt;SetNode&gt;::Ptr</a>(vertex)-&gt;<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">value</a>())</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;      <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;  }</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;  <span class="keywordflow">if</span> (node-&gt;mark())</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keywordflow">return</span> node-&gt;count();</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;  node-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;  std::int64_t multiplier = 1;  <span class="comment">// Multiplier of the module.</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;  <span class="keywordflow">if</span> (modules &amp;&amp; node-&gt;module()) {</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>* module = modules_.find(node-&gt;index())-&gt;second.get();</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    multiplier = module-&gt;CountProducts(module-&gt;root_, <span class="keyword">true</span>);</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;  }</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;  node-&gt;count(multiplier * CountProducts(node-&gt;high(), <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>) +</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;              CountProducts(node-&gt;low(), <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>));</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;  <span class="keywordflow">return</span> node-&gt;count();</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;}</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="keywordtype">void</span> Zbdd::ClearMarks(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> modules) noexcept {</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;  <span class="keywordflow">if</span> (!node-&gt;mark())</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;  node-&gt;mark(<span class="keyword">false</span>);</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;  <span class="keywordflow">if</span> (modules &amp;&amp; node-&gt;module()) {</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>* module = modules_.find(node-&gt;index())-&gt;second.get();</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    module-&gt;ClearMarks(module-&gt;root_, <span class="keyword">true</span>);</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;  }</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;  ClearMarks(node-&gt;high(), <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>);</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;  ClearMarks(node-&gt;low(), <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>);</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;}</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="keywordtype">void</span> Zbdd::ClearCounts(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> modules) noexcept {</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;  <span class="keywordflow">if</span> (node-&gt;mark())</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;  node-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;  node-&gt;count(0);</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;  <span class="keywordflow">if</span> (modules &amp;&amp; node-&gt;module()) {</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>* module = modules_.find(node-&gt;index())-&gt;second.get();</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    module-&gt;ClearCounts(module-&gt;root_, <span class="keyword">true</span>);</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;  }</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;  ClearCounts(node-&gt;high(), <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>);</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;  ClearCounts(node-&gt;low(), <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>);</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;}</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="keywordtype">void</span> Zbdd::TestStructure(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex, <span class="keywordtype">bool</span> modules) noexcept {</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;  <span class="keywordflow">if</span> (vertex-&gt;terminal())</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex);</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;  <span class="keywordflow">if</span> (node-&gt;mark())</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;  node-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;  assert(node-&gt;index() &amp;&amp; <span class="stringliteral">&quot;Illegal index for a node.&quot;</span>);</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;  assert(node-&gt;order() &amp;&amp; <span class="stringliteral">&quot;Improper order for nodes.&quot;</span>);</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;  assert(node-&gt;high() &amp;&amp; node-&gt;low() &amp;&amp; <span class="stringliteral">&quot;Malformed node high/low pointers.&quot;</span>);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;  assert(!(node-&gt;high()-&gt;terminal() &amp;&amp;</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;           !<a class="code" href="classscram_1_1core_1_1Terminal.xhtml#ab615ba4379a9ae2a882177a6d120ece9">Terminal&lt;SetNode&gt;::Ptr</a>(node-&gt;high())-&gt;value()) &amp;&amp;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;         <span class="stringliteral">&quot;Reduction rule failure.&quot;</span>);</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;  assert((node-&gt;high()-&gt;id() != node-&gt;low()-&gt;id()) &amp;&amp; <span class="stringliteral">&quot;Minimization failure.&quot;</span>);</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;  assert(!(!node-&gt;high()-&gt;terminal() &amp;&amp;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;           node-&gt;order() &gt;= <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(node-&gt;high())-&gt;order()) &amp;&amp;</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;         <span class="stringliteral">&quot;Ordering of nodes failed.&quot;</span>);</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;  assert(!(!node-&gt;low()-&gt;terminal() &amp;&amp;</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;           node-&gt;order() &gt; <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(node-&gt;low())-&gt;order()) &amp;&amp;</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;         <span class="stringliteral">&quot;Ordering of nodes failed.&quot;</span>);</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;  assert(!(!node-&gt;low()-&gt;terminal() &amp;&amp;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;           node-&gt;order() == <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(node-&gt;low())-&gt;order() &amp;&amp;</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;           node-&gt;index() &lt;= <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(node-&gt;low())-&gt;index()) &amp;&amp;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;         <span class="stringliteral">&quot;Ordering of complements failed.&quot;</span>);</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;  assert(!(!node-&gt;high()-&gt;terminal() &amp;&amp; node-&gt;minimal() &amp;&amp;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;           !<a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(node-&gt;high())-&gt;minimal()) &amp;&amp;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;         <span class="stringliteral">&quot;Non-minimal branches in minimal ZBDD.&quot;</span>);</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;  assert(!(!node-&gt;low()-&gt;terminal() &amp;&amp; node-&gt;minimal() &amp;&amp;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;           !<a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(node-&gt;low())-&gt;minimal()) &amp;&amp;</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;         <span class="stringliteral">&quot;Non-minimal branches in minimal ZBDD.&quot;</span>);</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;  <span class="keywordflow">if</span> (modules &amp;&amp; node-&gt;module()) {</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml">Zbdd</a>* module = modules_.find(node-&gt;index())-&gt;second.get();</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    assert(!module-&gt;root_-&gt;terminal() &amp;&amp; <span class="stringliteral">&quot;Terminal modules must be removed.&quot;</span>);</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    module-&gt;TestStructure(module-&gt;root_, <span class="keyword">true</span>);</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;  }</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;  TestStructure(node-&gt;high(), <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>);</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;  TestStructure(node-&gt;low(), <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">modules</a>);</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;}</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="keyword">namespace </span>zbdd {</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div><div class="line"><a name="l00926"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a3f14bbccf0c5edd4b41dfb75c04d0b45">  926</a></span>&#160;CutSetContainer::CutSetContainer(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>, <span class="keywordtype">int</span> module_index,</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                                 <span class="keywordtype">int</span> gate_index_bound) noexcept</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    : <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">Zbdd</a>(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>, <span class="comment">/*coherence=*/</span><span class="keyword">false</span>, module_index),</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;      gate_index_bound_(gate_index_bound) {}</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;</div><div class="line"><a name="l00931"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a15ccbd5b839be87c831a743f0100588e">  931</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> CutSetContainer::ConvertGate(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate) noexcept {</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;  assert(gate.type() == <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a> || gate.type() == <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>);</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;  assert(gate.args&lt;<a class="code" href="classscram_1_1core_1_1Constant.xhtml">Constant</a>&gt;().empty());</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;  assert(gate.args().size() &gt; 1);</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;  std::vector&lt;SetNodePtr&gt; args;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Variable&gt;</a>&amp; arg : gate.args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    args.push_back(</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">FindOrAddVertex</a>(arg.first, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>, arg.second-&gt;order()));</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;  }</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : gate.args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    assert(arg.first &gt; 0 &amp;&amp; <span class="stringliteral">&quot;Complements must be pushed down to variables.&quot;</span>);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    args.push_back(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">FindOrAddVertex</a>(*arg.second, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">kBase_</a>, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">kEmpty_</a>));</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;  }</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;  boost::sort(args, [](<span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a>&amp; rhs) {</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="keywordflow">return</span> lhs-&gt;order() &gt; rhs-&gt;order();</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;  });</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;  <span class="keyword">auto</span> it = args.cbegin();</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a> result = *it;</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;  <span class="keywordflow">for</span> (++it; it != args.cend(); ++it) {</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    result = <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a711aca319bb4d1586bf1ed92eccfaa97">Apply</a>(gate.type(), result, *it, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>().<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;  }</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7c1129acd9810b5b9ff4952f587ce490">ClearTables</a>();</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;  <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;}</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div><div class="line"><a name="l00956"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#aa0848a768a2bcf4b22618e676a8bbaeb">  956</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a> CutSetContainer::ExtractIntermediateCutSets(</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    <span class="keywordtype">int</span> index) noexcept {</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;  assert(index &amp;&amp; index &gt; gate_index_bound_);</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;  assert(!<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">root</a>()-&gt;terminal() &amp;&amp;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;         <span class="stringliteral">&quot;Impossible to have intermediate cut sets.&quot;</span>);</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;  assert(index == <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">root</a>())-&gt;index() &amp;&amp; <span class="stringliteral">&quot;Broken ordering!&quot;</span>);</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;  assert(<a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">root</a>())-&gt;max_set_order() &lt;= <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>().limit_order());</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Extracting cut sets for G&quot;</span> &lt;&lt; index;</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;  <a class="code" href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">SetNodePtr</a> node = <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">root</a>());</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">root</a>(node-&gt;low());</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;  <span class="keywordflow">return</span> node-&gt;high();</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;}</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">Zbdd::VertexPtr</a></div><div class="line"><a name="l00970"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a59985023f1eba639571610ad9a0b2a41">  970</a></span>&#160;CutSetContainer::ExpandGate(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; gate_zbdd,</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                            <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; cut_sets) noexcept {</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;  assert(gate_zbdd-&gt;terminal() ||</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;         <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(gate_zbdd)-&gt;max_set_order() &lt;= <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>().<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;  assert(cut_sets-&gt;terminal() ||</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;         <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(cut_sets)-&gt;max_set_order() &lt;= <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>().<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;  <span class="keywordflow">return</span> Apply&lt;kAnd&gt;(gate_zbdd, cut_sets, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>().<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;}</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div><div class="line"><a name="l00979"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1zbdd_1_1CutSetContainer.xhtml#a87489caef0ebb8e4b62c600455da84a2">  979</a></span>&#160;<span class="keywordtype">void</span> CutSetContainer::Merge(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">VertexPtr</a>&amp; vertex) noexcept {</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;  assert(vertex-&gt;terminal() ||</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;         <a class="code" href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">SetNode::Ptr</a>(vertex)-&gt;max_set_order() &lt;= <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>().<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>());</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">root</a>(Apply&lt;kOr&gt;(<a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">root</a>(), vertex, <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">settings</a>().limit_order()));</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;  <a class="code" href="classscram_1_1core_1_1Zbdd.xhtml#a7c1129acd9810b5b9ff4952f587ce490">ClearTables</a>();</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;}</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;}  <span class="comment">// namespace zbdd</span></div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;}  <span class="comment">// namespace core</span></div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_a084e72279927831ec728a1542861dfec"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#a084e72279927831ec728a1542861dfec">scram::core::Bdd::modules</a></div><div class="ttdeci">const std::unordered_map&lt; int, Function &gt; &amp; modules() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00759">bdd.h:759</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a7c1129acd9810b5b9ff4952f587ce490"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a7c1129acd9810b5b9ff4952f587ce490">scram::core::Zbdd::ClearTables</a></div><div class="ttdeci">void ClearTables() noexcept</div><div class="ttdoc">Clears all memoization tables. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00352">zbdd.h:352</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a73cd06a4022ce5cd60f9f667fec8d51f"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a73cd06a4022ce5cd60f9f667fec8d51f">scram::core::Zbdd::VertexPtr</a></div><div class="ttdeci">IntrusivePtr&lt; Vertex&lt; SetNode &gt;&gt; VertexPtr</div><div class="ttdoc">ZBDD vertex base. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00155">zbdd.h:155</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_aeb83fd37f2aee74ac41e6ccadba82d39"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#aeb83fd37f2aee74ac41e6ccadba82d39">scram::core::Zbdd::EliminateConstantModules</a></div><div class="ttdeci">void EliminateConstantModules() noexcept</div><div class="ttdoc">Removes constant modules from products. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00590">zbdd.cc:590</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_aeaaa462ccbdef3cb95d70d966ce1740a"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#aeaaa462ccbdef3cb95d70d966ce1740a">scram::core::Gate::IsConstant</a></div><div class="ttdeci">bool IsConstant() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00380">boolean_graph.h:380</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Ite_xhtml_a55a7d6955f67d68f01287950c7efc782"><div class="ttname"><a href="classscram_1_1core_1_1Ite.xhtml#a55a7d6955f67d68f01287950c7efc782">scram::core::Ite::Ptr</a></div><div class="ttdeci">static IntrusivePtr&lt; Ite &gt; Ptr(const IntrusivePtr&lt; Vertex&lt; Ite &gt;&gt; &amp;vertex)</div><div class="ttdoc">Recovers a shared pointer to Ite from a pointer to Vertex. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00369">bdd.h:369</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml">scram::core::Zbdd</a></div><div class="ttdoc">Zero-Suppressed Binary Decision Diagrams for set manipulations. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00153">zbdd.h:153</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ac38351bd34c3272ac04f9ba8fa1428ec"><div class="ttname"><a href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">scram::core::GatePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Shared gates in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00060">boolean_graph.h:60</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a66b1888c00815cc350464f0cffc0abed"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a66b1888c00815cc350464f0cffc0abed">scram::core::Zbdd::kBase_</a></div><div class="ttdeci">const TerminalPtr kBase_</div><div class="ttdoc">Terminal Base (Unity/1) set. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00387">zbdd.h:387</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml">scram::core::Bdd</a></div><div class="ttdoc">Analysis of Boolean graphs with Binary Decision Diagrams. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00700">bdd.h:700</a></div></div>
<div class="ttc" id="zbdd_8h_xhtml_a9b539b6c85bb597cb634bb3f78c6ba72"><div class="ttname"><a href="zbdd_8h.xhtml#a9b539b6c85bb597cb634bb3f78c6ba72">scram::core::PairTable</a></div><div class="ttdeci">std::unordered_map&lt; std::pair&lt; int, int &gt;, Value, PairHash &gt; PairTable</div><div class="ttdoc">Hash table with pairs of numbers as keys. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00130">zbdd.h:130</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a3dbb8ef5da2882daf6c39e9724eae459"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a3dbb8ef5da2882daf6c39e9724eae459">scram::core::Zbdd::Minimize</a></div><div class="ttdeci">VertexPtr Minimize(const VertexPtr &amp;vertex) noexcept</div><div class="ttdoc">Removes subsets in ZBDD. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00630">zbdd.cc:630</a></div></div>
<div class="ttc" id="version_8h_xhtml_a08935e0d1ae92ad3bf839e9757fbb53c"><div class="ttname"><a href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">scram::version::core</a></div><div class="ttdeci">const char * core()</div></div>
<div class="ttc" id="zbdd_8h_xhtml"><div class="ttname"><a href="zbdd_8h.xhtml">zbdd.h</a></div><div class="ttdoc">Zero-Suppressed Binary Decision Diagram facilities. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ae819f5439416479971018ac134233091"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ae819f5439416479971018ac134233091">scram::core::Zbdd::Log</a></div><div class="ttdeci">void Log() noexcept</div><div class="ttdoc">Logs properties of the Zbdd. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00045">zbdd.cc:45</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Constant_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Constant.xhtml">scram::core::Constant</a></div><div class="ttdoc">Representation of a node that is a Boolean constant with True or False state. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00223">boolean_graph.h:223</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml">scram::core::Gate</a></div><div class="ttdoc">An indexed gate for use in BooleanGraph. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00302">boolean_graph.h:302</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NodeParentManager_xhtml_a6fca1af860a85acc2907699d1d1be716"><div class="ttname"><a href="classscram_1_1core_1_1NodeParentManager.xhtml#a6fca1af860a85acc2907699d1d1be716">scram::core::NodeParentManager::parents</a></div><div class="ttdeci">const ParentMap &amp; parents() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00075">boolean_graph.h:75</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a4ecbf60e6ac51e5260e8d8139c1b8599"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a4ecbf60e6ac51e5260e8d8139c1b8599">scram::core::Zbdd::JoinModule</a></div><div class="ttdeci">void JoinModule(int index, std::unique_ptr&lt; Zbdd &gt; container) noexcept</div><div class="ttdoc">Joins a ZBDD representing a module gate. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00377">zbdd.h:377</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_aa599878612e128fa09e17d0520280dbe"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#aa599878612e128fa09e17d0520280dbe">scram::core::Zbdd::root</a></div><div class="ttdeci">const VertexPtr &amp; root() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00207">zbdd.h:207</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Terminal_xhtml_a7a25b0b40498f4876571a5dac4e724c3"><div class="ttname"><a href="classscram_1_1core_1_1Terminal.xhtml#a7a25b0b40498f4876571a5dac4e724c3">scram::core::Terminal::value</a></div><div class="ttdeci">bool value() const </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00203">bdd.h:203</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">scram::core::Operator</a></div><div class="ttdeci">Operator</div><div class="ttdoc">Boolean operators of gates for representation, preprocessing, and analysis purposes. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00272">boolean_graph.h:272</a></div></div>
<div class="ttc" id="logger_8h_xhtml_afbc1fb2843a8415445a0528c5212eeb9"><div class="ttname"><a href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a></div><div class="ttdeci">#define DUR(var)</div><div class="ttdoc">Calculates the time duration since the start of the clock in seconds. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00052">logger.h:52</a></div></div>
<div class="ttc" id="ext_8h_xhtml"><div class="ttname"><a href="ext_8h.xhtml">ext.h</a></div><div class="ttdoc">Helpful facilities as an extension to the standard library or Boost. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Terminal_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Terminal.xhtml">scram::core::Terminal</a></div><div class="ttdoc">Representation of terminal vertices in BDD graphs. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00109">bdd.h:109</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml">scram::core::Bdd::Function</a></div><div class="ttdoc">Holder of computation resultant functions and gate representations. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00706">bdd.h:706</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a9f420fb29f38ac48bde786a55de3d87c"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">scram::core::Gate::Arg</a></div><div class="ttdeci">std::pair&lt; int, std::shared_ptr&lt; T &gt;&gt; Arg</div><div class="ttdoc">An argument entry type in the gate&amp;#39;s argument containers. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00311">boolean_graph.h:311</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a77945d28bd832d2735969d0b0a451c78"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a77945d28bd832d2735969d0b0a451c78">scram::core::Zbdd::Analyze</a></div><div class="ttdeci">void Analyze() noexcept</div><div class="ttdoc">Runs the analysis with the representation of a Boolean graph as ZBDD. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00089">zbdd.cc:89</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ac1d2e58b1ae5650093bdc2df72f511ce"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ac1d2e58b1ae5650093bdc2df72f511ce">scram::core::Zbdd::products</a></div><div class="ttdeci">const std::vector&lt; std::vector&lt; int &gt; &gt; &amp; products() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00195">zbdd.h:195</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1SetNode_xhtml_adfcfad8dde1eb94ed51d8075a5ad6344"><div class="ttname"><a href="classscram_1_1core_1_1SetNode.xhtml#adfcfad8dde1eb94ed51d8075a5ad6344">scram::core::SetNode::Ptr</a></div><div class="ttdeci">static IntrusivePtr&lt; SetNode &gt; Ptr(const IntrusivePtr&lt; Vertex&lt; SetNode &gt;&gt; &amp;vertex)</div><div class="ttdoc">&lt; For destructive extraction of products. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00100">zbdd.h:100</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_aa793eeaa12244c5b39a0d80e5b1518ae"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">scram::core::Gate::args</a></div><div class="ttdeci">const ArgSet &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00383">boolean_graph.h:383</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ac474673e432b2ea0908b230886f7f6a2"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ac474673e432b2ea0908b230886f7f6a2">scram::core::Zbdd::kEmpty_</a></div><div class="ttdeci">const TerminalPtr kEmpty_</div><div class="ttdoc">Terminal Empty (Null/0) set. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00388">zbdd.h:388</a></div></div>
<div class="ttc" id="logger_8h_xhtml"><div class="ttname"><a href="logger_8h.xhtml">logger.h</a></div><div class="ttdoc">Logging capability for various purposes, such as warnings and debugging. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a516f0d2f35ad213399f83fb9ab102561"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a516f0d2f35ad213399f83fb9ab102561">scram::core::Zbdd::GatherModules</a></div><div class="ttdeci">int GatherModules(const VertexPtr &amp;vertex, int current_order, std::map&lt; int, std::pair&lt; bool, int &gt;&gt; *modules) noexcept</div><div class="ttdoc">Traverses ZBDD to find modules and adjusted cut-offs. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00733">zbdd.cc:733</a></div></div>
<div class="ttc" id="zbdd_8h_xhtml_a001ce06da985df4ab7c1e77a37d7b109"><div class="ttname"><a href="zbdd_8h.xhtml#a001ce06da985df4ab7c1e77a37d7b109">scram::core::Triplet</a></div><div class="ttdeci">std::array&lt; int, 3 &gt; Triplet</div><div class="ttdoc">Triplet of numbers for functions. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00132">zbdd.h:132</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1SetNode_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1SetNode.xhtml">scram::core::SetNode</a></div><div class="ttdoc">Representation of non-terminal nodes in ZBDD. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00044">zbdd.h:44</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ac3ac27090b550d973b20bd971c3de9f9"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ac3ac27090b550d973b20bd971c3de9f9">scram::core::Zbdd::EliminateComplements</a></div><div class="ttdeci">VertexPtr EliminateComplements(const VertexPtr &amp;vertex, std::unordered_map&lt; int, VertexPtr &gt; *wide_results) noexcept</div><div class="ttdoc">Removes complements of variables from products. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00561">zbdd.cc:561</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_af9f012da1bb6b0835b56dfd98f5dde64"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#af9f012da1bb6b0835b56dfd98f5dde64">scram::core::Zbdd::ReleaseTables</a></div><div class="ttdeci">void ReleaseTables() noexcept</div><div class="ttdoc">Releases all possible memory from memoization and unique tables. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00361">zbdd.h:361</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_aed1eaa96df30e6eaa32e9e51427c9743"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#aed1eaa96df30e6eaa32e9e51427c9743">scram::core::Zbdd::modules</a></div><div class="ttdeci">const std::map&lt; int, std::unique_ptr&lt; Zbdd &gt; &gt; &amp; modules() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00218">zbdd.h:218</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">scram::DEBUG5</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG4. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00076">logger.h:76</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">scram::core::kNull</a></div><div class="ttdoc">Special pass-through or NULL gate. This is not NULL set. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00280">boolean_graph.h:280</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Bdd_xhtml_abac07f2126ed657d744a92e4f88415fd"><div class="ttname"><a href="classscram_1_1core_1_1Bdd.xhtml#abac07f2126ed657d744a92e4f88415fd">scram::core::Bdd::VertexPtr</a></div><div class="ttdeci">IntrusivePtr&lt; Vertex&lt; Ite &gt;&gt; VertexPtr</div><div class="ttdoc">BDD vertex base. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00702">bdd.h:702</a></div></div>
<div class="ttc" id="bdd_8h_xhtml_a2b39509bba3a81b0dc11f6e3acc98e25"><div class="ttname"><a href="bdd_8h.xhtml#a2b39509bba3a81b0dc11f6e3acc98e25">scram::core::ItePtr</a></div><div class="ttdeci">IntrusivePtr&lt; Ite &gt; ItePtr</div><div class="ttdoc">Shared if-then-else vertices. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00379">bdd.h:379</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml_a2b5daa48590ae16124dfd66271439c5e"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#a2b5daa48590ae16124dfd66271439c5e">scram::core::Bdd::Function::vertex</a></div><div class="ttdeci">VertexPtr vertex</div><div class="ttdoc">The root vertex of the BDD function graph. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00708">bdd.h:708</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_adb8cb22814af1f414bb264655e3bfe79"><div class="ttname"><a href="boolean__graph_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a></div><div class="ttdeci">std::string begin</div><div class="ttdoc">Beginning of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00845">boolean_graph.cc:845</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">scram::core::kAnd</a></div><div class="ttdoc">Simple AND gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00273">boolean_graph.h:273</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ad5a5766ce9dbbd2104c0bb07b9639a48"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ad5a5766ce9dbbd2104c0bb07b9639a48">scram::core::Gate::type</a></div><div class="ttdeci">Operator type() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00349">boolean_graph.h:349</a></div></div>
<div class="ttc" id="zbdd_8cc_xhtml_a99fa6e0c04a9aa2b3bceac30ae9d7643"><div class="ttname"><a href="zbdd_8cc.xhtml#a99fa6e0c04a9aa2b3bceac30ae9d7643">CHECK_ZBDD</a></div><div class="ttdeci">#define CHECK_ZBDD(full)</div><div class="ttdoc">Runs assertions on ZBDD structure. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00037">zbdd.cc:37</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ac030b66fb750e5de6987fe8c5201b008aec44cbf0ef06b0fda33dc3b276edd6a2"><div class="ttname"><a href="boolean__graph_8h.xhtml#ac030b66fb750e5de6987fe8c5201b008aec44cbf0ef06b0fda33dc3b276edd6a2">scram::core::kNullState</a></div><div class="ttdoc">The set is null. This indicates no failure. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00292">boolean_graph.h:292</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ac90d12f0c653c679d22109124fa6344c"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ac90d12f0c653c679d22109124fa6344c">scram::core::Zbdd::FindOrAddVertex</a></div><div class="ttdeci">SetNodePtr FindOrAddVertex(const Gate &amp;gate, const VertexPtr &amp;high, const VertexPtr &amp;low) noexcept</div><div class="ttdoc">Find or adds a ZBDD SetNode vertex using information from gates. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00238">zbdd.cc:238</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">scram::DEBUG3</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG2. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00074">logger.h:74</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a0e43ec0f017d23a4fa4e376c4060d380"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">scram::core::Settings::limit_order</a></div><div class="ttdeci">int limit_order() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00075">settings.h:75</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aba7b09d6e8fbe414c23705ad24dde6ff"><div class="ttname"><a href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a></div><div class="ttdeci">#define LOG(level)</div><div class="ttdoc">Logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00055">logger.h:55</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_ab71281cd644eb442dd2d3ee1c5df56c4"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#ab71281cd644eb442dd2d3ee1c5df56c4">scram::core::Zbdd::settings</a></div><div class="ttdeci">const Settings &amp; settings() const </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00215">zbdd.h:215</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_ae64f362fceb44402e101140dfc1725ba"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#ae64f362fceb44402e101140dfc1725ba">scram::core::Settings::prime_implicants</a></div><div class="ttdeci">bool prime_implicants() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00059">settings.h:59</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a42af18229ba2e80201bc0fdac07b7091"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a42af18229ba2e80201bc0fdac07b7091">scram::core::Zbdd::FindOrAddVertex</a></div><div class="ttdeci">SetNodePtr FindOrAddVertex(int index, const VertexPtr &amp;high, const VertexPtr &amp;low, int order, bool module=false, bool coherent=false) noexcept</div><div class="ttdoc">Finds or adds a unique SetNode in the ZBDD. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00208">zbdd.cc:208</a></div></div>
<div class="ttc" id="zbdd_8h_xhtml_a8a62276408638914927627187b3ced57"><div class="ttname"><a href="zbdd_8h.xhtml#a8a62276408638914927627187b3ced57">scram::core::SetNodePtr</a></div><div class="ttdeci">IntrusivePtr&lt; SetNode &gt; SetNodePtr</div><div class="ttdoc">Shared ZBDD set nodes. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8h_source.xhtml#l00112">zbdd.h:112</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">scram::DEBUG4</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG3. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00075">logger.h:75</a></div></div>
<div class="ttc" id="structscram_1_1core_1_1Bdd_1_1Function_xhtml_aa0c4dba36b68a6a2ae496573346b887c"><div class="ttname"><a href="structscram_1_1core_1_1Bdd_1_1Function.xhtml#aa0c4dba36b68a6a2ae496573346b887c">scram::core::Bdd::Function::complement</a></div><div class="ttdeci">bool complement</div><div class="ttdoc">The interpretation of the function. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00707">bdd.h:707</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1WeakIntrusivePtr_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1WeakIntrusivePtr.xhtml">scram::core::WeakIntrusivePtr&lt; SetNode &gt;</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_a7880117e5dd7fc82f420e32606266bbd"><div class="ttname"><a href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; gates</div><div class="ttdoc">Collection of gates. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00773">boolean_graph.cc:773</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">scram::DEBUG2</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG1. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00073">logger.h:73</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00037">settings.h:37</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a711aca319bb4d1586bf1ed92eccfaa97"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a711aca319bb4d1586bf1ed92eccfaa97">scram::core::Zbdd::Apply</a></div><div class="ttdeci">VertexPtr Apply(const VertexPtr &amp;arg_one, const VertexPtr &amp;arg_two, int limit_order) noexcept</div><div class="ttdoc">Applies Boolean operation to two vertices representing sets. </div></div>
<div class="ttc" id="logger_8h_xhtml_a8501f67861832d9efa717e17010648f5"><div class="ttname"><a href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a></div><div class="ttdeci">#define CLOCK(var)</div><div class="ttdoc">Starts the timing in nanoseconds. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00047">logger.h:47</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">scram::core::kOr</a></div><div class="ttdoc">Simple OR gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00274">boolean_graph.h:274</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_a028cc62c4e510cb3063384dd75a36ed5"><div class="ttname"><a href="boolean__graph_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">scram::core::VariablePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Variable &gt; VariablePtr</div><div class="ttdoc">Shared Boolean variables. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00260">boolean_graph.h:260</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml">scram::core::BooleanGraph</a></div><div class="ttdoc">BooleanGraph is a propositional directed acyclic graph (PDAG). </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00780">boolean_graph.h:780</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a93fa477d60140843c4abae7de52fffa1"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">scram::core::Gate::module</a></div><div class="ttdeci">bool module() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00454">boolean_graph.h:454</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a0d070ec20569129162398c73165f65bc"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">scram::core::Gate::coherent</a></div><div class="ttdeci">bool coherent() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00446">boolean_graph.h:446</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Variable_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Variable.xhtml">scram::core::Variable</a></div><div class="ttdoc">Boolean variables in a Boolean formula or graph. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00246">boolean_graph.h:246</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a8b76f2081293edc1cf85ddf8cb2ac2ed"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a8b76f2081293edc1cf85ddf8cb2ac2ed">scram::core::Node::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00126">boolean_graph.h:126</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Terminal_xhtml_ab615ba4379a9ae2a882177a6d120ece9"><div class="ttname"><a href="classscram_1_1core_1_1Terminal.xhtml#ab615ba4379a9ae2a882177a6d120ece9">scram::core::Terminal::Ptr</a></div><div class="ttdeci">static IntrusivePtr&lt; Terminal&lt; T &gt; &gt; Ptr(const IntrusivePtr&lt; Vertex&lt; T &gt;&gt; &amp;vertex)</div><div class="ttdoc">Recovers a shared pointer to Terminal from a pointer to Vertex. </div><div class="ttdef"><b>Definition:</b> <a href="bdd_8h_source.xhtml#l00210">bdd.h:210</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a670bc30d04c01d2fb124d5ebbc8ade71"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a670bc30d04c01d2fb124d5ebbc8ade71">ext::linear_map::size</a></div><div class="ttdeci">size_type size() const </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00375">linear_map.h:375</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a62121e217b0da73112af7e07275f2c15"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">scram::core::Node::index</a></div><div class="ttdeci">int index() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00123">boolean_graph.h:123</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Zbdd_xhtml_a7dd59951e7bc8fd08c75feb44bc496e2"><div class="ttname"><a href="classscram_1_1core_1_1Zbdd.xhtml#a7dd59951e7bc8fd08c75feb44bc496e2">scram::core::Zbdd::Zbdd</a></div><div class="ttdeci">Zbdd(Bdd *bdd, const Settings &amp;settings) noexcept</div><div class="ttdoc">Converts Reduced Ordered BDD into Zero-Suppressed BDD. </div><div class="ttdef"><b>Definition:</b> <a href="zbdd_8cc_source.xhtml#l00060">zbdd.cc:60</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:15 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
