<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>xml_stream.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">xml_stream.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="xml__stream_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file xml_stream.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Facilities to stream data in XML format.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_XML_STREAM_H_</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define SCRAM_SRC_XML_STREAM_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;ostream&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/// Errors in using XML streaming facilities.</span></div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="structscram_1_1XmlStreamError.xhtml">   31</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1Error.xhtml">Error</a> {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1Error.xhtml#ae292929f21fd325c28c28b0ae6c4633b">Error::Error</a>;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;};</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/// Writer of data formed as an XML element to a stream.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">/// This class relies on the RAII to put the closing tags.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/// It is designed for stack-based use</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/// so that its destructor gets called at scope exit.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/// One element at a time must be operated.</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/// The output will be malformed</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// if two child elements at the same scope are being streamed.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// To prevent this from happening,</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/// the parent element is put into an inactive state</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/// while its child element is alive.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// @note The stream is designed to prevent mixing XML text and elements</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">///       due to the absence of the use case or need.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">///       However, there&#39;s no fundamental design or technical issue</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">///       restricting the introduction of this feature.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">///       As a workaround, markup elements in the text (e.g., ``&lt;br/&gt;``)</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">///       can be fed directly as a raw text.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// @warning The names of elements and contents of XML data</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">///          are NOT fully validated to be proper XML.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">///          It is up to the caller</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">///          to sanitize the input text.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">/// @warning The API works with C strings,</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">///          but this class does not manage the string lifetime.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">///          It doesn&#39;t own any strings.</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">///          The provider of the strings must make sure</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">///          the lifetime of the string is long enough for streaming.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">///          It is the most common case that strings are literals,</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">///          so there&#39;s no need to worry about dynamic lifetime.</span></div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classscram_1_1XmlStreamElement.xhtml">   65</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">  /// Constructs a root streamer for the XML element data</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">  /// ready to accept attributes, elements, text.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">  /// @param[in] name  Non-empty string name for the element.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">  /// @param[in,out] out  The destination stream.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">  /// @throws XmlStreamError  Invalid setup for the element.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name, std::ostream&amp; out);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">  /// Move constructor is only declared</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  /// to make the compiler happy.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  /// The code must rely on the RVO, NRVO, and copy elision</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">  /// instead of this constructor.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  /// The constructor is not defined,</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">  /// so the use of this constructor will produce a linker error.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>(<a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>&amp;&amp;);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">  /// Puts the closing tag.</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// @pre No child element is alive.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">  /// @warning The output will be malformed</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  ///          if the child outlives the parent.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">  ///          It can happen if the destructor is called explicitly,</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  ///          or if the objects are allocated on the heap</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">  ///          with different lifetimes.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span>  ~<a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>() noexcept;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  /// Sets the attributes for the element.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">  /// @tparam T  Streamable type supporting operator&lt;&lt;.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">  /// @param[in] name  Non-empty name for the attribute.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">  /// @param[in] value  The value of the attribute.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">  /// @returns The reference to this element.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">  /// @throws XmlStreamError  Invalid setup for the attribute.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">  107</a></span>&#160;  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>&amp; <a class="code" href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">SetAttribute</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name, T&amp;&amp; value) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">if</span> (!active_)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;The element is inactive.&quot;</span>);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">if</span> (!accept_attributes_)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;Too late for attributes.&quot;</span>);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> (*name == <span class="charliteral">&#39;\0&#39;</span>)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;Attribute name can&#39;t be empty.&quot;</span>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    out_ &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot;=\&quot;&quot;</span> &lt;&lt; std::forward&lt;T&gt;(value) &lt;&lt; <span class="stringliteral">&quot;\&quot;&quot;</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">  /// Adds text to the element.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">  /// @tparam T  Streamable type supporting operator&lt;&lt;.</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">  /// @param[in] text  Non-empty text.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">  /// @post No more elements or attributes can be added.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">  /// @post More text can be added.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">  /// @throws XmlStreamError  Invalid setup or state for text addition.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classscram_1_1XmlStreamElement.xhtml#a414c693e59f68e95677ed91e48bae61a">  130</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1XmlStreamElement.xhtml#a414c693e59f68e95677ed91e48bae61a">AddText</a>(T&amp;&amp; text) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">if</span> (!active_)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;The element is inactive.&quot;</span>);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">if</span> (!accept_text_)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;Too late to put text.&quot;</span>);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">if</span> (accept_elements_)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      accept_elements_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">if</span> (accept_attributes_) {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      accept_attributes_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      out_ &lt;&lt; <span class="stringliteral">&quot;&gt;&quot;</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    out_ &lt;&lt; std::forward&lt;T&gt;(text);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  /// Adds a child element to the element.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">  /// @param[in] name  Non-empty name for the child element.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">  /// @returns A streamer for child element.</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">  /// @pre The child element will be destroyed before the parent.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">  /// @post The parent element is inactive</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">  ///       while the child element is alive.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">  /// @throws XmlStreamError  Invalid setup or state for element addition.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> AddChild(<span class="keyword">const</span> <span class="keywordtype">char</span>* name);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">  /// Private constructor for a streamer</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">  /// to pass parent-child information.</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">  /// @param[in] name  Non-empty string name for the element.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">  /// @param[in] indent  The number of spaces to indent the tags.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">  /// @param[in,out] parent  The parent element.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">  ///                        Null pointer for root streamers.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">  /// @param[in,out] out  The destination stream.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  /// @throws XmlStreamError  Invalid setup for the element.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name, <span class="keywordtype">int</span> indent, <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* parent,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                   std::ostream&amp; out);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* kName_;  <span class="comment">///&lt; The name of the element.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <span class="keywordtype">int</span> kIndent_;  <span class="comment">///&lt; Indentation for tags.</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> accept_attributes_;  <span class="comment">///&lt; Flag for preventing late attributes.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> accept_elements_;  <span class="comment">///&lt; Flag for preventing late elements.</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> accept_text_;  <span class="comment">///&lt; Flag for preventing late text additions.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> active_;  <span class="comment">///&lt; Active in streaming.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* parent_;  <span class="comment">///&lt; Parent element.</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span>  std::ostream&amp; out_;  <span class="comment">///&lt; The output destination.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_XML_STREAM_H_</span></div><div class="ttc" id="classscram_1_1Error_xhtml"><div class="ttname"><a href="classscram_1_1Error.xhtml">scram::Error</a></div><div class="ttdoc">The Error class is the base class for common exceptions specific to the SCRAM code. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00031">error.h:31</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1XmlStreamElement_xhtml_a414c693e59f68e95677ed91e48bae61a"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml#a414c693e59f68e95677ed91e48bae61a">scram::XmlStreamElement::AddText</a></div><div class="ttdeci">void AddText(T &amp;&amp;text)</div><div class="ttdoc">Adds text to the element. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00130">xml_stream.h:130</a></div></div>
<div class="ttc" id="classscram_1_1XmlStreamElement_xhtml_a3f8cfc1031e589dac6e33ea98c9b0479"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">scram::XmlStreamElement::SetAttribute</a></div><div class="ttdeci">XmlStreamElement &amp; SetAttribute(const char *name, T &amp;&amp;value)</div><div class="ttdoc">Sets the attributes for the element. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00107">xml_stream.h:107</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1XmlStreamElement_xhtml"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml">scram::XmlStreamElement</a></div><div class="ttdoc">Writer of data formed as an XML element to a stream. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00065">xml_stream.h:65</a></div></div>
<div class="ttc" id="classscram_1_1Error_xhtml_ae292929f21fd325c28c28b0ae6c4633b"><div class="ttname"><a href="classscram_1_1Error.xhtml#ae292929f21fd325c28c28b0ae6c4633b">scram::Error::Error</a></div><div class="ttdeci">Error(std::string msg)</div><div class="ttdoc">Constructs a new error with a provided message. </div><div class="ttdef"><b>Definition:</b> <a href="error_8cc_source.xhtml#l00027">error.cc:27</a></div></div>
<div class="ttc" id="structscram_1_1XmlStreamError_xhtml"><div class="ttname"><a href="structscram_1_1XmlStreamError.xhtml">scram::XmlStreamError</a></div><div class="ttdoc">Errors in using XML streaming facilities. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00031">xml_stream.h:31</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:15 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
