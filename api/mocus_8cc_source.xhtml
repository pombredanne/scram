<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>mocus.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">mocus.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="mocus_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file mocus.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of the MOCUS algorithm.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// The algorithm assumes</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">/// that the graph is in negation normal form.</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">/// A ZBDD data structure is employed to store and extract</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">/// intermediate (containing gates)</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">/// and final (basic events only) cut sets</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">/// upon cut set generation.</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="mocus_8h.xhtml">mocus.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="logger_8h.xhtml">logger.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">core</a> {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Mocus.xhtml#af92f2483abeea91acbf203e0f2397760">   35</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Mocus.xhtml#af92f2483abeea91acbf203e0f2397760">Mocus::Mocus</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml">BooleanGraph</a>* fault_tree, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings)</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    : constant_graph_(false),</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      graph_(fault_tree),</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      kSettings_(settings) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">const</span> <a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; top_gate = fault_tree-&gt;<a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml#a2621e916248269f99f5e968dc78e1491">root</a>();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keywordflow">if</span> (top_gate-&gt;IsConstant() || top_gate-&gt;type() == <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>) {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    constant_graph_ = <span class="keyword">true</span>;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    zbdd_ = std::make_unique&lt;Zbdd&gt;(fault_tree, settings);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    zbdd_-&gt;Analyze();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Mocus.xhtml#a008348c27bdc85ad9d0d106b18dcc1a2">   47</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Mocus.xhtml#a008348c27bdc85ad9d0d106b18dcc1a2">Mocus::Analyze</a>() {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>, constant_graph_) &lt;&lt; <span class="stringliteral">&quot;Graph is constant. No analysis!&quot;</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordflow">if</span> (constant_graph_)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(mcs_time);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Start minimal cut set generation.&quot;</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  zbdd_ = AnalyzeModule(*graph_-&gt;<a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml#a2621e916248269f99f5e968dc78e1491">root</a>(), kSettings_);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Delegating cut set extraction to ZBDD.&quot;</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  zbdd_-&gt;Analyze();</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Minimal cut sets found in &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(mcs_time);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Mocus.xhtml#a5f8ba8972e30ac19823bbfae32095bb0">   60</a></span>&#160;<span class="keyword">const</span> std::vector&lt;std::vector&lt;int&gt;&gt;&amp; <a class="code" href="classscram_1_1core_1_1Mocus.xhtml#a5f8ba8972e30ac19823bbfae32095bb0">Mocus::products</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  assert(zbdd_ &amp;&amp; <span class="stringliteral">&quot;Analysis is not done.&quot;</span>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordflow">return</span> zbdd_-&gt;products();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;std::unique_ptr&lt;zbdd::CutSetContainer&gt;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;Mocus::AnalyzeModule(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&amp; gate, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a>&amp; settings) noexcept {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  assert(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">module</a>() &amp;&amp; <span class="stringliteral">&quot;Expected only module gates.&quot;</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(gen_time);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>) &lt;&lt; <span class="stringliteral">&quot;Finding cut sets from module: G&quot;</span> &lt;&lt; gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Limit on product order: &quot;</span> &lt;&lt; settings.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  std::unordered_map&lt;int, const Gate*&gt; <a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keyword">auto</span> add_gates = [&amp;<a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>](<span class="keyword">const</span> <a class="code" href="classext_1_1linear__map.xhtml">Gate::ArgMap&lt;Gate&gt;</a>&amp; args) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">Gate::Arg&lt;Gate&gt;</a>&amp; arg : args)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      gates.emplace(arg.first, arg.second.get());</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  };</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  add_gates(gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;());</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keyword">auto</span> container = std::make_unique&lt;zbdd::CutSetContainer&gt;(</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      kSettings_, gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>(), graph_-&gt;<a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml#ac1b754a3afaf07be5cbec37c155ab634">basic_events</a>().size());</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  container-&gt;Merge(container-&gt;ConvertGate(gate));</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">while</span> (<span class="keywordtype">int</span> next_gate_index = container-&gt;GetNextGate()) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Expanding gate G&quot;</span> &lt;&lt; next_gate_index;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>* next_gate = gates.find(next_gate_index)-&gt;second;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    add_gates(next_gate-&gt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">args</a>&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;());</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    container-&gt;Merge(container-&gt;ExpandGate(</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        container-&gt;ConvertGate(*next_gate),</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        container-&gt;ExtractIntermediateCutSets(next_gate_index)));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  container-&gt;Minimize();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  container-&gt;Log();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">DEBUG3</a>) &lt;&lt; <span class="stringliteral">&quot;G&quot;</span> &lt;&lt; gate.<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">index</a>()</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;              &lt;&lt; <span class="stringliteral">&quot; cut set generation time: &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(gen_time);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordflow">if</span> (!gate.<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">coherent</a>()) {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    container-&gt;EliminateComplements();</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    container-&gt;Minimize();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; entry : container-&gt;GatherModules()) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordtype">int</span> index = entry.first;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    assert(index &gt; 0 &amp;&amp; <span class="stringliteral">&quot;No complement modules are expected.&quot;</span>);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">int</span> limit = entry.second.second;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    assert(limit &gt;= 0 &amp;&amp; <span class="stringliteral">&quot;Order cut-off is not strict.&quot;</span>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">bool</span> coherent = entry.second.first;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">if</span> (limit == 0 &amp;&amp; coherent) {  <span class="comment">// Unity is impossible.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      <span class="keyword">auto</span> empty_zbdd = std::make_unique&lt;zbdd::CutSetContainer&gt;(</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;          kSettings_, index, graph_-&gt;<a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml#ac1b754a3afaf07be5cbec37c155ab634">basic_events</a>().size());</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;      container-&gt;JoinModule(index, std::move(empty_zbdd));</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="classscram_1_1core_1_1Settings.xhtml">Settings</a> adjusted(settings);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    adjusted.<a class="code" href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">limit_order</a>(limit);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    container-&gt;JoinModule(index,</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                          AnalyzeModule(*gates.find(index)-&gt;second, adjusted));</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  container-&gt;EliminateConstantModules();</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  container-&gt;Minimize();</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">return</span> container;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}  <span class="comment">// namespace core</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml_a2621e916248269f99f5e968dc78e1491"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml#a2621e916248269f99f5e968dc78e1491">scram::core::BooleanGraph::root</a></div><div class="ttdeci">const GatePtr &amp; root() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00806">boolean_graph.h:806</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ac38351bd34c3272ac04f9ba8fa1428ec"><div class="ttname"><a href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">scram::core::GatePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Shared gates in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00060">boolean_graph.h:60</a></div></div>
<div class="ttc" id="version_8h_xhtml_a08935e0d1ae92ad3bf839e9757fbb53c"><div class="ttname"><a href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">scram::version::core</a></div><div class="ttdeci">const char * core()</div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml">scram::core::Gate</a></div><div class="ttdoc">An indexed gate for use in BooleanGraph. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00302">boolean_graph.h:302</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Mocus_xhtml_af92f2483abeea91acbf203e0f2397760"><div class="ttname"><a href="classscram_1_1core_1_1Mocus.xhtml#af92f2483abeea91acbf203e0f2397760">scram::core::Mocus::Mocus</a></div><div class="ttdeci">Mocus(const BooleanGraph *fault_tree, const Settings &amp;settings)</div><div class="ttdoc">Prepares a Boolean graph for analysis with the MOCUS algorithm. </div><div class="ttdef"><b>Definition:</b> <a href="mocus_8cc_source.xhtml#l00035">mocus.cc:35</a></div></div>
<div class="ttc" id="logger_8h_xhtml_afbc1fb2843a8415445a0528c5212eeb9"><div class="ttname"><a href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a></div><div class="ttdeci">#define DUR(var)</div><div class="ttdoc">Calculates the time duration since the start of the clock in seconds. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00052">logger.h:52</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml"><div class="ttname"><a href="classext_1_1linear__map.xhtml">ext::linear_map</a></div><div class="ttdoc">An adaptor map with lookup complexity O(N) based on sequence (contiguous structure by default)...</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00135">linear_map.h:135</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a9f420fb29f38ac48bde786a55de3d87c"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a9f420fb29f38ac48bde786a55de3d87c">scram::core::Gate::Arg</a></div><div class="ttdeci">std::pair&lt; int, std::shared_ptr&lt; T &gt;&gt; Arg</div><div class="ttdoc">An argument entry type in the gate&amp;#39;s argument containers. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00311">boolean_graph.h:311</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_aa793eeaa12244c5b39a0d80e5b1518ae"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#aa793eeaa12244c5b39a0d80e5b1518ae">scram::core::Gate::args</a></div><div class="ttdeci">const ArgSet &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00383">boolean_graph.h:383</a></div></div>
<div class="ttc" id="mocus_8h_xhtml"><div class="ttname"><a href="mocus_8h.xhtml">mocus.h</a></div><div class="ttdoc">Fault tree analysis with the MOCUS algorithm. </div></div>
<div class="ttc" id="logger_8h_xhtml"><div class="ttname"><a href="logger_8h.xhtml">logger.h</a></div><div class="ttdoc">Logging capability for various purposes, such as warnings and debugging. </div></div>
<div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml_ac1b754a3afaf07be5cbec37c155ab634"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml#ac1b754a3afaf07be5cbec37c155ab634">scram::core::BooleanGraph::basic_events</a></div><div class="ttdeci">const std::vector&lt; mef::BasicEvent * &gt; &amp; basic_events() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00814">boolean_graph.h:814</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">scram::DEBUG5</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG4. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00076">logger.h:76</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">scram::core::kNull</a></div><div class="ttdoc">Special pass-through or NULL gate. This is not NULL set. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00280">boolean_graph.h:280</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea1571c622645c44a111d16a86ebde8b44">scram::DEBUG3</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG2. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00074">logger.h:74</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml_a0e43ec0f017d23a4fa4e376c4060d380"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml#a0e43ec0f017d23a4fa4e376c4060d380">scram::core::Settings::limit_order</a></div><div class="ttdeci">int limit_order() const </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00075">settings.h:75</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aba7b09d6e8fbe414c23705ad24dde6ff"><div class="ttname"><a href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a></div><div class="ttdeci">#define LOG(level)</div><div class="ttdoc">Logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00055">logger.h:55</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">scram::DEBUG4</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG3. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00075">logger.h:75</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aeb429ee17505f6ecedfc553f75f667af"><div class="ttname"><a href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a></div><div class="ttdeci">#define BLOG(level, cond)</div><div class="ttdoc">Conditional logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00059">logger.h:59</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Mocus_xhtml_a008348c27bdc85ad9d0d106b18dcc1a2"><div class="ttname"><a href="classscram_1_1core_1_1Mocus.xhtml#a008348c27bdc85ad9d0d106b18dcc1a2">scram::core::Mocus::Analyze</a></div><div class="ttdeci">void Analyze()</div><div class="ttdoc">Finds minimal cut sets from the Boolean graph. </div><div class="ttdef"><b>Definition:</b> <a href="mocus_8cc_source.xhtml#l00047">mocus.cc:47</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_a7880117e5dd7fc82f420e32606266bbd"><div class="ttname"><a href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; gates</div><div class="ttdoc">Collection of gates. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00773">boolean_graph.cc:773</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">scram::DEBUG2</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG1. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00073">logger.h:73</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00037">settings.h:37</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8501f67861832d9efa717e17010648f5"><div class="ttname"><a href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a></div><div class="ttdeci">#define CLOCK(var)</div><div class="ttdoc">Starts the timing in nanoseconds. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00047">logger.h:47</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml">scram::core::BooleanGraph</a></div><div class="ttdoc">BooleanGraph is a propositional directed acyclic graph (PDAG). </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00780">boolean_graph.h:780</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a93fa477d60140843c4abae7de52fffa1"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a93fa477d60140843c4abae7de52fffa1">scram::core::Gate::module</a></div><div class="ttdeci">bool module() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00454">boolean_graph.h:454</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a0d070ec20569129162398c73165f65bc"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a0d070ec20569129162398c73165f65bc">scram::core::Gate::coherent</a></div><div class="ttdeci">bool coherent() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00446">boolean_graph.h:446</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Mocus_xhtml_a5f8ba8972e30ac19823bbfae32095bb0"><div class="ttname"><a href="classscram_1_1core_1_1Mocus.xhtml#a5f8ba8972e30ac19823bbfae32095bb0">scram::core::Mocus::products</a></div><div class="ttdeci">const std::vector&lt; std::vector&lt; int &gt; &gt; &amp; products() const </div><div class="ttdef"><b>Definition:</b> <a href="mocus_8cc_source.xhtml#l00060">mocus.cc:60</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a62121e217b0da73112af7e07275f2c15"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">scram::core::Node::index</a></div><div class="ttdeci">int index() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00123">boolean_graph.h:123</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
