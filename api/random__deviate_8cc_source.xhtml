<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>random_deviate.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_eacaf28dc2715349d1b93fdb7927a3cb.xhtml">expression</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">random_deviate.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="random__deviate_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file random_deviate.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementations of random deviate expressions.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="random__deviate_8h.xhtml">random_deviate.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;boost/math/special_functions/beta.hpp&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;boost/math/special_functions/erf.hpp&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;boost/math/special_functions/gamma.hpp&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">src/error.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="random_8h.xhtml">src/random.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1UniformDeviate.xhtml#a9e5e1ba0ce964a34ddbb15e92660b0de">   35</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1UniformDeviate.xhtml#a9e5e1ba0ce964a34ddbb15e92660b0de">UniformDeviate::UniformDeviate</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; min,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                               <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; max)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({min, max}),</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      min_(*min),</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      max_(*max) {}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1UniformDeviate.xhtml#a558a657077fa6d4c1000d21863d56fda">   41</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1UniformDeviate.xhtml#a558a657077fa6d4c1000d21863d56fda">UniformDeviate::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordflow">if</span> (min_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() &gt;= max_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>()) {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Min value is more than max for Uniform&quot;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                          <span class="stringliteral">&quot; distribution.&quot;</span>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (min_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Max</a>() &gt;= max_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>()) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Sampled min value is more than sampled max&quot;</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                          <span class="stringliteral">&quot; for Uniform distribution.&quot;</span>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keywordtype">double</span> UniformDeviate::GetSample() noexcept {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1Random.xhtml#a51c179761b8f16011c284a5bcf0b2ba2">Random::UniformRealGenerator</a>(min_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), max_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>());</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NormalDeviate.xhtml#a1102fc443c9e7e57d14ee8cee7c16d02">   55</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1NormalDeviate.xhtml#a1102fc443c9e7e57d14ee8cee7c16d02">NormalDeviate::NormalDeviate</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; mean,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                             <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; sigma)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({mean, sigma}),</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      mean_(*mean),</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      sigma_(*sigma) {}</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NormalDeviate.xhtml#a00e2955e101aa9725b2dd503c5f4c61a">   61</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NormalDeviate.xhtml#a00e2955e101aa9725b2dd503c5f4c61a">NormalDeviate::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordflow">if</span> (sigma_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() &lt;= 0) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Standard deviation cannot be negative or zero.&quot;</span>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (sigma_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>() &lt;= 0) {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Sampled standard deviation is negative or zero.&quot;</span>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keywordtype">double</span> NormalDeviate::GetSample() noexcept {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1Random.xhtml#a48db980c126c418dd547c2fea7d49962">Random::NormalGenerator</a>(mean_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), sigma_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>());</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1LogNormalDeviate.xhtml#a37f4533b64035061b48cec6b450866a8">   73</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1LogNormalDeviate.xhtml#a37f4533b64035061b48cec6b450866a8">LogNormalDeviate::LogNormalDeviate</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; mean,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; ef,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; level)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({mean, ef, level}),</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      mean_(*mean),</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      ef_(*ef),</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      level_(*level) {}</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1LogNormalDeviate.xhtml#a146823c655ffc212ea49060f75c7ab47">   81</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1LogNormalDeviate.xhtml#a146823c655ffc212ea49060f75c7ab47">LogNormalDeviate::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">if</span> (level_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() &lt;= 0 || level_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() &gt;= 1) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The confidence level is not within (0, 1).&quot;</span>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ef_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() &lt;= 1) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The Error Factor for Log-Normal distribution&quot;</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                          <span class="stringliteral">&quot; cannot be less than 1.&quot;</span>);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mean_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() &lt;= 0) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The mean of Log-Normal distribution cannot be&quot;</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                          <span class="stringliteral">&quot; negative or zero.&quot;</span>);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (level_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>() &lt;= 0 || level_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Max</a>() &gt;= 1) {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The confidence level doesn&#39;t sample within (0, 1).&quot;</span>);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ef_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>() &lt;= 1) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The Sampled Error Factor for Log-Normal&quot;</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                          <span class="stringliteral">&quot; distribution cannot be less than 1.&quot;</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mean_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>() &lt;= 0) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The sampled mean of Log-Normal distribution&quot;</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                          <span class="stringliteral">&quot; cannot be negative or zero.&quot;</span>);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keywordtype">double</span> LogNormalDeviate::GetSample() noexcept {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordtype">double</span> sigma = ComputeScale(level_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), ef_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>());</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keywordtype">double</span> mu = ComputeLocation(mean_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), sigma);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1Random.xhtml#a8c06842e494b989786dc196284e78b05">Random::LogNormalGenerator</a>(mu, sigma);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1LogNormalDeviate.xhtml#a998896231194b54da176d9fa3378a33e">  108</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1LogNormalDeviate.xhtml#a998896231194b54da176d9fa3378a33e">LogNormalDeviate::Max</a>() noexcept {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordtype">double</span> sigma = ComputeScale(level_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(), ef_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>());</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordtype">double</span> mu = ComputeLocation(mean_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Max</a>(), sigma);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordflow">return</span> std::exp(3 * sigma + mu);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keywordtype">double</span> LogNormalDeviate::ComputeScale(<span class="keywordtype">double</span> level, <span class="keywordtype">double</span> ef) noexcept {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordtype">double</span> z = -std::sqrt(2) * boost::math::erfc_inv(2 * level);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keywordflow">return</span> std::log(ef) / z;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keywordtype">double</span> LogNormalDeviate::ComputeLocation(<span class="keywordtype">double</span> mean, <span class="keywordtype">double</span> sigma) noexcept {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">return</span> std::log(mean) - std::pow(sigma, 2) / 2;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a5858f6726cf79790fc00cacfe74b18ee">  123</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a5858f6726cf79790fc00cacfe74b18ee">GammaDeviate::GammaDeviate</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; k, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; theta)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({k, theta}),</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      k_(*k),</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      theta_(*theta) {}</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a4e6270b70787e8ab6f58c605ddebf674">  128</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a4e6270b70787e8ab6f58c605ddebf674">GammaDeviate::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordflow">if</span> (k_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() &lt;= 0) {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The k shape parameter for Gamma distribution&quot;</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                          <span class="stringliteral">&quot; cannot be negative or zero.&quot;</span>);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (theta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() &lt;= 0) {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The theta scale parameter for Gamma distribution&quot;</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                          <span class="stringliteral">&quot; cannot be negative or zero.&quot;</span>);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (k_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>() &lt;= 0) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Sampled k shape parameter for Gamma distribution&quot;</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                          <span class="stringliteral">&quot; cannot be negative or zero.&quot;</span>);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (theta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>() &lt;= 0) {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Sampled theta scale parameter for Gamma &quot;</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                          <span class="stringliteral">&quot;distribution cannot be negative or zero.&quot;</span>);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a853def23b4ff78a5c774699f0eaf27ba">  144</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1GammaDeviate.xhtml#a853def23b4ff78a5c774699f0eaf27ba">GammaDeviate::Max</a>() noexcept {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  <span class="keyword">using</span> boost::math::gamma_q;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keywordtype">double</span> k_max = k_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Max</a>();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordflow">return</span> theta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Max</a>() * std::pow(gamma_q(k_max, gamma_q(k_max, 0) - 0.99), -1);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keywordtype">double</span> GammaDeviate::GetSample() noexcept {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1Random.xhtml#ac70a7248ce1258d1fbee8c316717ac2b">Random::GammaGenerator</a>(k_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), theta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>());</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BetaDeviate.xhtml#a6343964b6386cb4a22a47ad30c17ba01">  154</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1BetaDeviate.xhtml#a6343964b6386cb4a22a47ad30c17ba01">BetaDeviate::BetaDeviate</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; alpha, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; beta)</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>({alpha, beta}),</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      alpha_(*alpha),</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      beta_(*beta) {}</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BetaDeviate.xhtml#aa65f2fd1412e180085e80bbcbace562b">  159</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1BetaDeviate.xhtml#aa65f2fd1412e180085e80bbcbace562b">BetaDeviate::Validate</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="keywordflow">if</span> (alpha_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() &lt;= 0) {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The alpha shape parameter for Beta distribution&quot;</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                          <span class="stringliteral">&quot; cannot be negative or zero.&quot;</span>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (beta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() &lt;= 0) {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The beta shape parameter for Beta distribution&quot;</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                          <span class="stringliteral">&quot; cannot be negative or zero.&quot;</span>);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (alpha_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>() &lt;= 0) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Sampled alpha shape parameter for&quot;</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                          <span class="stringliteral">&quot; Beta distribution cannot be negative or zero.&quot;</span>);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (beta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>() &lt;= 0) {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Sampled beta shape parameter for Beta&quot;</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                          <span class="stringliteral">&quot; distribution cannot be negative or zero.&quot;</span>);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1BetaDeviate.xhtml#a8143423beabd8a74c3093f1b8a68787b">  175</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1BetaDeviate.xhtml#a8143423beabd8a74c3093f1b8a68787b">BetaDeviate::Max</a>() noexcept {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordflow">return</span> std::pow(boost::math::ibeta(alpha_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Max</a>(), beta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Max</a>(), 0.99), -1);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keywordtype">double</span> BetaDeviate::GetSample() noexcept {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1Random.xhtml#a0c493e04d7d5b75b4a5a6aeed776d799">Random::BetaGenerator</a>(alpha_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(), beta_.<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>());</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Histogram.xhtml#a8bd55eb329dface96d792fb51fae3eb6">  183</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Histogram.xhtml#a8bd55eb329dface96d792fb51fae3eb6">Histogram::Histogram</a>(std::vector&lt;ExpressionPtr&gt; boundaries,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                     std::vector&lt;ExpressionPtr&gt; weights)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    : <a class="code" href="classscram_1_1mef_1_1RandomDeviate.xhtml">RandomDeviate</a>(std::move(boundaries)) {  <span class="comment">// Partial registration!</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keywordtype">int</span> num_intervals = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().size() - 1;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keywordflow">if</span> (weights.size() != num_intervals) {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;The number of weights is not equal to the number&quot;</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                          <span class="stringliteral">&quot; of intervals.&quot;</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="comment">// Complete the argument registration.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; arg : weights)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ae7934df291c680fd99bdfe4090007543">Expression::AddArg</a>(arg);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  boundaries_.first = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().begin();</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  boundaries_.second = std::next(boundaries_.first, num_intervals + 1);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  weights_.first = boundaries_.second;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  weights_.second = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">Expression::args</a>().end();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Histogram.xhtml#a516d3e3a6d7f96b20ea9133c39140709">  202</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Histogram.xhtml#a516d3e3a6d7f96b20ea9133c39140709">Histogram::Mean</a>() noexcept {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <span class="keywordtype">double</span> sum_weights = 0;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keywordtype">double</span> sum_product = 0;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keyword">auto</span> it_b = boundaries_.first;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keywordtype">double</span> prev_bound = (*it_b++)-&gt;<a class="code" href="classscram_1_1mef_1_1Histogram.xhtml#a516d3e3a6d7f96b20ea9133c39140709">Mean</a>();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it_w = weights_.first; it_w != weights_.second; ++it_w, ++it_b) {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">double</span> cur_bound = (*it_b)-&gt;Mean();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordtype">double</span> cur_weight = (*it_w)-&gt;Mean();</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    sum_product += (cur_bound - prev_bound) * cur_weight;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    sum_weights += cur_weight;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    prev_bound = cur_bound;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keywordflow">return</span> sum_product / (prev_bound * sum_weights);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">/// Iterator adaptor for retrieving sampled values.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Iterator&gt;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">class </span>sampler_iterator : <span class="keyword">public</span> Iterator {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">  /// Initializes the wrapper with to-be-sampled iterator.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> sampler_iterator(<span class="keyword">const</span> Iterator&amp; it) : Iterator(it) {}</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">  /// Hides the wrapped iterator&#39;s operator*.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">  /// @returns The sampled value of the expression under the iterator.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> operator*() { <span class="keywordflow">return</span> Iterator::operator*()-&gt;Sample(); }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;};</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">/// Helper function for type deduction upon sampler_iterator construction.</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Iterator&gt;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;sampler_iterator&lt;Iterator&gt; make_sampler(<span class="keyword">const</span> Iterator&amp; it) {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  <span class="keywordflow">return</span> sampler_iterator&lt;Iterator&gt;(it);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keywordtype">double</span> Histogram::GetSample() noexcept {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="preprocessor">#ifdef _LIBCPP_VERSION  // libc++ chokes on iterator categories.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  std::vector&lt;double&gt; samples;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = boundaries_.first; it != boundaries_.second; ++it) {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    samples.push_back((*it)-&gt;Sample());</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1Random.xhtml#ac3f26db781050f64356af4f369646e67">Random::HistogramGenerator</a>(</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;      samples.begin(), samples.end(), make_sampler(weights_.first));</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1Random.xhtml#ac3f26db781050f64356af4f369646e67">Random::HistogramGenerator</a>(make_sampler(boundaries_.first),</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                    make_sampler(boundaries_.second),</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                    make_sampler(weights_.first));</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="keywordtype">void</span> Histogram::CheckBoundaries()<span class="keyword"> const </span>{</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keyword">auto</span> it = boundaries_.first;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <span class="keywordflow">if</span> ((*it)-&gt;IsConstant() == <span class="keyword">false</span> || (*it)-&gt;Mean() != 0) {</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Histogram lower boundary must be 0.&quot;</span>);</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  }</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <span class="keywordflow">for</span> (++it; it != boundaries_.second; ++it) {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; prev_expr = *std::prev(it);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; cur_expr = *it;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span> (prev_expr-&gt;Mean() &gt;= cur_expr-&gt;Mean()) {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Histogram upper boundaries are not strictly&quot;</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                            <span class="stringliteral">&quot; increasing and positive.&quot;</span>);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (prev_expr-&gt;Max() &gt;= cur_expr-&gt;Min()) {</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Histogram sampled upper boundaries must&quot;</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                            <span class="stringliteral">&quot; be strictly increasing and positive.&quot;</span>);</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keywordtype">void</span> Histogram::CheckWeights()<span class="keyword"> const </span>{</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = weights_.first; it != weights_.second; ++it) {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">if</span> ((*it)-&gt;Mean() &lt; 0) {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Histogram weights can&#39;t be negative.&quot;</span>);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*it)-&gt;Min() &lt; 0) {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Histogram sampled weights can&#39;t be negative.&quot;</span>);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  }</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1mef_1_1UniformDeviate_xhtml_a558a657077fa6d4c1000d21863d56fda"><div class="ttname"><a href="classscram_1_1mef_1_1UniformDeviate.xhtml#a558a657077fa6d4c1000d21863d56fda">scram::mef::UniformDeviate::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00041">random_deviate.cc:41</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac7e0dd118eafdfa943944172c1625a4e"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">scram::mef::Expression::Mean</a></div><div class="ttdeci">virtual double Mean() noexcept=0</div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1UniformDeviate_xhtml_a9e5e1ba0ce964a34ddbb15e92660b0de"><div class="ttname"><a href="classscram_1_1mef_1_1UniformDeviate.xhtml#a9e5e1ba0ce964a34ddbb15e92660b0de">scram::mef::UniformDeviate::UniformDeviate</a></div><div class="ttdeci">UniformDeviate(const ExpressionPtr &amp;min, const ExpressionPtr &amp;max)</div><div class="ttdoc">Setup for uniform distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00035">random_deviate.cc:35</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a1834910c86a27726923fb285f73cd839"><div class="ttname"><a href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">scram::mef::ExpressionPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Expression &gt; ExpressionPtr</div><div class="ttdoc">Shared expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00038">expression.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1LogNormalDeviate_xhtml_a37f4533b64035061b48cec6b450866a8"><div class="ttname"><a href="classscram_1_1mef_1_1LogNormalDeviate.xhtml#a37f4533b64035061b48cec6b450866a8">scram::mef::LogNormalDeviate::LogNormalDeviate</a></div><div class="ttdeci">LogNormalDeviate(const ExpressionPtr &amp;mean, const ExpressionPtr &amp;ef, const ExpressionPtr &amp;level)</div><div class="ttdoc">Setup for log-normal distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00073">random_deviate.cc:73</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a8c06842e494b989786dc196284e78b05"><div class="ttname"><a href="classscram_1_1Random.xhtml#a8c06842e494b989786dc196284e78b05">scram::Random::LogNormalGenerator</a></div><div class="ttdeci">static double LogNormalGenerator(double m, double s) noexcept</div><div class="ttdoc">RNG from a lognormal distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00162">random.h:162</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ae7934df291c680fd99bdfe4090007543"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ae7934df291c680fd99bdfe4090007543">scram::mef::Expression::AddArg</a></div><div class="ttdeci">void AddArg(const ExpressionPtr &amp;arg)</div><div class="ttdoc">Registers an additional argument expression. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00122">expression.h:122</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ad4d7901b9be9105c9799167cac7af3e1"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; ExpressionPtr &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00079">expression.h:79</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a0c493e04d7d5b75b4a5a6aeed776d799"><div class="ttname"><a href="classscram_1_1Random.xhtml#a0c493e04d7d5b75b4a5a6aeed776d799">scram::Random::BetaGenerator</a></div><div class="ttdeci">static double BetaGenerator(double alpha, double beta) noexcept</div><div class="ttdoc">RNG from a Beta distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00189">random.h:189</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NormalDeviate_xhtml_a00e2955e101aa9725b2dd503c5f4c61a"><div class="ttname"><a href="classscram_1_1mef_1_1NormalDeviate.xhtml#a00e2955e101aa9725b2dd503c5f4c61a">scram::mef::NormalDeviate::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00061">random_deviate.cc:61</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a6b2d7f3d3abf98002c8cccee426edecc"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">scram::mef::Expression::Max</a></div><div class="ttdeci">virtual double Max() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00113">expression.h:113</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Histogram_xhtml_a516d3e3a6d7f96b20ea9133c39140709"><div class="ttname"><a href="classscram_1_1mef_1_1Histogram.xhtml#a516d3e3a6d7f96b20ea9133c39140709">scram::mef::Histogram::Mean</a></div><div class="ttdeci">double Mean() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00202">random_deviate.cc:202</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1LogNormalDeviate_xhtml_a146823c655ffc212ea49060f75c7ab47"><div class="ttname"><a href="classscram_1_1mef_1_1LogNormalDeviate.xhtml#a146823c655ffc212ea49060f75c7ab47">scram::mef::LogNormalDeviate::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00081">random_deviate.cc:81</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a9601745b7f61ec67c8074a4043367152"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">scram::mef::Expression::Min</a></div><div class="ttdeci">virtual double Min() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00116">expression.h:116</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NormalDeviate_xhtml_a1102fc443c9e7e57d14ee8cee7c16d02"><div class="ttname"><a href="classscram_1_1mef_1_1NormalDeviate.xhtml#a1102fc443c9e7e57d14ee8cee7c16d02">scram::mef::NormalDeviate::NormalDeviate</a></div><div class="ttdeci">NormalDeviate(const ExpressionPtr &amp;mean, const ExpressionPtr &amp;sigma)</div><div class="ttdoc">Setup for normal distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00055">random_deviate.cc:55</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BetaDeviate_xhtml_aa65f2fd1412e180085e80bbcbace562b"><div class="ttname"><a href="classscram_1_1mef_1_1BetaDeviate.xhtml#aa65f2fd1412e180085e80bbcbace562b">scram::mef::BetaDeviate::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00159">random_deviate.cc:159</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1RandomDeviate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1RandomDeviate.xhtml">scram::mef::RandomDeviate</a></div><div class="ttdoc">Abstract base class for all deviate expressions. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8h_source.xhtml#l00035">random_deviate.h:35</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="random__deviate_8h_xhtml"><div class="ttname"><a href="random__deviate_8h.xhtml">random_deviate.h</a></div><div class="ttdoc">A collection of deviate expressions with random distributions sampled at run-time. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1GammaDeviate_xhtml_a5858f6726cf79790fc00cacfe74b18ee"><div class="ttname"><a href="classscram_1_1mef_1_1GammaDeviate.xhtml#a5858f6726cf79790fc00cacfe74b18ee">scram::mef::GammaDeviate::GammaDeviate</a></div><div class="ttdeci">GammaDeviate(const ExpressionPtr &amp;k, const ExpressionPtr &amp;theta)</div><div class="ttdoc">Setup for Gamma distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00123">random_deviate.cc:123</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1GammaDeviate_xhtml_a853def23b4ff78a5c774699f0eaf27ba"><div class="ttname"><a href="classscram_1_1mef_1_1GammaDeviate.xhtml#a853def23b4ff78a5c774699f0eaf27ba">scram::mef::GammaDeviate::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00144">random_deviate.cc:144</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BetaDeviate_xhtml_a6343964b6386cb4a22a47ad30c17ba01"><div class="ttname"><a href="classscram_1_1mef_1_1BetaDeviate.xhtml#a6343964b6386cb4a22a47ad30c17ba01">scram::mef::BetaDeviate::BetaDeviate</a></div><div class="ttdeci">BetaDeviate(const ExpressionPtr &amp;alpha, const ExpressionPtr &amp;beta)</div><div class="ttdoc">Setup for Beta distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00154">random_deviate.cc:154</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1GammaDeviate_xhtml_a4e6270b70787e8ab6f58c605ddebf674"><div class="ttname"><a href="classscram_1_1mef_1_1GammaDeviate.xhtml#a4e6270b70787e8ab6f58c605ddebf674">scram::mef::GammaDeviate::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00128">random_deviate.cc:128</a></div></div>
<div class="ttc" id="random_8h_xhtml"><div class="ttname"><a href="random_8h.xhtml">random.h</a></div><div class="ttdoc">Contains helpers for randomness simulations. </div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a48db980c126c418dd547c2fea7d49962"><div class="ttname"><a href="classscram_1_1Random.xhtml#a48db980c126c418dd547c2fea7d49962">scram::Random::NormalGenerator</a></div><div class="ttdeci">static double NormalGenerator(double mean, double sigma) noexcept</div><div class="ttdoc">RNG from a normal distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00151">random.h:151</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a51c179761b8f16011c284a5bcf0b2ba2"><div class="ttname"><a href="classscram_1_1Random.xhtml#a51c179761b8f16011c284a5bcf0b2ba2">scram::Random::UniformRealGenerator</a></div><div class="ttdeci">static double UniformRealGenerator(double lower, double upper) noexcept</div><div class="ttdoc">RNG from a uniform distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00058">random.h:58</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BetaDeviate_xhtml_a8143423beabd8a74c3093f1b8a68787b"><div class="ttname"><a href="classscram_1_1mef_1_1BetaDeviate.xhtml#a8143423beabd8a74c3093f1b8a68787b">scram::mef::BetaDeviate::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00175">random_deviate.cc:175</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_ac70a7248ce1258d1fbee8c316717ac2b"><div class="ttname"><a href="classscram_1_1Random.xhtml#ac70a7248ce1258d1fbee8c316717ac2b">scram::Random::GammaGenerator</a></div><div class="ttdeci">static double GammaGenerator(double k, double theta) noexcept</div><div class="ttdoc">RNG from a Gamma distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00177">random.h:177</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a5cf00d8b2ff843ad029a501a89ee572a"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">scram::mef::Expression::Sample</a></div><div class="ttdeci">double Sample() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00033">expression.cc:33</a></div></div>
<div class="ttc" id="structscram_1_1InvalidArgument_xhtml"><div class="ttname"><a href="structscram_1_1InvalidArgument.xhtml">scram::InvalidArgument</a></div><div class="ttdoc">This error class can be used to indicate unacceptable arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00095">error.h:95</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Histogram_xhtml_a8bd55eb329dface96d792fb51fae3eb6"><div class="ttname"><a href="classscram_1_1mef_1_1Histogram.xhtml#a8bd55eb329dface96d792fb51fae3eb6">scram::mef::Histogram::Histogram</a></div><div class="ttdeci">Histogram(std::vector&lt; ExpressionPtr &gt; boundaries, std::vector&lt; ExpressionPtr &gt; weights)</div><div class="ttdoc">Histogram distribution setup. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00183">random_deviate.cc:183</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_ac3f26db781050f64356af4f369646e67"><div class="ttname"><a href="classscram_1_1Random.xhtml#ac3f26db781050f64356af4f369646e67">scram::Random::HistogramGenerator</a></div><div class="ttdeci">static double HistogramGenerator(IteratorB first_b, IteratorB last_b, IteratorW first_w) noexcept</div><div class="ttdoc">RNG from a histogram distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00116">random.h:116</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1LogNormalDeviate_xhtml_a998896231194b54da176d9fa3378a33e"><div class="ttname"><a href="classscram_1_1mef_1_1LogNormalDeviate.xhtml#a998896231194b54da176d9fa3378a33e">scram::mef::LogNormalDeviate::Max</a></div><div class="ttdeci">double Max() noexceptoverride</div><div class="ttdoc">99.9 percentile estimate. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8cc_source.xhtml#l00108">random_deviate.cc:108</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
