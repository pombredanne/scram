<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>element.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">element.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="element_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file element.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Helper classes, structs, and properties</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// common to all other classes.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_ELEMENT_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#define SCRAM_SRC_ELEMENT_H_</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index_container.hpp&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index/hashed_index.hpp&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;boost/multi_index/mem_fun.hpp&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/// This struct allows any attribute.</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Attribute.xhtml">   38</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Attribute.xhtml">Attribute</a> {</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Attribute.xhtml#a87972be8d27b354d102441011d21999c">   39</a></span>&#160;  std::string <a class="code" href="structscram_1_1mef_1_1Attribute.xhtml#a87972be8d27b354d102441011d21999c">name</a>;  <span class="comment">///&lt; The name that identifies this attribute.</span></div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Attribute.xhtml#a5c75475aadf4a5558c10b24f24bd0b92">   40</a></span>&#160;<span class="comment"></span>  std::string <a class="code" href="structscram_1_1mef_1_1Attribute.xhtml#a5c75475aadf4a5558c10b24f24bd0b92">value</a>;  <span class="comment">///&lt; Value of this attribute.</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Attribute.xhtml#a0d59c4be9d8f738a6e3d475fdb7fb8ad">   41</a></span>&#160;<span class="comment"></span>  std::string <a class="code" href="structscram_1_1mef_1_1Attribute.xhtml#a0d59c4be9d8f738a6e3d475fdb7fb8ad">type</a>;  <span class="comment">///&lt; Optional type of the attribute.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/// Mixin class that represents</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/// any element of analysis</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// that can have extra descriptions,</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">/// such as attributes and a label.</span></div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Element.xhtml">   48</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a> {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">  /// Constructs an element with an original name.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">  /// The name is expected to conform to identifier requirements</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">  /// described in the MEF documentation and additions.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">  /// @param[in] name  The local identifier name.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">  /// @param[in] optional_name  Allow empty names.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">  /// @throws LogicError  The name is required and empty.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">  /// @throws InvalidArgument  The name is malformed.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>(std::string <a class="code" href="structscram_1_1mef_1_1Attribute.xhtml#a87972be8d27b354d102441011d21999c">name</a>, <span class="keywordtype">bool</span> optional_name = <span class="keyword">false</span>);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  /// @returns The original name.</span></div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">   62</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> kName_; }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">  /// @returns The empty or preset label.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">  /// @returns Empty string if the label has not been set.</span></div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">   66</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">label</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> label_; }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">  /// Sets the label.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">  /// @param[in] new_label  The label to be set.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">  /// @throws LogicError  The label is already set,</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">  ///                     or the new label is empty.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> label(std::string new_label);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">  /// Adds an attribute to the attribute map.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  /// @param[in] attr  Unique attribute of this element.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">  /// @throws DuplicateArgumentError  A member attribute with the same name</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  ///                                 already exists.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">  /// @post Pointers or references</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">  ///       to existing attributes may get invalidated.</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> AddAttribute(<a class="code" href="structscram_1_1mef_1_1Attribute.xhtml">Attribute</a> attr);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// Checks if the element has a given attribute.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">  /// @param[in] name  The identifying name of the attribute.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">  /// @returns true if this element has an attribute with the given name.</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> HasAttribute(<span class="keyword">const</span> std::string&amp; name) <span class="keyword">const</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">  /// @returns A member attribute with the given name.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  /// @param[in] name  The id name of the attribute.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">  /// @throws LogicError  There is no such attribute.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Attribute.xhtml">Attribute</a>&amp; GetAttribute(<span class="keyword">const</span> std::string&amp; name) <span class="keyword">const</span>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  ~<a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keyword">const</span> std::string kName_;  <span class="comment">///&lt; The original name of the element.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span>  std::string label_;  <span class="comment">///&lt; The label text for the element.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  /// Container of attributes ordered by insertion time.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  /// The attributes are unique by their names.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">  /// @note Using a hash table incurs a huge memory overhead (~400B / element).</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">  /// @note Elements are expected to have few attributes,</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  ///       complex containers may be overkill.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span>  std::vector&lt;Attribute&gt; attributes_;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;};</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">/// Table of elements with unique names.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">/// @tparam T  Value or (smart/raw) pointer type deriving from Element class.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">using</span> <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable</a> = boost::multi_index_container&lt;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    T, boost::multi_index::indexed_by&lt;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;           boost::multi_index::hashed_unique&lt;boost::multi_index::const_mem_fun&lt;</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">  124</a></span>&#160;               <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">const</span> std::string&amp;, &amp;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">Element::name</a>&gt;&gt;&gt;&gt;;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">/// Role, access attributes for elements.</span></div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">  127</a></span>&#160;<span class="comment"></span><span class="keyword">enum class</span> <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> : std::uint8_t { kPublic, kPrivate };</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">/// Mixin class that manages private or public roles</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">/// for elements as needed.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">/// Public is the default assumption.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">/// It is expected to be set only once and never change.</span></div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Role.xhtml">  133</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a> {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">  /// Sets the role of an element upon creation.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  /// The base reference path must be formatted</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">  /// according to the MEF documentation and additions.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  /// @param[in] role  A role specifier of the element.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">  /// @param[in] base_path  The series of containers to get this event.</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">  /// @throws InvalidArgument  The base path string is malformed.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>(<a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> role = RoleSpecifier::kPublic,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                std::string base_path = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  /// @returns The assigned role of the element.</span></div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">  147</a></span>&#160;<span class="comment"></span>  <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> <a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> kRole_; }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">  /// @returns The base path containing ancestor container names.</span></div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">  150</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> kBasePath_; }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  ~<a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keyword">const</span> std::string kBasePath_;  <span class="comment">///&lt; A series of ancestor containers.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> kRole_;  <span class="comment">///&lt; The role of the element.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">/// Computes the full path of an element.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">/// @tparam T  Pointer to Element type deriving from Role.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">/// @param[in] element  A valid element with a name and base path.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">/// @returns A string representation of the full path.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="element_8h.xhtml#a34a172bfae7e234836f4ca9cc55a193d">  168</a></span>&#160;std::string <a class="code" href="element_8h.xhtml#a34a172bfae7e234836f4ca9cc55a193d">GetFullPath</a>(<span class="keyword">const</span> T&amp; element) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keywordflow">return</span> element-&gt;base_path() + <span class="stringliteral">&quot;.&quot;</span> + element-&gt;name();</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">/// Mixin class for assigning unique identifiers to elements.</span></div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Id.xhtml">  173</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Id.xhtml">Id</a> {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">  /// Mangles the element name to be unique.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">  /// Private elements get their full path as their ids,</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">  /// while public elements retain their name as ids.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">  /// @param[in] el  The owner of the id.</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">  /// @param[in] role  The role of the element.</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">  /// @throws LogicError  The name mangling strings are empty.</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Id.xhtml">Id</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>&amp; el, <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Role.xhtml">Role</a>&amp; role);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">  /// @returns The unique id that is set upon the construction of this element.</span></div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">  186</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">id</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> kId_; }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  ~<a class="code" href="classscram_1_1mef_1_1Id.xhtml">Id</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keyword">const</span> std::string kId_;  <span class="comment">///&lt; Unique Id name of an element.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">/// Table of elements with unique ids.</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">/// @tparam T  Value or (smart/raw) pointer type deriving from Id class.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keyword">using</span> <a class="code" href="element_8h.xhtml#a850003eb778bdded85c40e3b3a02e50b">IdTable</a> = boost::multi_index_container&lt;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    T,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    boost::multi_index::indexed_by&lt;boost::multi_index::hashed_unique&lt;</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="element_8h.xhtml#a850003eb778bdded85c40e3b3a02e50b">  202</a></span>&#160;        boost::multi_index::const_mem_fun&lt;Id, const std::string&amp;, &amp;Id::id&gt;&gt;&gt;&gt;;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">/// Mixin class for providing marks for graph nodes.</span></div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NodeMark.xhtml">  205</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a> {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">  /// Possible marks for the node.</span></div><div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">  208</a></span>&#160;<span class="comment"></span>  <span class="keyword">enum</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">Mark</a> : std::uint8_t {</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">  209</a></span>&#160;    kClear = 0,  <span class="comment">///&lt; Implicit conversion to Boolean false.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"></span>    kTemporary,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    kPermanent</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  };</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">  /// @returns The mark of this node.</span></div><div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">  215</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">Mark</a> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">mark</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> mark_; }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">  /// Sets the mark for this node.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">  /// @param[in] label  The specific label for the node.</span></div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NodeMark.xhtml#aa1c785eded54130822f51867255a0911">  220</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#aa1c785eded54130822f51867255a0911">mark</a>(<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">Mark</a> label) { mark_ = label; }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; <span class="keyword">protected</span>:</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  ~<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">Mark</a> mark_ = kClear;  <span class="comment">///&lt; The mark for traversal or toposort.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_ELEMENT_H_</span></div><div class="ttc" id="classscram_1_1mef_1_1Id_xhtml_a7e258c5f6332715d5ed6a3fdbf681a8b"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml#a7e258c5f6332715d5ed6a3fdbf681a8b">scram::mef::Id::id</a></div><div class="ttdeci">const std::string &amp; id() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00186">element.h:186</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Id_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Id.xhtml">scram::mef::Id</a></div><div class="ttdoc">Mixin class for assigning unique identifiers to elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00173">element.h:173</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_aa1843c29411c29b27d79414d34525bbc"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">scram::mef::Role::role</a></div><div class="ttdeci">RoleSpecifier role() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00147">element.h:147</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Attribute_xhtml_a0d59c4be9d8f738a6e3d475fdb7fb8ad"><div class="ttname"><a href="structscram_1_1mef_1_1Attribute.xhtml#a0d59c4be9d8f738a6e3d475fdb7fb8ad">scram::mef::Attribute::type</a></div><div class="ttdeci">std::string type</div><div class="ttdoc">Optional type of the attribute. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00041">element.h:41</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Attribute_xhtml_a5c75475aadf4a5558c10b24f24bd0b92"><div class="ttname"><a href="structscram_1_1mef_1_1Attribute.xhtml#a5c75475aadf4a5558c10b24f24bd0b92">scram::mef::Attribute::value</a></div><div class="ttdeci">std::string value</div><div class="ttdoc">Value of this attribute. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00040">element.h:40</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_ae433446a44a3ae40ec411b08916ec4ca"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">scram::mef::NodeMark::mark</a></div><div class="ttdeci">Mark mark() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00215">element.h:215</a></div></div>
<div class="ttc" id="element_8h_xhtml_a850003eb778bdded85c40e3b3a02e50b"><div class="ttname"><a href="element_8h.xhtml#a850003eb778bdded85c40e3b3a02e50b">scram::mef::IdTable</a></div><div class="ttdeci">boost::multi_index_container&lt; T, boost::multi_index::indexed_by&lt; boost::multi_index::hashed_unique&lt; boost::multi_index::const_mem_fun&lt; Id, const std::string &amp;,&amp;Id::id &gt;&gt;&gt;&gt; IdTable</div><div class="ttdoc">Table of elements with unique ids. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00202">element.h:202</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Attribute_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Attribute.xhtml">scram::mef::Attribute</a></div><div class="ttdoc">This struct allows any attribute. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00038">element.h:38</a></div></div>
<div class="ttc" id="element_8h_xhtml_a34a172bfae7e234836f4ca9cc55a193d"><div class="ttname"><a href="element_8h.xhtml#a34a172bfae7e234836f4ca9cc55a193d">scram::mef::GetFullPath</a></div><div class="ttdeci">std::string GetFullPath(const T &amp;element)</div><div class="ttdoc">Computes the full path of an element. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00168">element.h:168</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_aa1c785eded54130822f51867255a0911"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#aa1c785eded54130822f51867255a0911">scram::mef::NodeMark::mark</a></div><div class="ttdeci">void mark(Mark label)</div><div class="ttdoc">Sets the mark for this node. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00220">element.h:220</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a87e90b86d7599c2f60d7a7b99ab52d20"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">scram::mef::Element::label</a></div><div class="ttdeci">const std::string &amp; label() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00066">element.h:66</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Attribute_xhtml_a87972be8d27b354d102441011d21999c"><div class="ttname"><a href="structscram_1_1mef_1_1Attribute.xhtml#a87972be8d27b354d102441011d21999c">scram::mef::Attribute::name</a></div><div class="ttdeci">std::string name</div><div class="ttdoc">The name that identifies this attribute. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00039">element.h:39</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00127">element.h:127</a></div></div>
<div class="ttc" id="element_8h_xhtml_ab162a6f742c23405f33db706d5a927b4"><div class="ttname"><a href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">scram::mef::ElementTable</a></div><div class="ttdeci">boost::multi_index_container&lt; T, boost::multi_index::indexed_by&lt; boost::multi_index::hashed_unique&lt; boost::multi_index::const_mem_fun&lt; Element, const std::string &amp;,&amp;Element::name &gt;&gt;&gt;&gt; ElementTable</div><div class="ttdoc">Table of elements with unique names. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00124">element.h:124</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00062">element.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00048">element.h:48</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_a366c22cd8080cfc932d1fd46de4a31d2"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2">scram::mef::NodeMark::Mark</a></div><div class="ttdeci">Mark</div><div class="ttdoc">Possible marks for the node. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00208">element.h:208</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_ab91a51488ee8c4ed054de1e8450c8a59"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">scram::mef::Role::base_path</a></div><div class="ttdeci">const std::string &amp; base_path() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00150">element.h:150</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml">scram::mef::Role</a></div><div class="ttdoc">Mixin class that manages private or public roles for elements as needed. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00133">element.h:133</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml">scram::mef::NodeMark</a></div><div class="ttdoc">Mixin class for providing marks for graph nodes. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00205">element.h:205</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
