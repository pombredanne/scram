<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>xml.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">xml.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="xml_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file xml.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// XML helper facilities to work with libxml++.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_XML_H_</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define SCRAM_SRC_XML_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;boost/algorithm/string.hpp&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;boost/lexical_cast.hpp&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;libxml++/libxml++.h&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">/// Initializes a DOM parser</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/// and converts library exceptions into local errors.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/// @param[in] file_path  Path to the xml file.</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// @returns A parser with a well-formed, initialized document.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/// @throws ValidationError  There are problems loading the XML file.</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#ac6e06a790ddf60f0108718e37bb405ed">   44</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> std::unique_ptr&lt;xmlpp::DomParser&gt; <a class="code" href="xml_8h.xhtml#ac6e06a790ddf60f0108718e37bb405ed">ConstructDomParser</a>(</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> std::string&amp; file_path) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;xmlpp::DomParser&gt;(file_path);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  } <span class="keywordflow">catch</span> (<span class="keyword">const</span> xmlpp::parse_error&amp; ex) {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;XML file is invalid: &quot;</span> + std::string(ex.what()));</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// Helper function to statically cast to XML element.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/// @param[in] node  XML node known to be XML element.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">/// @returns XML element cast from the XML node.</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">/// @warning The node must be an XML element.</span></div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">   60</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keyword">const</span> xmlpp::Element* <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(<span class="keyword">const</span> xmlpp::Node* node) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>xmlpp::Element*<span class="keyword">&gt;</span>(node);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">/// Returns Normalized (trimmed) string value of an XML element attribute.</span></div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">   65</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> std::string <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(<span class="keyword">const</span> xmlpp::Element* element,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                     <span class="keyword">const</span> std::string&amp; attribute_name) {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  std::string value = element-&gt;get_attribute_value(attribute_name);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  boost::trim(value);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/// Gets a number from an XML attribute.</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">/// @tparam T  Numerical type.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">/// @param[in] element  XML element with the attribute.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">/// @param[in] attribute  The name of the attribute.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">/// @returns The interpreted value.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">/// @throws ValidationError  Casting is unsuccessful.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">///                          The error message will include the line number.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">typename</span> std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value, T&gt;::type</div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#acd0b156eee22830c9776f2b64429ebd1">   85</a></span>&#160;<a class="code" href="xml_8h.xhtml#acd0b156eee22830c9776f2b64429ebd1">CastAttributeValue</a>(<span class="keyword">const</span> xmlpp::Element* element,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                   <span class="keyword">const</span> std::string&amp; attribute) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> boost::lexical_cast&lt;T&gt;(<a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(element, attribute));</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  } <span class="keywordflow">catch</span> (boost::bad_lexical_cast&amp;) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Line &quot;</span> + std::to_string(element-&gt;get_line()) +</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                          <span class="stringliteral">&quot;:\nFailed to interpret attribute &#39;&quot;</span> + attribute +</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                          <span class="stringliteral">&quot;&#39; to a number.&quot;</span>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">/// Returns Normalized content of an XML text node.</span></div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#a818b7826f3993c5ff58d45a237274285">   97</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> std::string <a class="code" href="xml_8h.xhtml#a818b7826f3993c5ff58d45a237274285">GetContent</a>(<span class="keyword">const</span> xmlpp::TextNode* child_text) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  std::string content = child_text-&gt;get_content();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  boost::trim(content);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keywordflow">return</span> content;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">/// Gets a number from an XML text.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">/// @tparam T  Numerical type.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">/// @param[in] element  XML element with the text.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">/// @returns The interpreted value.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">/// @throws ValidationError  Casting is unsuccessful.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">///                          The error message will include the line number.</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keyword">typename</span> std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value, T&gt;::type</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="xml_8h.xhtml#a95a02cf1b495baa9ca846db40d69e8bc">  115</a></span>&#160;<a class="code" href="xml_8h.xhtml#a95a02cf1b495baa9ca846db40d69e8bc">CastChildText</a>(<span class="keyword">const</span> xmlpp::Element* element) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  std::string content = <a class="code" href="xml_8h.xhtml#a818b7826f3993c5ff58d45a237274285">GetContent</a>(element-&gt;get_child_text());</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> boost::lexical_cast&lt;T&gt;(content);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  } <span class="keywordflow">catch</span> (boost::bad_lexical_cast&amp;) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Line &quot;</span> + std::to_string(element-&gt;get_line()) +</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                          <span class="stringliteral">&quot;:\nFailed to interpret text &#39;&quot;</span> + content +</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                          <span class="stringliteral">&quot;&#39; to a number.&quot;</span>);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_XML_H_</span></div><div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="xml_8h_xhtml_ac6e06a790ddf60f0108718e37bb405ed"><div class="ttname"><a href="xml_8h.xhtml#ac6e06a790ddf60f0108718e37bb405ed">scram::ConstructDomParser</a></div><div class="ttdeci">std::unique_ptr&lt; xmlpp::DomParser &gt; ConstructDomParser(const std::string &amp;file_path)</div><div class="ttdoc">Initializes a DOM parser and converts library exceptions into local errors. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00044">xml.h:44</a></div></div>
<div class="ttc" id="xml_8h_xhtml_a818b7826f3993c5ff58d45a237274285"><div class="ttname"><a href="xml_8h.xhtml#a818b7826f3993c5ff58d45a237274285">scram::GetContent</a></div><div class="ttdeci">std::string GetContent(const xmlpp::TextNode *child_text)</div><div class="ttdoc">Returns Normalized content of an XML text node. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00097">xml.h:97</a></div></div>
<div class="ttc" id="xml_8h_xhtml_ab908f9834f69be3009ee07445b51a673"><div class="ttname"><a href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">scram::XmlElement</a></div><div class="ttdeci">const xmlpp::Element * XmlElement(const xmlpp::Node *node)</div><div class="ttdoc">Helper function to statically cast to XML element. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00060">xml.h:60</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="xml_8h_xhtml_acd0b156eee22830c9776f2b64429ebd1"><div class="ttname"><a href="xml_8h.xhtml#acd0b156eee22830c9776f2b64429ebd1">scram::CastAttributeValue</a></div><div class="ttdeci">std::enable_if&lt; std::is_arithmetic&lt; T &gt;::value, T &gt;::type CastAttributeValue(const xmlpp::Element *element, const std::string &amp;attribute)</div><div class="ttdoc">Gets a number from an XML attribute. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00085">xml.h:85</a></div></div>
<div class="ttc" id="xml_8h_xhtml_a95a02cf1b495baa9ca846db40d69e8bc"><div class="ttname"><a href="xml_8h.xhtml#a95a02cf1b495baa9ca846db40d69e8bc">scram::CastChildText</a></div><div class="ttdeci">std::enable_if&lt; std::is_arithmetic&lt; T &gt;::value, T &gt;::type CastChildText(const xmlpp::Element *element)</div><div class="ttdoc">Gets a number from an XML text. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00115">xml.h:115</a></div></div>
<div class="ttc" id="xml_8h_xhtml_a0c5491388e25d1f1badb26b56ef302e7"><div class="ttname"><a href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">scram::GetAttributeValue</a></div><div class="ttdeci">std::string GetAttributeValue(const xmlpp::Element *element, const std::string &amp;attribute_name)</div><div class="ttdoc">Returns Normalized (trimmed) string value of an XML element attribute. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00065">xml.h:65</a></div></div>
<div class="ttc" id="structscram_1_1ValidationError_xhtml"><div class="ttname"><a href="structscram_1_1ValidationError.xhtml">scram::ValidationError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00069">error.h:69</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:15 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
