<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>initializer.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">initializer.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="initializer_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file initializer.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of input file processing into analysis constructs.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="initializer_8h.xhtml">initializer.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;boost/filesystem.hpp&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm.hpp&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cycle_8h.xhtml">cycle.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="env_8h.xhtml">env.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arithmetic_8h.xhtml">expression/arithmetic.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="exponential_8h.xhtml">expression/exponential.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="random__deviate_8h.xhtml">expression/random_deviate.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="logger_8h.xhtml">logger.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="xml_8h.xhtml">xml.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// Maps string to the role specifier.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/// @param[in] s  Non-empty, valid role specifier string.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// @returns Role specifier attribute for elements.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span><a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> GetRole(<span class="keyword">const</span> std::string&amp; s) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  assert(!s.empty());</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  assert(s == <span class="stringliteral">&quot;public&quot;</span> || s == <span class="stringliteral">&quot;private&quot;</span>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordflow">return</span> s == <span class="stringliteral">&quot;public&quot;</span> ? RoleSpecifier::kPublic : RoleSpecifier::kPrivate;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">/// Takes into account the parent role upon producing element role.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/// @param[in] s  Potentially empty role specifier string.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/// @param[in] parent_role  The role to be inherited.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">/// @returns The role for the element under consideration.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span><a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> GetRole(<span class="keyword">const</span> std::string&amp; s, RoleSpecifier parent_role) {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keywordflow">return</span> s.empty() ? parent_role : GetRole(s);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Initializer.xhtml#a8fb6959baa83f7619b3ca9ed8423d40a">   65</a></span>&#160;<a class="code" href="classscram_1_1mef_1_1Initializer.xhtml#a8fb6959baa83f7619b3ca9ed8423d40a">Initializer::Initializer</a>(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                         <a class="code" href="classscram_1_1core_1_1Settings.xhtml">core::Settings</a> settings)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    : settings_(std::move(settings)),</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      mission_time_(std::make_shared&lt;<a class="code" href="classscram_1_1mef_1_1MissionTime.xhtml">MissionTime</a>&gt;(settings_.mission_time())) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    ProcessInputFiles(xml_files);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  } <span class="keywordflow">catch</span> (<span class="keyword">const</span> <a class="code" href="structscram_1_1CycleError.xhtml">CycleError</a>&amp;) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    BreakCycles();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keywordtype">void</span> Initializer::CheckFileExistence(</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; xml_file : xml_files) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">if</span> (boost::filesystem::exists(xml_file) == <span class="keyword">false</span>)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1IOError.xhtml">IOError</a>(<span class="stringliteral">&quot;File doesn&#39;t exist: &quot;</span> + xml_file);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keywordtype">void</span> Initializer::CheckDuplicateFiles(</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keyword">namespace </span>fs = boost::filesystem;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keyword">using</span> Path = std::pair&lt;fs::path, std::string&gt;;  <span class="comment">// Path mapping.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="comment">// Collection of input file locations in canonical path.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  std::vector&lt;Path&gt; files;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keyword">auto</span> comparator = [](<span class="keyword">const</span> Path&amp; lhs, <span class="keyword">const</span> Path&amp; rhs) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> lhs.first &lt; rhs.first;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  };</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; xml_file : xml_files)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    files.emplace_back(fs::canonical(xml_file), xml_file);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keyword">auto</span> it = boost::adjacent_find(</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      boost::sort(files, comparator),  <span class="comment">// NOLINT(build/include_what_you_use)</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      [](<span class="keyword">const</span> Path&amp; lhs, <span class="keyword">const</span> Path&amp; rhs) { <span class="keywordflow">return</span> lhs.first == rhs.first; });</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordflow">if</span> (it != files.end()) {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Duplicate input files:\n&quot;</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> Path&amp; path = *it;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">auto</span> it_end = std::upper_bound(it, files.end(), path, comparator);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">for</span> (; it != it_end; ++it) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      msg &lt;&lt; <span class="stringliteral">&quot;    &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;  POSIX Path: &quot;</span> &lt;&lt; path.first.c_str();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>(msg.str());</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessInputFiles(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp; xml_files) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(input_time);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Processing input files&quot;</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  CheckFileExistence(xml_files);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  CheckDuplicateFiles(xml_files);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  std::vector&lt;std::string&gt;::const_iterator it;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">for</span> (it = xml_files.begin(); it != xml_files.end(); ++it) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      ProcessInputFile(*it);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(<span class="stringliteral">&quot;In file &#39;&quot;</span> + *it + <span class="stringliteral">&quot;&#39;, &quot;</span> + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(def_time);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  ProcessTbdElements();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Element definition time &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(def_time);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Input files are processed in &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(input_time);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(valid_time);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Validating the input files&quot;</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="comment">// Check if the initialization is successful.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  ValidateInitialization();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Validation is finished in &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(valid_time);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(setup_time);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Setting up for the analysis&quot;</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="comment">// Perform setup for analysis using configurations from the input files.</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  SetupForAnalysis();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">DEBUG1</a>) &lt;&lt; <span class="stringliteral">&quot;Setup time &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(setup_time);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessInputFile(<span class="keyword">const</span> std::string&amp; xml_file) {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keyword">static</span> xmlpp::RelaxNGValidator validator(<a class="code" href="classscram_1_1Env.xhtml#a2c187e02af924b538ba19ba3608b88e2">Env::input_schema</a>());</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  std::unique_ptr&lt;xmlpp::DomParser&gt; parser = <a class="code" href="xml_8h.xhtml#ac6e06a790ddf60f0108718e37bb405ed">ConstructDomParser</a>(xml_file);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    validator.validate(parser-&gt;get_document());</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  } <span class="keywordflow">catch</span> (<span class="keyword">const</span> xmlpp::validity_error&amp; err) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;Document failed schema validation: &quot;</span> +</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                          std::string(err.what()));</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <span class="keyword">const</span> xmlpp::Node* root = parser-&gt;get_document()-&gt;get_root_node();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  assert(root-&gt;get_name() == <span class="stringliteral">&quot;opsa-mef&quot;</span>);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  doc_to_file_.emplace(root, xml_file);  <span class="comment">// Save for later.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keywordflow">if</span> (!model_) {  <span class="comment">// Create only one model for multiple files.</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">const</span> xmlpp::Element* root_element = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(root);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    model_ = std::make_shared&lt;Model&gt;(<a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(root_element, <span class="stringliteral">&quot;name&quot;</span>));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    AttachLabelAndAttributes(root_element, model_.get());</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : root-&gt;find(<span class="stringliteral">&quot;./define-fault-tree&quot;</span>)) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    DefineFaultTree(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node));</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : root-&gt;find(<span class="stringliteral">&quot;./define-CCF-group&quot;</span>)) {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    RegisterCcfGroup(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), <span class="stringliteral">&quot;&quot;</span>, RoleSpecifier::kPublic);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  }</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : root-&gt;find(<span class="stringliteral">&quot;./model-data&quot;</span>)) {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    ProcessModelData(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node));</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  parsers_.emplace_back(std::move(parser));</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessTbdElements() {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="comment">// This element helps report errors.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="keyword">const</span> xmlpp::Element* el_def;  <span class="comment">// XML element with the definition.</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;Parameter*, const xmlpp::Element*&gt;&amp; param :</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;         tbd_.parameters) {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      el_def = param.second;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      DefineParameter(el_def, param.first);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;BasicEvent*, const xmlpp::Element*&gt;&amp; event :</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;         tbd_.basic_events) {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      el_def = <span class="keyword">event</span>.second;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      DefineBasicEvent(el_def, event.first);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;Gate*, const xmlpp::Element*&gt;&amp; gate : tbd_.gates) {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      el_def = gate.second;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      DefineGate(el_def, gate.first);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> std::pair&lt;CcfGroup*, const xmlpp::Element*&gt;&amp; group :</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;         tbd_.ccf_groups) {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;      el_def = group.second;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      DefineCcfGroup(el_def, group.first);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">const</span> xmlpp::Node* root = el_def-&gt;find(<span class="stringliteral">&quot;/opsa-mef&quot;</span>)[0];</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(<span class="stringliteral">&quot;In file &#39;&quot;</span> + doc_to_file_.at(root) + <span class="stringliteral">&quot;&#39;, &quot;</span> + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keywordtype">void</span> Initializer::AttachLabelAndAttributes(<span class="keyword">const</span> xmlpp::Element* element_node,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                           <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>* element) {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  xmlpp::NodeSet labels = element_node-&gt;find(<span class="stringliteral">&quot;./label&quot;</span>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="keywordflow">if</span> (!labels.empty()) {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    assert(labels.size() == 1);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">const</span> xmlpp::Element* label = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(labels.front());</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">const</span> xmlpp::TextNode* text = label-&gt;get_child_text();</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    assert(text);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    element-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">label</a>(<a class="code" href="xml_8h.xhtml#a818b7826f3993c5ff58d45a237274285">GetContent</a>(text));</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  xmlpp::NodeSet attributes = element_node-&gt;find(<span class="stringliteral">&quot;./attributes&quot;</span>);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  <span class="keywordflow">if</span> (attributes.empty())</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  assert(attributes.size() == 1);  <span class="comment">// Only one big element &#39;attributes&#39;.</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <span class="keyword">const</span> xmlpp::Element* attribute = <span class="keyword">nullptr</span>;  <span class="comment">// To report position.</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keyword">const</span> xmlpp::Element* attributes_element = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(attributes.front());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : attributes_element-&gt;find(<span class="stringliteral">&quot;./attribute&quot;</span>)) {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      attribute = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      <a class="code" href="structscram_1_1mef_1_1Attribute.xhtml">Attribute</a> attribute_struct = {<a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(attribute, <span class="stringliteral">&quot;name&quot;</span>),</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                    <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(attribute, <span class="stringliteral">&quot;value&quot;</span>),</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                    <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(attribute, <span class="stringliteral">&quot;type&quot;</span>)};</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      element-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#ad5906432084ef153b708dbe77307d4f9">AddAttribute</a>(std::move(attribute_struct));</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    }</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  } <span class="keywordflow">catch</span>(<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(<span class="stringliteral">&quot;Line &quot;</span> + std::to_string(attribute-&gt;get_line()) + <span class="stringliteral">&quot;:\n&quot;</span> +</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;}</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keywordtype">void</span> Initializer::DefineFaultTree(<span class="keyword">const</span> xmlpp::Element* ft_node) {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  std::string name = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(ft_node, <span class="stringliteral">&quot;name&quot;</span>);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <a class="code" href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">FaultTreePtr</a> fault_tree(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml">FaultTree</a>(name));</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  RegisterFaultTreeData(ft_node, name, fault_tree.get());</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    model_-&gt;AddFaultTree(std::move(fault_tree));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; ft_node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<a class="code" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">ComponentPtr</a> Initializer::DefineComponent(<span class="keyword">const</span> xmlpp::Element* component_node,</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                          <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                          <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  std::string name = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(component_node, <span class="stringliteral">&quot;name&quot;</span>);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  std::string role = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(component_node, <span class="stringliteral">&quot;role&quot;</span>);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <a class="code" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">ComponentPtr</a> component(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a>(name, base_path,</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                                       GetRole(role, container_role)));</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  RegisterFaultTreeData(component_node, base_path + <span class="stringliteral">&quot;.&quot;</span> + name,</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                        component.get());</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keywordflow">return</span> component;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;}</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keywordtype">void</span> Initializer::RegisterFaultTreeData(<span class="keyword">const</span> xmlpp::Element* ft_node,</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                        <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                        <a class="code" href="classscram_1_1mef_1_1Component.xhtml">Component</a>* component) {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  AttachLabelAndAttributes(ft_node, component);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : ft_node-&gt;find(<span class="stringliteral">&quot;./define-house-event&quot;</span>)) {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#af39cf695b8aff1bbc17ee6545e3b33f2">AddHouseEvent</a>(</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        DefineHouseEvent(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()));</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(basic_time);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : ft_node-&gt;find(<span class="stringliteral">&quot;./define-basic-event&quot;</span>)) {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a1be65078ba5109830655771471d0cdf5">AddBasicEvent</a>(</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        RegisterBasicEvent(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()));</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Basic event registration time &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(basic_time);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : ft_node-&gt;find(<span class="stringliteral">&quot;./define-parameter&quot;</span>)) {</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a5b857d255c4d6471a7c0101c36493c75">AddParameter</a>(</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        RegisterParameter(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()));</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  }</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(gate_time);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : ft_node-&gt;find(<span class="stringliteral">&quot;./define-gate&quot;</span>)) {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a13bc34265c377d54084bda85de38e5ef">AddGate</a>(</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        RegisterGate(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()));</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Gate registration time &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(gate_time);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : ft_node-&gt;find(<span class="stringliteral">&quot;./define-CCF-group&quot;</span>)) {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a96be4497b7269c094864d096ee0c789c">AddCcfGroup</a>(</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        RegisterCcfGroup(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>()));</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : ft_node-&gt;find(<span class="stringliteral">&quot;./define-component&quot;</span>)) {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <a class="code" href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">ComponentPtr</a> sub =</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        DefineComponent(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), base_path, component-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>());</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;      component-&gt;<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a223846da8f5f38b27022cdb1143a258e">AddComponent</a>(std::move(sub));</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;      std::stringstream msg;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;      msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;      err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;}</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessModelData(<span class="keyword">const</span> xmlpp::Element* model_data) {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : model_data-&gt;find(<span class="stringliteral">&quot;./define-house-event&quot;</span>)) {</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    DefineHouseEvent(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), <span class="stringliteral">&quot;&quot;</span>, RoleSpecifier::kPublic);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  }</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(basic_time);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : model_data-&gt;find(<span class="stringliteral">&quot;./define-basic-event&quot;</span>)) {</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    RegisterBasicEvent(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), <span class="stringliteral">&quot;&quot;</span>, RoleSpecifier::kPublic);</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  }</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Basic event registration time &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(basic_time);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : model_data-&gt;find(<span class="stringliteral">&quot;./define-parameter&quot;</span>)) {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    RegisterParameter(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), <span class="stringliteral">&quot;&quot;</span>, RoleSpecifier::kPublic);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a> Initializer::RegisterGate(<span class="keyword">const</span> xmlpp::Element* gate_node,</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                  <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                  <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  std::string name = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(gate_node, <span class="stringliteral">&quot;name&quot;</span>);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  std::string role = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(gate_node, <span class="stringliteral">&quot;role&quot;</span>);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <span class="keyword">auto</span> gate = std::make_shared&lt;Gate&gt;(name, base_path,</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                                     GetRole(role, container_role));</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    model_-&gt;AddGate(gate);</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; gate_node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  }</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  tbd_.gates.emplace_back(gate.get(), gate_node);</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  AttachLabelAndAttributes(gate_node, gate.get());</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="keywordflow">return</span> gate;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="keywordtype">void</span> Initializer::DefineGate(<span class="keyword">const</span> xmlpp::Element* gate_node, <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate) {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  xmlpp::NodeSet formulas =</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;      gate_node-&gt;find(<span class="stringliteral">&quot;./*[name() != &#39;attributes&#39; and name() != &#39;label&#39;]&quot;</span>);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  <span class="comment">// Assumes that there are no attributes and labels.</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  assert(formulas.size() == 1);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <span class="keyword">const</span> xmlpp::Element* formula_node = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(formulas.front());</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  gate-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">formula</a>(GetFormula(formula_node, gate-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>()));</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    gate-&gt;<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abeb0d7efda63e877e150f54719da1ba8">Validate</a>();</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(<span class="stringliteral">&quot;Line &quot;</span> + std::to_string(gate_node-&gt;get_line()) + <span class="stringliteral">&quot;:\n&quot;</span> +</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> Initializer::GetFormula(<span class="keyword">const</span> xmlpp::Element* formula_node,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                   <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  std::string type = formula_node-&gt;get_name();</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <span class="keywordflow">if</span> (type == <span class="stringliteral">&quot;event&quot;</span> || type == <span class="stringliteral">&quot;basic-event&quot;</span> || type == <span class="stringliteral">&quot;gate&quot;</span> ||</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      type == <span class="stringliteral">&quot;house-event&quot;</span>) {</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    type = <span class="stringliteral">&quot;null&quot;</span>;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  }</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <span class="keywordtype">int</span> pos =</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;      boost::find(<a class="code" href="event_8h.xhtml#a909e412c9ddc25648f5b9b6d942bdca9">kOperatorToString</a>, type) - <a class="code" href="boolean__graph_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">std::begin</a>(<a class="code" href="event_8h.xhtml#a909e412c9ddc25648f5b9b6d942bdca9">kOperatorToString</a>);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  assert(pos &lt; kNumOperators &amp;&amp; <span class="stringliteral">&quot;Unexpected operator type.&quot;</span>);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> formula(<span class="keyword">new</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>(static_cast&lt;Operator&gt;(pos)));</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <span class="keywordflow">if</span> (type == <span class="stringliteral">&quot;atleast&quot;</span>) {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordtype">int</span> vote_number = CastAttributeValue&lt;int&gt;(formula_node, <span class="stringliteral">&quot;min&quot;</span>);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    formula-&gt;vote_number(vote_number);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <span class="comment">// Process arguments of this formula.</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  <span class="keywordflow">if</span> (type == <span class="stringliteral">&quot;null&quot;</span>) {  <span class="comment">// Special case of pass-through.</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    formula_node = formula_node-&gt;get_parent();</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  ProcessFormula(formula_node, base_path, formula.get());</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    formula-&gt;Validate();</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; formula_node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  }</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  <span class="keywordflow">return</span> formula;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessFormula(<span class="keyword">const</span> xmlpp::Element* formula_node,</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                 <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                 <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>* formula) {</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  xmlpp::NodeSet events = formula_node-&gt;find(<span class="stringliteral">&quot;./*[name() = &#39;event&#39; or &quot;</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                             <span class="stringliteral">&quot;name() = &#39;gate&#39; or &quot;</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                                             <span class="stringliteral">&quot;name() = &#39;basic-event&#39; or &quot;</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                             <span class="stringliteral">&quot;name() = &#39;house-event&#39;]&quot;</span>);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : events) {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keyword">const</span> xmlpp::Element* <span class="keyword">event</span> = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    std::string name = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(event, <span class="stringliteral">&quot;name&quot;</span>);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    std::string element_type = <span class="keyword">event</span>-&gt;get_name();</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="comment">// This is for the case &quot;&lt;event name=&quot;id&quot; type=&quot;type&quot;/&gt;&quot;.</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    std::string type = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(event, <span class="stringliteral">&quot;type&quot;</span>);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">if</span> (!type.empty()) {</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;      assert(type == <span class="stringliteral">&quot;gate&quot;</span> || type == <span class="stringliteral">&quot;basic-event&quot;</span> || type == <span class="stringliteral">&quot;house-event&quot;</span>);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;      element_type = type;  <span class="comment">// Event type is defined.</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;      <span class="keywordflow">if</span> (element_type == <span class="stringliteral">&quot;event&quot;</span>) {  <span class="comment">// Undefined type yet.</span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        model_-&gt;BindEvent(name, base_path, formula);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (element_type == <span class="stringliteral">&quot;gate&quot;</span>) {</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        formula-&gt;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a243f57b581bfa385b985d0b47bdfe114">AddArgument</a>(model_-&gt;GetGate(name, base_path));</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (element_type == <span class="stringliteral">&quot;basic-event&quot;</span>) {</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        formula-&gt;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a243f57b581bfa385b985d0b47bdfe114">AddArgument</a>(model_-&gt;GetBasicEvent(name, base_path));</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;      } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        assert(element_type == <span class="stringliteral">&quot;house-event&quot;</span>);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        formula-&gt;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a243f57b581bfa385b985d0b47bdfe114">AddArgument</a>(model_-&gt;GetHouseEvent(name, base_path));</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;      }</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    } <span class="keywordflow">catch</span> (std::out_of_range&amp;) {</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;      std::stringstream msg;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;      msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; <span class="keyword">event</span>-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;          &lt;&lt; <span class="stringliteral">&quot;Undefined &quot;</span> &lt;&lt; element_type &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot; with base path &quot;</span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;          &lt;&lt; base_path;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(msg.str());</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    }</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  }</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;  xmlpp::NodeSet formulas = formula_node-&gt;find(<span class="stringliteral">&quot;./*[name() != &#39;event&#39; and &quot;</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                               <span class="stringliteral">&quot;name() != &#39;gate&#39; and &quot;</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                               <span class="stringliteral">&quot;name() != &#39;basic-event&#39; and &quot;</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                               <span class="stringliteral">&quot;name() != &#39;house-event&#39;]&quot;</span>);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : formulas) {</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">const</span> xmlpp::Element* nested_formula = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    formula-&gt;<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a243f57b581bfa385b985d0b47bdfe114">AddArgument</a>(GetFormula(nested_formula, base_path));</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  }</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;}</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a> Initializer::RegisterBasicEvent(<span class="keyword">const</span> xmlpp::Element* event_node,</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                                              <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                                              <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;  std::string name = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(event_node, <span class="stringliteral">&quot;name&quot;</span>);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  std::string role = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(event_node, <span class="stringliteral">&quot;role&quot;</span>);</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  <span class="keyword">auto</span> basic_event = std::make_shared&lt;BasicEvent&gt;(</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;      name,</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;      base_path,</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;      GetRole(role, container_role));</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    model_-&gt;AddBasicEvent(basic_event);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; event_node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  }</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  tbd_.basic_events.emplace_back(basic_event.get(), event_node);</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;  AttachLabelAndAttributes(event_node, basic_event.get());</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  <span class="keywordflow">return</span> basic_event;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="keywordtype">void</span> Initializer::DefineBasicEvent(<span class="keyword">const</span> xmlpp::Element* event_node,</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                                   <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* basic_event) {</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;  xmlpp::NodeSet expressions =</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;     event_node-&gt;find(<span class="stringliteral">&quot;./*[name() != &#39;attributes&#39; and name() != &#39;label&#39;]&quot;</span>);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;  <span class="keywordflow">if</span> (!expressions.empty()) {</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keyword">const</span> xmlpp::Element* expr_node = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(expressions.back());</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> expression =</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        GetExpression(expr_node, basic_event-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>());</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    basic_event-&gt;<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#adbe388b7612beddb5d1646805343b4c3">expression</a>(expression);</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;  }</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;}</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<a class="code" href="event_8h.xhtml#a4ebd6466b2d3ea77c0780af19d75adb9">HouseEventPtr</a> Initializer::DefineHouseEvent(<span class="keyword">const</span> xmlpp::Element* event_node,</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                            <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                                            <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;  std::string name = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(event_node, <span class="stringliteral">&quot;name&quot;</span>);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;  std::string role = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(event_node, <span class="stringliteral">&quot;role&quot;</span>);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;  <span class="keyword">auto</span> house_event = std::make_shared&lt;HouseEvent&gt;(</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;      name,</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;      base_path,</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;      GetRole(role, container_role));</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    model_-&gt;AddHouseEvent(house_event);</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; event_node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;  }</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  <span class="comment">// Only Boolean constant.</span></div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  xmlpp::NodeSet expression = event_node-&gt;find(<span class="stringliteral">&quot;./constant&quot;</span>);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;  <span class="keywordflow">if</span> (!expression.empty()) {</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    assert(expression.size() == 1);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keyword">const</span> xmlpp::Element* constant = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(expression.front());</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    std::string val = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(constant, <span class="stringliteral">&quot;value&quot;</span>);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    assert(val == <span class="stringliteral">&quot;true&quot;</span> || val == <span class="stringliteral">&quot;false&quot;</span>);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keywordtype">bool</span> state = val == <span class="stringliteral">&quot;true&quot;</span>;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    house_event-&gt;state(state);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;  }</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;  AttachLabelAndAttributes(event_node, house_event.get());</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;  <span class="keywordflow">return</span> house_event;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;}</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<a class="code" href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">ParameterPtr</a> Initializer::RegisterParameter(<span class="keyword">const</span> xmlpp::Element* param_node,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                            <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                                            <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;  std::string name = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(param_node, <span class="stringliteral">&quot;name&quot;</span>);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;  std::string role = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(param_node, <span class="stringliteral">&quot;role&quot;</span>);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  <span class="keyword">auto</span> parameter = std::make_shared&lt;Parameter&gt;(name, base_path,</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                                               GetRole(role, container_role));</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    model_-&gt;AddParameter(parameter);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; param_node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;  }</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;  tbd_.parameters.emplace_back(parameter.get(), param_node);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;  <span class="comment">// Attach units.</span></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;  std::string unit = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(param_node, <span class="stringliteral">&quot;unit&quot;</span>);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;  <span class="keywordflow">if</span> (!unit.empty()) {</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keywordtype">int</span> pos = boost::find(<a class="code" href="expression_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">kUnitsToString</a>, unit) - <a class="code" href="boolean__graph_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">std::begin</a>(<a class="code" href="expression_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">kUnitsToString</a>);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    assert(pos &lt; <a class="code" href="expression_8h.xhtml#a488d363190a84f20f7a5ffac34e9fb8d">kNumUnits</a> &amp;&amp; <span class="stringliteral">&quot;Unexpected unit kind.&quot;</span>);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    parameter-&gt;unit(static_cast&lt;Units&gt;(pos));</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  }</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;  AttachLabelAndAttributes(param_node, parameter.get());</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;  <span class="keywordflow">return</span> parameter;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;}</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="keywordtype">void</span> Initializer::DefineParameter(<span class="keyword">const</span> xmlpp::Element* param_node,</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                                  <a class="code" href="classscram_1_1mef_1_1Parameter.xhtml">Parameter</a>* parameter) {</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;  <span class="comment">// Assuming that expression is the last child of the parameter definition.</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;  xmlpp::NodeSet expressions =</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;      param_node-&gt;find(<span class="stringliteral">&quot;./*[name() != &#39;attributes&#39; and name() != &#39;label&#39;]&quot;</span>);</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;  assert(expressions.size() == 1);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;  <span class="keyword">const</span> xmlpp::Element* expr_node = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(expressions.back());</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;  <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> expression = GetExpression(expr_node, parameter-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>());</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;  parameter-&gt;<a class="code" href="classscram_1_1mef_1_1Parameter.xhtml#a20dae114ae08bde6eb550db6745a16cc">expression</a>(expression);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;}</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">int</span> N&gt;</div><div class="line"><a name="l00560"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">  560</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Initializer::Extractor</a> {<span class="comment"></span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="comment">  /// Extracts and accumulates expressions</span></div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment">  /// to be passed to the constructor of expression T.</span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment">  /// @tparam Ts  Expression types.</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="comment">  /// @param[in] args  A vector of XML elements containing the arguments.</span></div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment">  /// @param[in,out] init  The host Initializer.</span></div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="comment">  /// @param[in] expressions  Accumulated argument expressions.</span></div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment">  /// @returns A shared pointer to the extracted expression.</span></div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment">  /// @throws std::out_of_range  Not enough arguments in the args container.</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Ts&gt;</div><div class="line"><a name="l00575"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml#ae29f35dea83c6f8ad98ace2bcf98e6ea">  575</a></span>&#160;  std::shared_ptr&lt;T&gt; <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml#ae29f35dea83c6f8ad98ace2bcf98e6ea">operator()</a>(<span class="keyword">const</span> xmlpp::NodeSet&amp; args,</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                                <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init,</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                Ts&amp;&amp;... expressions) {</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    static_assert(N &gt; 0, <span class="stringliteral">&quot;The number of arguments can&#39;t be fewer than 1.&quot;</span>);</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor</a>&lt;T, N - 1&gt;()(args, base_path, init,</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                                 init-&gt;GetExpression(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(args.at(N - 1)),</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                                                     base_path),</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                                 std::forward&lt;Ts&gt;(expressions)...);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;  }</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;};</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment">/// Partial specialization for terminal Extractor.</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00589"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00_010_01_4.xhtml">  589</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Initializer::Extractor</a>&lt;T, 0&gt; {<span class="comment"></span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment">  /// Constructs the requested expression T</span></div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="comment">  /// with all accumulated argument expressions.</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="comment">  /// @tparam Ts  Expression types.</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment">  /// @param[in] expressions  All argument expressions for constructing T.</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment">  /// @returns A shared pointer to the constructed expression.</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span>... Ts&gt;</div><div class="line"><a name="l00599"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00_010_01_4.xhtml#ac259791d4d2d6d75ab6f3f027939525d">  599</a></span>&#160;  std::shared_ptr&lt;T&gt; <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00_010_01_4.xhtml#ac259791d4d2d6d75ab6f3f027939525d">operator()</a>(<span class="keyword">const</span> xmlpp::NodeSet&amp; <span class="comment">/*args*/</span>,</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                                <span class="keyword">const</span> std::string&amp; <span class="comment">/*base_path*/</span>,</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                                <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* <span class="comment">/*init*/</span>,</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                                Ts&amp;&amp;... expressions) {</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    static_assert(<span class="keyword">sizeof</span>...(Ts), <span class="stringliteral">&quot;Unintended use case.&quot;</span>);</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keywordflow">return</span> std::make_shared&lt;T&gt;(std::forward&lt;Ts&gt;(expressions)...);</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;  }</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;};</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="comment">/// Specialization of Extractor to extract all expressions into arg vector.</span></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00610"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00-1_01_4.xhtml">  610</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Initializer::Extractor</a>&lt;T, -1&gt; {<span class="comment"></span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment">  /// Constructs an expression with a variable number of arguments.</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment">  /// @param[in] args  A vector of XML elements containing the arguments.</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment">  /// @param[in,out] init  The host Initializer.</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment">  /// @returns A shared pointer to the constructed expression.</span></div><div class="line"><a name="l00618"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00-1_01_4.xhtml#aa3a2ab99081e017bfa97747a8f6bca04">  618</a></span>&#160;<span class="comment"></span>  std::shared_ptr&lt;T&gt; <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00-1_01_4.xhtml#aa3a2ab99081e017bfa97747a8f6bca04">operator()</a>(<span class="keyword">const</span> xmlpp::NodeSet&amp; args,</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                                <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init) {</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    std::vector&lt;ExpressionPtr&gt; expr_args;</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : args) {</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;      expr_args.push_back(init-&gt;GetExpression(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node), base_path));</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    }</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="keywordflow">return</span> std::make_shared&lt;T&gt;(std::move(expr_args));</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;  }</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;};</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="comment">/// Full specialization for Extractor of Histogram expressions.</span></div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;&gt;</div><div class="line"><a name="l00631"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01Histogram_00-1_01_4.xhtml">  631</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Initializer::Extractor</a>&lt;<a class="code" href="classscram_1_1mef_1_1Histogram.xhtml">Histogram</a>, -1&gt; {<span class="comment"></span></div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="comment">  /// Constructs Histogram deviate expression</span></div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="comment">  /// expression arguments in XML elements.</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">  /// @param[in] args  A vector of XML elements containing the arguments.</span></div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment">  /// @param[in] base_path  Series of ancestor containers in the path with dots.</span></div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment">  /// @param[in,out] init  The host Initializer.</span></div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment">  /// @returns A shared pointer to the constructed Histogram expression.</span></div><div class="line"><a name="l00640"></a><span class="lineno"><a class="line" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01Histogram_00-1_01_4.xhtml#ac0e94ff09dd707d3c253937a172e7fc7">  640</a></span>&#160;<span class="comment"></span>  std::shared_ptr&lt;Histogram&gt; <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01Histogram_00-1_01_4.xhtml#ac0e94ff09dd707d3c253937a172e7fc7">operator()</a>(<span class="keyword">const</span> xmlpp::NodeSet&amp; args,</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                        <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                        <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>* init) {</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    std::vector&lt;ExpressionPtr&gt; boundaries = {<a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#a28efcb56b18aa4d5e58c3f25d17dd813">ConstantExpression::kZero</a>};</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    std::vector&lt;ExpressionPtr&gt; weights;</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : args) {</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;      <span class="keyword">const</span> xmlpp::Element* el = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node);</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;      xmlpp::NodeSet pair = el-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;      assert(pair.size() == 2);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;      boundaries.push_back(init-&gt;GetExpression(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(pair[0]), base_path));</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;      weights.push_back(init-&gt;GetExpression(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(pair[1]), base_path));</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    }</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordflow">return</span> std::make_shared&lt;Histogram&gt;(std::move(boundaries),</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                                       std::move(weights));</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;  }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;};</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="keyword">const</span> Initializer::ExtractorMap Initializer::kExpressionExtractors_ = {</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    {<span class="stringliteral">&quot;exponential&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;ExponentialExpression, 2&gt;</a>()},</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    {<span class="stringliteral">&quot;GLM&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;GlmExpression, 4&gt;</a>()},</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    {<span class="stringliteral">&quot;Weibull&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;WeibullExpression, 4&gt;</a>()},</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    {<span class="stringliteral">&quot;uniform-deviate&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;UniformDeviate, 2&gt;</a>()},</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    {<span class="stringliteral">&quot;normal-deviate&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;NormalDeviate, 2&gt;</a>()},</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    {<span class="stringliteral">&quot;lognormal-deviate&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;LogNormalDeviate, 3&gt;</a>()},</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    {<span class="stringliteral">&quot;gamma-deviate&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;GammaDeviate, 2&gt;</a>()},</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    {<span class="stringliteral">&quot;beta-deviate&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;BetaDeviate, 2&gt;</a>()},</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    {<span class="stringliteral">&quot;histogram&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor</a>&lt;<a class="code" href="classscram_1_1mef_1_1Histogram.xhtml">Histogram</a>, -1&gt;()},</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    {<span class="stringliteral">&quot;neg&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor&lt;Neg, 1&gt;</a>()},</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    {<span class="stringliteral">&quot;add&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor</a>&lt;<a class="code" href="classscram_1_1mef_1_1Add.xhtml">Add</a>, -1&gt;()},</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    {<span class="stringliteral">&quot;sub&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor</a>&lt;<a class="code" href="classscram_1_1mef_1_1Sub.xhtml">Sub</a>, -1&gt;()},</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    {<span class="stringliteral">&quot;mul&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor</a>&lt;<a class="code" href="classscram_1_1mef_1_1Mul.xhtml">Mul</a>, -1&gt;()},</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    {<span class="stringliteral">&quot;div&quot;</span>, <a class="code" href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">Extractor</a>&lt;<a class="code" href="classscram_1_1mef_1_1Div.xhtml">Div</a>, -1&gt;()}};</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> Initializer::GetExpression(<span class="keyword">const</span> xmlpp::Element* expr_element,</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                                         <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;  std::string expr_name = expr_element-&gt;get_name();</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;  <span class="keywordflow">if</span> (expr_name == <span class="stringliteral">&quot;int&quot;</span> || expr_name == <span class="stringliteral">&quot;float&quot;</span> || expr_name == <span class="stringliteral">&quot;bool&quot;</span>)</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keywordflow">return</span> GetConstantExpression(expr_element);</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;  <span class="keywordflow">if</span> (expr_name == <span class="stringliteral">&quot;parameter&quot;</span> || expr_name == <span class="stringliteral">&quot;system-mission-time&quot;</span>)</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    <span class="keywordflow">return</span> GetParameterExpression(expr_element, base_path);</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;  <span class="keywordflow">if</span> (expr_name == <span class="stringliteral">&quot;pi&quot;</span>)</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#a6b51863cacb5f42db2b3a7b0ec1e1e76">ConstantExpression::kPi</a>;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> expression = kExpressionExtractors_.at(expr_name)(</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        expr_element-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>), base_path, <span class="keyword">this</span>);</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    expressions_.push_back(expression.get());  <span class="comment">// For late validation.</span></div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keywordflow">return</span> expression;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>&amp; err) {</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; expr_element-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;  }</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;}</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> Initializer::GetConstantExpression(</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keyword">const</span> xmlpp::Element* expr_element) {</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;  assert(expr_element);</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;  std::string expr_name = expr_element-&gt;get_name();</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;  <span class="keywordflow">if</span> (expr_name == <span class="stringliteral">&quot;int&quot;</span>) {</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keywordtype">int</span> val = CastAttributeValue&lt;int&gt;(expr_element, <span class="stringliteral">&quot;value&quot;</span>);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="keywordflow">return</span> std::make_shared&lt;ConstantExpression&gt;(val);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (expr_name == <span class="stringliteral">&quot;float&quot;</span>) {</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keywordtype">double</span> val = CastAttributeValue&lt;double&gt;(expr_element, <span class="stringliteral">&quot;value&quot;</span>);</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordflow">return</span> std::make_shared&lt;ConstantExpression&gt;(val);</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    assert(expr_name == <span class="stringliteral">&quot;bool&quot;</span>);</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    std::string val = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(expr_element, <span class="stringliteral">&quot;value&quot;</span>);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordflow">return</span> val == <span class="stringliteral">&quot;true&quot;</span> ? <a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#aa3e2d564faa05a384d1fe531328c272a">ConstantExpression::kOne</a> : <a class="code" href="classscram_1_1mef_1_1ConstantExpression.xhtml#a28efcb56b18aa4d5e58c3f25d17dd813">ConstantExpression::kZero</a>;</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;  }</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;}</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> Initializer::GetParameterExpression(</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keyword">const</span> xmlpp::Element* expr_element,</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keyword">const</span> std::string&amp; base_path) {</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;  assert(expr_element);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;  std::string expr_name = expr_element-&gt;get_name();</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;  std::string param_unit;  <span class="comment">// The expected unit.</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;  <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> expression;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;  <span class="keywordflow">if</span> (expr_name == <span class="stringliteral">&quot;parameter&quot;</span>) {</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    std::string name = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(expr_element, <span class="stringliteral">&quot;name&quot;</span>);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;      <a class="code" href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">ParameterPtr</a> param = model_-&gt;GetParameter(name, base_path);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;      param-&gt;unused(<span class="keyword">false</span>);</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;      param_unit = <a class="code" href="expression_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">kUnitsToString</a>[param-&gt;unit()];</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;      expression = param;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    } <span class="keywordflow">catch</span> (std::out_of_range&amp;) {</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;      std::stringstream msg;</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;      msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; expr_element-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;          &lt;&lt; <span class="stringliteral">&quot;Undefined parameter &quot;</span> &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot; with base path &quot;</span> &lt;&lt; base_path;</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(msg.str());</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    }</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    assert(expr_name == <span class="stringliteral">&quot;system-mission-time&quot;</span>);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    param_unit = <a class="code" href="expression_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">kUnitsToString</a>[mission_time_-&gt;unit()];</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    expression = mission_time_;</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;  }</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;  <span class="comment">// Check units.</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;  std::string unit = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(expr_element, <span class="stringliteral">&quot;unit&quot;</span>);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;  <span class="keywordflow">if</span> (!unit.empty() &amp;&amp; unit != param_unit) {</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; expr_element-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Parameter unit mismatch.\nExpected: &quot;</span> &lt;&lt; param_unit</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        &lt;&lt; <span class="stringliteral">&quot;\nGiven: &quot;</span> &lt;&lt; unit;</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(msg.str());</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;  }</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;  <span class="keywordflow">return</span> expression;</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;}</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<a class="code" href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">CcfGroupPtr</a> Initializer::RegisterCcfGroup(<span class="keyword">const</span> xmlpp::Element* ccf_node,</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                                          <span class="keyword">const</span> std::string&amp; base_path,</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                                          <a class="code" href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">RoleSpecifier</a> container_role) {</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;  std::string name = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(ccf_node, <span class="stringliteral">&quot;name&quot;</span>);</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;  std::string <a class="code" href="classscram_1_1mef_1_1Initializer.xhtml#aa541fee61ff2be90b083f45dc1c26046">model</a> = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(ccf_node, <span class="stringliteral">&quot;model&quot;</span>);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;  assert(model == <span class="stringliteral">&quot;beta-factor&quot;</span> || model == <span class="stringliteral">&quot;alpha-factor&quot;</span> || model == <span class="stringliteral">&quot;MGL&quot;</span> ||</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;         model == <span class="stringliteral">&quot;phi-factor&quot;</span>);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;  <a class="code" href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">CcfGroupPtr</a> ccf_group;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;  <span class="keywordflow">if</span> (model == <span class="stringliteral">&quot;beta-factor&quot;</span>) {</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    ccf_group =</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        std::make_shared&lt;BetaFactorModel&gt;(name, base_path, container_role);</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (model == <span class="stringliteral">&quot;MGL&quot;</span>) {</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    ccf_group = std::make_shared&lt;MglModel&gt;(name, base_path, container_role);</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (model == <span class="stringliteral">&quot;alpha-factor&quot;</span>) {</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    ccf_group =</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        std::make_shared&lt;AlphaFactorModel&gt;(name, base_path, container_role);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (model == <span class="stringliteral">&quot;phi-factor&quot;</span>) {</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    ccf_group =</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        std::make_shared&lt;PhiFactorModel&gt;(name, base_path, container_role);</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;  }</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    model_-&gt;AddCcfGroup(ccf_group);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; ccf_node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;  }</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;  xmlpp::NodeSet members = ccf_node-&gt;find(<span class="stringliteral">&quot;./members&quot;</span>);</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;  assert(members.size() == 1);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;  ProcessCcfMembers(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(members[0]), ccf_group.get());</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;  AttachLabelAndAttributes(ccf_node, ccf_group.get());</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;  tbd_.ccf_groups.emplace_back(ccf_group.get(), ccf_node);</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;  <span class="keywordflow">return</span> ccf_group;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;}</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="keywordtype">void</span> Initializer::DefineCcfGroup(<span class="keyword">const</span> xmlpp::Element* ccf_node,</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                                 <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group) {</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : ccf_node-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>)) {</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    <span class="keyword">const</span> xmlpp::Element* element = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node);</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    std::string name = element-&gt;get_name();</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;distribution&quot;</span>) {</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;      assert(element-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>).size() == 1);</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;      <span class="keyword">const</span> xmlpp::Element* expr_node = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(element-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>)[0]);</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;      <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> expression =</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;          GetExpression(expr_node, ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>());</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;      ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a723878c7c836a52cf9edb5c8d1a37868">AddDistribution</a>(expression);</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;factor&quot;</span>) {</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;      DefineCcfFactor(element, ccf_group);</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;factors&quot;</span>) {</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* factor_node : element-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>)) {</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        DefineCcfFactor(<a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(factor_node), ccf_group);</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;      }</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    }</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;  }</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;}</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="keywordtype">void</span> Initializer::ProcessCcfMembers(<span class="keyword">const</span> xmlpp::Element* members_node,</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                                    <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group) {</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> xmlpp::Node* node : members_node-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>)) {</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <span class="keyword">const</span> xmlpp::Element* event_node = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(node);</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    assert(<span class="stringliteral">&quot;basic-event&quot;</span> == event_node-&gt;get_name());</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    std::string name = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(event_node, <span class="stringliteral">&quot;name&quot;</span>);</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <span class="keyword">auto</span> basic_event = std::make_shared&lt;BasicEvent&gt;(name,</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                                                    ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>(),</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                                                    ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>());</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;      ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a8321bf4372a0575c88b7162716469d15">AddMember</a>(basic_event);</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;      model_-&gt;AddBasicEvent(basic_event);</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1DuplicateArgumentError.xhtml">DuplicateArgumentError</a>&amp; err) {</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;      std::stringstream msg;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;      msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; event_node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;      err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;      <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    }</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;  }</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;}</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;<span class="keywordtype">void</span> Initializer::DefineCcfFactor(<span class="keyword">const</span> xmlpp::Element* factor_node,</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                                  <a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml">CcfGroup</a>* ccf_group) {</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;  <span class="comment">// Checking the level for one factor input.</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;  std::string level = <a class="code" href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">GetAttributeValue</a>(factor_node, <span class="stringliteral">&quot;level&quot;</span>);</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;  <span class="keywordflow">if</span> (level.empty()) {</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; factor_node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;CCF group factor level number is not provided.&quot;</span>;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(msg.str());</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;  }</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;  <span class="keywordtype">int</span> level_num = CastAttributeValue&lt;int&gt;(factor_node, <span class="stringliteral">&quot;level&quot;</span>);</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;  assert(factor_node-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>).size() == 1);</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;  <span class="keyword">const</span> xmlpp::Element* expr_node = <a class="code" href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">XmlElement</a>(factor_node-&gt;find(<span class="stringliteral">&quot;./*&quot;</span>)[0]);</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;  <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> expression = GetExpression(expr_node, ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">base_path</a>());</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    ccf_group-&gt;<a class="code" href="classscram_1_1mef_1_1CcfGroup.xhtml#a613678c7f9dd37c42239cd7988b2c259">AddFactor</a>(expression, level_num);</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    std::stringstream msg;</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    msg &lt;&lt; <span class="stringliteral">&quot;Line &quot;</span> &lt;&lt; factor_node-&gt;get_line() &lt;&lt; <span class="stringliteral">&quot;:\n&quot;</span>;</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>(msg.str() + err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keywordflow">throw</span>;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;  }</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;}</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="keywordtype">void</span> Initializer::ValidateInitialization() {</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;  <span class="comment">// Check if *all* gates have no cycles.</span></div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a>&amp; gate : model_-&gt;gates()) {</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    std::vector&lt;std::string&gt; cycle;</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <span class="keywordflow">if</span> (cycle::DetectCycle(gate, &amp;cycle)) {</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1CycleError.xhtml">CycleError</a>(<span class="stringliteral">&quot;Detected a cycle in &quot;</span> + gate-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>() +</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;                       <span class="stringliteral">&quot; gate:\n&quot;</span> + cycle::PrintCycle(cycle));</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    }</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;  }</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;  <span class="comment">// Keep node marks clean after use.</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a>&amp; gate : model_-&gt;gates())</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    gate-&gt;<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">mark</a>(<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">NodeMark::kClear</a>);</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;  <span class="comment">// Check if all primary events have expressions for probability analysis.</span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;  <span class="keywordflow">if</span> (settings_.probability_analysis()) {</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    std::string msg;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a>&amp; event : model_-&gt;basic_events()) {</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;      <span class="keywordflow">if</span> (!event-&gt;has_expression())</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;        msg += event-&gt;name() + <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    }</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a4ebd6466b2d3ea77c0780af19d75adb9">HouseEventPtr</a>&amp; event : model_-&gt;house_events()) {</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;      <span class="keywordflow">if</span> (!event-&gt;has_expression())</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;        msg += event-&gt;name() + <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    }</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="keywordflow">if</span> (!msg.empty())</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(<span class="stringliteral">&quot;These primary events do not have expressions:\n&quot;</span> +</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;                            msg);</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;  }</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;  ValidateExpressions();</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;</div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">CcfGroupPtr</a>&amp; group : model_-&gt;ccf_groups())</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    group-&gt;Validate();</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;}</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="keywordtype">void</span> Initializer::ValidateExpressions() {</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;  <span class="comment">// Check for cycles in parameters.</span></div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;  <span class="comment">// This must be done before expressions.</span></div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">ParameterPtr</a>&amp; param : model_-&gt;parameters()) {</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    std::vector&lt;std::string&gt; cycle;</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <span class="keywordflow">if</span> (cycle::DetectCycle(param.get(), &amp;cycle)) {</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1CycleError.xhtml">CycleError</a>(<span class="stringliteral">&quot;Detected a cycle in &quot;</span> + param-&gt;name() +</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                       <span class="stringliteral">&quot; parameter:\n&quot;</span> + cycle::PrintCycle(cycle));</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    }</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;  }</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">ParameterPtr</a>&amp; param : model_-&gt;parameters())</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    param-&gt;mark(<a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">NodeMark::kClear</a>);</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;  <span class="comment">// Validate expressions.</span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression : expressions_)</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;      expression-&gt;Validate();</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>&amp; err) {</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>());</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;  }</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;  <span class="comment">// Check distribution values for CCF groups.</span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;  std::stringstream msg;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">CcfGroupPtr</a>&amp; group : model_-&gt;ccf_groups()) {</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;      group-&gt;ValidateDistribution();</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;      msg &lt;&lt; group-&gt;name() &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>() &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    }</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;  }</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;  <span class="keywordflow">if</span> (!msg.str().empty()) {</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    std::string head = <span class="stringliteral">&quot;Invalid distributions for CCF groups detected:\n&quot;</span>;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(head + msg.str());</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;  }</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;  <span class="comment">// Check probability values for primary events.</span></div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">BasicEventPtr</a>&amp; event : model_-&gt;basic_events()) {</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="keywordflow">if</span> (event-&gt;has_expression() == <span class="keyword">false</span>)</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;      <span class="keyword">event</span>-&gt;Validate();</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    } <span class="keywordflow">catch</span> (<a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>&amp; err) {</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;      msg &lt;&lt; <span class="keyword">event</span>-&gt;name() &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; err.<a class="code" href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">msg</a>() &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    }</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;  }</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;  <span class="keywordflow">if</span> (!msg.str().empty()) {</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    std::string head = <span class="stringliteral">&quot;Invalid basic event probabilities detected:\n&quot;</span>;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1ValidationError.xhtml">ValidationError</a>(head + msg.str());</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;  }</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;}</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="keywordtype">void</span> Initializer::BreakCycles() {</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;  std::vector&lt;std::weak_ptr&lt;Gate&gt;&gt; cyclic_gates;</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">GatePtr</a>&amp; gate : model_-&gt;gates())</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    cyclic_gates.emplace_back(gate);</div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;  std::vector&lt;std::weak_ptr&lt;Parameter&gt;&gt; cyclic_parameters;</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">ParameterPtr</a>&amp; parameter : model_-&gt;parameters())</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    cyclic_parameters.emplace_back(parameter);</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;  model_.reset();</div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; gate : cyclic_gates) {</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    <span class="keywordflow">if</span> (gate.expired())</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    Gate::Cycle::BreakConnections(gate.lock().get());</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;  }</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; parameter : cyclic_parameters) {</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <span class="keywordflow">if</span> (parameter.expired())</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    Parameter::Cycle::BreakConnections(parameter.lock().get());</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;  }</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;}</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="keywordtype">void</span> Initializer::SetupForAnalysis() {</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(top_time);</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Collecting top events of fault trees...&quot;</span>;</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">FaultTreePtr</a>&amp; ft : model_-&gt;fault_trees()) {</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    ft-&gt;CollectTopEvents();</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;  }</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Top event collection is finished in &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(top_time);</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;  <a class="code" href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a>(ccf_time);</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Applying CCF models...&quot;</span>;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;  <span class="comment">// CCF groups must apply models to basic event members.</span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">CcfGroupPtr</a>&amp; group : model_-&gt;ccf_groups())</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    group-&gt;ApplyModel();</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">DEBUG2</a>) &lt;&lt; <span class="stringliteral">&quot;Application of CCF models finished in &quot;</span> &lt;&lt; <a class="code" href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a>(ccf_time);</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;}</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00326">event.h:326</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml">scram::mef::Component</a></div><div class="ttdoc">Component is for logical grouping of events, gates, and other components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00040">fault_tree.h:40</a></div></div>
<div class="ttc" id="structscram_1_1IOError_xhtml"><div class="ttname"><a href="structscram_1_1IOError.xhtml">scram::IOError</a></div><div class="ttdoc">For input/output related errors. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00089">error.h:89</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Mul_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Mul.xhtml">scram::mef::Mul</a></div><div class="ttdoc">This expression performs multiplication operation. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00129">arithmetic.h:129</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00_010_01_4_xhtml_ac259791d4d2d6d75ab6f3f027939525d"><div class="ttname"><a href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00_010_01_4.xhtml#ac259791d4d2d6d75ab6f3f027939525d">scram::mef::Initializer::Extractor&lt; T, 0 &gt;::operator()</a></div><div class="ttdeci">std::shared_ptr&lt; T &gt; operator()(const xmlpp::NodeSet &amp;, const std::string &amp;, Initializer *, Ts &amp;&amp;...expressions)</div><div class="ttdoc">Constructs the requested expression T with all accumulated argument expressions. </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00599">initializer.cc:599</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2d4eac027f72ba19eb11f1d5ae7ddadc">scram::DEBUG1</a></div><div class="ttdoc">Minimal debugging information. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00072">logger.h:72</a></div></div>
<div class="ttc" id="structscram_1_1DuplicateArgumentError_xhtml"><div class="ttname"><a href="structscram_1_1DuplicateArgumentError.xhtml">scram::DuplicateArgumentError</a></div><div class="ttdoc">This error indicates that arguments must be unique. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00079">error.h:79</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00-1_01_4_xhtml_aa3a2ab99081e017bfa97747a8f6bca04"><div class="ttname"><a href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01T_00-1_01_4.xhtml#aa3a2ab99081e017bfa97747a8f6bca04">scram::mef::Initializer::Extractor&lt; T,-1 &gt;::operator()</a></div><div class="ttdeci">std::shared_ptr&lt; T &gt; operator()(const xmlpp::NodeSet &amp;args, const std::string &amp;base_path, Initializer *init)</div><div class="ttdoc">Constructs an expression with a variable number of arguments. </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00618">initializer.cc:618</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml_aa541fee61ff2be90b083f45dc1c26046"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml#aa541fee61ff2be90b083f45dc1c26046">scram::mef::Initializer::model</a></div><div class="ttdeci">std::shared_ptr&lt; Model &gt; model() const </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8h_source.xhtml#l00068">initializer.h:68</a></div></div>
<div class="ttc" id="arithmetic_8h_xhtml"><div class="ttname"><a href="arithmetic_8h.xhtml">arithmetic.h</a></div><div class="ttdoc">A collection of arithmetic expressions. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_aa1843c29411c29b27d79414d34525bbc"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">scram::mef::Role::role</a></div><div class="ttdeci">RoleSpecifier role() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00147">element.h:147</a></div></div>
<div class="ttc" id="classscram_1_1Env_xhtml_a2c187e02af924b538ba19ba3608b88e2"><div class="ttname"><a href="classscram_1_1Env.xhtml#a2c187e02af924b538ba19ba3608b88e2">scram::Env::input_schema</a></div><div class="ttdeci">static std::string input_schema()</div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sub_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sub.xhtml">scram::mef::Sub</a></div><div class="ttdoc">This expression performs subtraction operation. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00090">arithmetic.h:90</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Add_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Add.xhtml">scram::mef::Add</a></div><div class="ttdoc">This expression adds all the given expressions&amp;#39; values. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00062">arithmetic.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00118">event.h:118</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml_a8fb6959baa83f7619b3ca9ed8423d40a"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml#a8fb6959baa83f7619b3ca9ed8423d40a">scram::mef::Initializer::Initializer</a></div><div class="ttdeci">Initializer(const std::vector&lt; std::string &gt; &amp;xml_files, core::Settings settings)</div><div class="ttdoc">Reads input files with the structure of analysis constructs. </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00065">initializer.cc:65</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a5b857d255c4d6471a7c0101c36493c75"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a5b857d255c4d6471a7c0101c36493c75">scram::mef::Component::AddParameter</a></div><div class="ttdeci">void AddParameter(const ParameterPtr &amp;parameter)</div><div class="ttdoc">Adds a parameter into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00045">fault_tree.cc:45</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="xml_8h_xhtml"><div class="ttname"><a href="xml_8h.xhtml">xml.h</a></div><div class="ttdoc">XML helper facilities to work with libxml++. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a223846da8f5f38b27022cdb1143a258e"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a223846da8f5f38b27022cdb1143a258e">scram::mef::Component::AddComponent</a></div><div class="ttdeci">void AddComponent(std::unique_ptr&lt; Component &gt; component)</div><div class="ttdoc">Adds a member component container into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00068">fault_tree.cc:68</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a1834910c86a27726923fb285f73cd839"><div class="ttname"><a href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">scram::mef::ExpressionPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Expression &gt; ExpressionPtr</div><div class="ttdoc">Shared expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00038">expression.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abde84a63a060e2424ab92431634f21d9"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">scram::mef::Gate::formula</a></div><div class="ttdeci">const Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00282">event.h:282</a></div></div>
<div class="ttc" id="xml_8h_xhtml_ac6e06a790ddf60f0108718e37bb405ed"><div class="ttname"><a href="xml_8h.xhtml#ac6e06a790ddf60f0108718e37bb405ed">scram::ConstructDomParser</a></div><div class="ttdeci">std::unique_ptr&lt; xmlpp::DomParser &gt; ConstructDomParser(const std::string &amp;file_path)</div><div class="ttdoc">Initializes a DOM parser and converts library exceptions into local errors. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00044">xml.h:44</a></div></div>
<div class="ttc" id="event_8h_xhtml_a04cb31142e9883483951cba3ab63b597"><div class="ttname"><a href="event_8h.xhtml#a04cb31142e9883483951cba3ab63b597">scram::mef::GatePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Shared gates in models. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00115">event.h:115</a></div></div>
<div class="ttc" id="logger_8h_xhtml_afbc1fb2843a8415445a0528c5212eeb9"><div class="ttname"><a href="logger_8h.xhtml#afbc1fb2843a8415445a0528c5212eeb9">DUR</a></div><div class="ttdeci">#define DUR(var)</div><div class="ttdoc">Calculates the time duration since the start of the clock in seconds. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00052">logger.h:52</a></div></div>
<div class="ttc" id="xml_8h_xhtml_a818b7826f3993c5ff58d45a237274285"><div class="ttname"><a href="xml_8h.xhtml#a818b7826f3993c5ff58d45a237274285">scram::GetContent</a></div><div class="ttdeci">std::string GetContent(const xmlpp::TextNode *child_text)</div><div class="ttdoc">Returns Normalized content of an XML text node. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00097">xml.h:97</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Histogram_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Histogram.xhtml">scram::mef::Histogram</a></div><div class="ttdoc">Histogram distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random__deviate_8h_source.xhtml#l00204">random_deviate.h:204</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1MissionTime_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1MissionTime.xhtml">scram::mef::MissionTime</a></div><div class="ttdoc">The system mission time. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00061">constant.h:61</a></div></div>
<div class="ttc" id="expression_8h_xhtml_ab9dbdff6bf14cfe7ba12a4490a80cff3"><div class="ttname"><a href="expression_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">scram::mef::kUnitsToString</a></div><div class="ttdeci">const char *const kUnitsToString[]</div><div class="ttdoc">String representations of the Units in the same order as the enum. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00153">expression.h:153</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_ae433446a44a3ae40ec411b08916ec4ca"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#ae433446a44a3ae40ec411b08916ec4ca">scram::mef::NodeMark::mark</a></div><div class="ttdeci">Mark mark() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00215">element.h:215</a></div></div>
<div class="ttc" id="logger_8h_xhtml"><div class="ttname"><a href="logger_8h.xhtml">logger.h</a></div><div class="ttdoc">Logging capability for various purposes, such as warnings and debugging. </div></div>
<div class="ttc" id="classscram_1_1Error_xhtml_a35818dcc7c8dde101d4fd117adf47bc3"><div class="ttname"><a href="classscram_1_1Error.xhtml#a35818dcc7c8dde101d4fd117adf47bc3">scram::Error::msg</a></div><div class="ttdeci">const std::string &amp; msg() const </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00046">error.h:46</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a723878c7c836a52cf9edb5c8d1a37868"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a723878c7c836a52cf9edb5c8d1a37868">scram::mef::CcfGroup::AddDistribution</a></div><div class="ttdeci">void AddDistribution(const ExpressionPtr &amp;distr)</div><div class="ttdoc">Adds the distribution that describes the probability of basic events in this CCF group. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00048">ccf_group.cc:48</a></div></div>
<div class="ttc" id="event_8h_xhtml_a909e412c9ddc25648f5b9b6d942bdca9"><div class="ttname"><a href="event_8h.xhtml#a909e412c9ddc25648f5b9b6d942bdca9">scram::mef::kOperatorToString</a></div><div class="ttdeci">const char *const kOperatorToString[]</div><div class="ttdoc">String representations of the operators. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00321">event.h:321</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a243f57b581bfa385b985d0b47bdfe114"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a243f57b581bfa385b985d0b47bdfe114">scram::mef::Formula::AddArgument</a></div><div class="ttdeci">void AddArgument(const HouseEventPtr &amp;event)</div><div class="ttdoc">Adds an event into the arguments list. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00375">event.h:375</a></div></div>
<div class="ttc" id="exponential_8h_xhtml"><div class="ttname"><a href="exponential_8h.xhtml">exponential.h</a></div><div class="ttdoc">Expressions and distributions that are described with exponential formulas. </div></div>
<div class="ttc" id="initializer_8h_xhtml"><div class="ttname"><a href="initializer_8h.xhtml">initializer.h</a></div><div class="ttdoc">A facility that processes input files into analysis constructs. </div></div>
<div class="ttc" id="structscram_1_1mef_1_1Attribute_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Attribute.xhtml">scram::mef::Attribute</a></div><div class="ttdoc">This struct allows any attribute. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00038">element.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml_a28efcb56b18aa4d5e58c3f25d17dd813"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml#a28efcb56b18aa4d5e58c3f25d17dd813">scram::mef::ConstantExpression::kZero</a></div><div class="ttdeci">static const ExpressionPtr kZero</div><div class="ttdoc">Constant 0 or False. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00033">constant.h:33</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml_a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml#a366c22cd8080cfc932d1fd46de4a31d2aecfb3c8be880731fa9cd4ea677c85ec1">scram::mef::NodeMark::kClear</a></div><div class="ttdoc">Implicit conversion to Boolean false. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00209">element.h:209</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_adb8cb22814af1f414bb264655e3bfe79"><div class="ttname"><a href="boolean__graph_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a></div><div class="ttdeci">std::string begin</div><div class="ttdoc">Beginning of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00845">boolean_graph.cc:845</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml_a8538f816ccf630916e93bd1432fa07d6"><div class="ttname"><a href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">scram::mef::FaultTreePtr</a></div><div class="ttdeci">std::unique_ptr&lt; FaultTree &gt; FaultTreePtr</div><div class="ttdoc">Unique trees in models. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00200">fault_tree.h:200</a></div></div>
<div class="ttc" id="parameter_8h_xhtml_ad02b8dbf956c6c94b34ce9a703d7b408"><div class="ttname"><a href="parameter_8h.xhtml#ad02b8dbf956c6c94b34ce9a703d7b408">scram::mef::ParameterPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Parameter &gt; ParameterPtr</div><div class="ttdoc">Shared parameters. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00088">parameter.h:88</a></div></div>
<div class="ttc" id="structscram_1_1CycleError_xhtml"><div class="ttname"><a href="structscram_1_1CycleError.xhtml">scram::CycleError</a></div><div class="ttdoc">Signals unacceptable cycles in invalid structures. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00084">error.h:84</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml_aa3e2d564faa05a384d1fe531328c272a"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml#aa3e2d564faa05a384d1fe531328c272a">scram::mef::ConstantExpression::kOne</a></div><div class="ttdeci">static const ExpressionPtr kOne</div><div class="ttdoc">Constant 1 or True. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00032">constant.h:32</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a96be4497b7269c094864d096ee0c789c"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a96be4497b7269c094864d096ee0c789c">scram::mef::Component::AddCcfGroup</a></div><div class="ttdeci">void AddCcfGroup(const CcfGroupPtr &amp;ccf_group)</div><div class="ttdoc">Adds a CCF group and its members into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00051">fault_tree.cc:51</a></div></div>
<div class="ttc" id="xml_8h_xhtml_ab908f9834f69be3009ee07445b51a673"><div class="ttname"><a href="xml_8h.xhtml#ab908f9834f69be3009ee07445b51a673">scram::XmlElement</a></div><div class="ttdeci">const xmlpp::Element * XmlElement(const xmlpp::Node *node)</div><div class="ttdoc">Helper function to statically cast to XML element. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00060">xml.h:60</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="random__deviate_8h_xhtml"><div class="ttname"><a href="random__deviate_8h.xhtml">random_deviate.h</a></div><div class="ttdoc">A collection of deviate expressions with random distributions sampled at run-time. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Parameter_xhtml_a20dae114ae08bde6eb550db6745a16cc"><div class="ttname"><a href="classscram_1_1mef_1_1Parameter.xhtml#a20dae114ae08bde6eb550db6745a16cc">scram::mef::Parameter::expression</a></div><div class="ttdeci">void expression(const ExpressionPtr &amp;expression)</div><div class="ttdoc">Sets the expression of this parameter. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8cc_source.xhtml#l00038">parameter.cc:38</a></div></div>
<div class="ttc" id="event_8h_xhtml_a4ebd6466b2d3ea77c0780af19d75adb9"><div class="ttname"><a href="event_8h.xhtml#a4ebd6466b2d3ea77c0780af19d75adb9">scram::mef::HouseEventPtr</a></div><div class="ttdeci">std::shared_ptr&lt; HouseEvent &gt; HouseEventPtr</div><div class="ttdoc">Shared house events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00253">event.h:253</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abeb0d7efda63e877e150f54719da1ba8"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abeb0d7efda63e877e150f54719da1ba8">scram::mef::Gate::Validate</a></div><div class="ttdeci">void Validate() const </div><div class="ttdoc">Checks if a gate is initialized correctly. </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00043">event.cc:43</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a13bc34265c377d54084bda85de38e5ef"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a13bc34265c377d54084bda85de38e5ef">scram::mef::Component::AddGate</a></div><div class="ttdeci">void AddGate(const GatePtr &amp;gate)</div><div class="ttdoc">Adds a gate into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00033">fault_tree.cc:33</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml">scram::mef::Initializer</a></div><div class="ttdoc">This class operates on input files to initialize analysis constructs like models, fault trees...</div><div class="ttdef"><b>Definition:</b> <a href="initializer_8h_source.xhtml#l00052">initializer.h:52</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aba7b09d6e8fbe414c23705ad24dde6ff"><div class="ttname"><a href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a></div><div class="ttdeci">#define LOG(level)</div><div class="ttdoc">Logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00055">logger.h:55</a></div></div>
<div class="ttc" id="event_8h_xhtml_a014b1b08212f876b5f342bb4b52e3d39"><div class="ttname"><a href="event_8h.xhtml#a014b1b08212f876b5f342bb4b52e3d39">scram::mef::BasicEventPtr</a></div><div class="ttdeci">std::shared_ptr&lt; BasicEvent &gt; BasicEventPtr</div><div class="ttdoc">Shared basic events. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00254">event.h:254</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_ad5906432084ef153b708dbe77307d4f9"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#ad5906432084ef153b708dbe77307d4f9">scram::mef::Element::AddAttribute</a></div><div class="ttdeci">void AddAttribute(Attribute attr)</div><div class="ttdoc">Adds an attribute to the attribute map. </div><div class="ttdef"><b>Definition:</b> <a href="element_8cc_source.xhtml#l00048">element.cc:48</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a87e90b86d7599c2f60d7a7b99ab52d20"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">scram::mef::Element::label</a></div><div class="ttdeci">const std::string &amp; label() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00066">element.h:66</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a1be65078ba5109830655771471d0cdf5"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a1be65078ba5109830655771471d0cdf5">scram::mef::Component::AddBasicEvent</a></div><div class="ttdeci">void AddBasicEvent(const BasicEventPtr &amp;basic_event)</div><div class="ttdoc">Adds a basic event into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00037">fault_tree.cc:37</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00262">event.h:262</a></div></div>
<div class="ttc" id="element_8h_xhtml_a8b010dadcc37f6b3d3076e3d1a0c3ee0"><div class="ttname"><a href="element_8h.xhtml#a8b010dadcc37f6b3d3076e3d1a0c3ee0">scram::mef::RoleSpecifier</a></div><div class="ttdeci">RoleSpecifier</div><div class="ttdoc">Role, access attributes for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00127">element.h:127</a></div></div>
<div class="ttc" id="cycle_8h_xhtml"><div class="ttname"><a href="cycle_8h.xhtml">cycle.h</a></div><div class="ttdoc">Validation facilities to detect and print cycles in graphs. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1ConstantExpression_xhtml_a6b51863cacb5f42db2b3a7b0ec1e1e76"><div class="ttname"><a href="classscram_1_1mef_1_1ConstantExpression.xhtml#a6b51863cacb5f42db2b3a7b0ec1e1e76">scram::mef::ConstantExpression::kPi</a></div><div class="ttdeci">static const ExpressionPtr kPi</div><div class="ttdoc">Constant PI value. </div><div class="ttdef"><b>Definition:</b> <a href="constant_8h_source.xhtml#l00034">constant.h:34</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_adbe388b7612beddb5d1646805343b4c3"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#adbe388b7612beddb5d1646805343b4c3">scram::mef::BasicEvent::expression</a></div><div class="ttdeci">void expression(const ExpressionPtr &amp;expression)</div><div class="ttdoc">Sets the expression of this basic event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00127">event.h:127</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01Histogram_00-1_01_4_xhtml_ac0e94ff09dd707d3c253937a172e7fc7"><div class="ttname"><a href="structscram_1_1mef_1_1Initializer_1_1Extractor_3_01Histogram_00-1_01_4.xhtml#ac0e94ff09dd707d3c253937a172e7fc7">scram::mef::Initializer::Extractor&lt; Histogram,-1 &gt;::operator()</a></div><div class="ttdeci">std::shared_ptr&lt; Histogram &gt; operator()(const xmlpp::NodeSet &amp;args, const std::string &amp;base_path, Initializer *init)</div><div class="ttdoc">Constructs Histogram deviate expression expression arguments in XML elements. </div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00640">initializer.cc:640</a></div></div>
<div class="ttc" id="ccf__group_8h_xhtml_a2736f823d103bed2d002c9ce6f0c217c"><div class="ttname"><a href="ccf__group_8h.xhtml#a2736f823d103bed2d002c9ce6f0c217c">scram::mef::CcfGroupPtr</a></div><div class="ttdeci">std::shared_ptr&lt; CcfGroup &gt; CcfGroupPtr</div><div class="ttdoc">Shared CCF groups. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00164">ccf_group.h:164</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00062">element.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FaultTree_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1FaultTree.xhtml">scram::mef::FaultTree</a></div><div class="ttdoc">Fault tree representation as a container of gates, basic and house events, and other information...</div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00161">fault_tree.h:161</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00048">element.h:48</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea064d45d966cf5368bd8a5e317e65a0e6">scram::DEBUG2</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG1. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00073">logger.h:73</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a8321bf4372a0575c88b7162716469d15"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a8321bf4372a0575c88b7162716469d15">scram::mef::CcfGroup::AddMember</a></div><div class="ttdeci">void AddMember(const BasicEventPtr &amp;basic_event)</div><div class="ttdoc">Adds a basic event into this CCF group. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8cc_source.xhtml#l00036">ccf_group.cc:36</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Settings_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Settings.xhtml">scram::core::Settings</a></div><div class="ttdoc">Builder for analysis settings. </div><div class="ttdef"><b>Definition:</b> <a href="settings_8h_source.xhtml#l00037">settings.h:37</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8501f67861832d9efa717e17010648f5"><div class="ttname"><a href="logger_8h.xhtml#a8501f67861832d9efa717e17010648f5">CLOCK</a></div><div class="ttdeci">#define CLOCK(var)</div><div class="ttdoc">Starts the timing in nanoseconds. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00047">logger.h:47</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml_ad5409b17f257599c4dd852533a4f289a"><div class="ttname"><a href="fault__tree_8h.xhtml#ad5409b17f257599c4dd852533a4f289a">scram::mef::ComponentPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Component &gt; ComponentPtr</div><div class="ttdoc">Unique system components. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00155">fault_tree.h:155</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Div_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Div.xhtml">scram::mef::Div</a></div><div class="ttdoc">This expression performs division operation. </div><div class="ttdef"><b>Definition:</b> <a href="arithmetic_8h_source.xhtml#l00161">arithmetic.h:161</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml_a613678c7f9dd37c42239cd7988b2c259"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml#a613678c7f9dd37c42239cd7988b2c259">scram::mef::CcfGroup::AddFactor</a></div><div class="ttdeci">void AddFactor(const ExpressionPtr &amp;factor, int level)</div><div class="ttdoc">Adds a CCF factor for the specified model. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00095">ccf_group.h:95</a></div></div>
<div class="ttc" id="xml_8h_xhtml_a0c5491388e25d1f1badb26b56ef302e7"><div class="ttname"><a href="xml_8h.xhtml#a0c5491388e25d1f1badb26b56ef302e7">scram::GetAttributeValue</a></div><div class="ttdeci">std::string GetAttributeValue(const xmlpp::Element *element, const std::string &amp;attribute_name)</div><div class="ttdoc">Returns Normalized (trimmed) string value of an XML element attribute. </div><div class="ttdef"><b>Definition:</b> <a href="xml_8h_source.xhtml#l00065">xml.h:65</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00049">expression.h:49</a></div></div>
<div class="ttc" id="env_8h_xhtml"><div class="ttname"><a href="env_8h.xhtml">env.h</a></div><div class="ttdoc">Environmental Variables. </div></div>
<div class="ttc" id="structscram_1_1InvalidArgument_xhtml"><div class="ttname"><a href="structscram_1_1InvalidArgument.xhtml">scram::InvalidArgument</a></div><div class="ttdoc">This error class can be used to indicate unacceptable arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00095">error.h:95</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00257">event.h:257</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_ab91a51488ee8c4ed054de1e8450c8a59"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#ab91a51488ee8c4ed054de1e8450c8a59">scram::mef::Role::base_path</a></div><div class="ttdeci">const std::string &amp; base_path() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00150">element.h:150</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CcfGroup_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CcfGroup.xhtml">scram::mef::CcfGroup</a></div><div class="ttdoc">Abstract base class for all common cause failure models. </div><div class="ttdef"><b>Definition:</b> <a href="ccf__group_8h_source.xhtml#l00043">ccf_group.h:43</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a488d363190a84f20f7a5ffac34e9fb8d"><div class="ttname"><a href="expression_8h.xhtml#a488d363190a84f20f7a5ffac34e9fb8d">scram::mef::kNumUnits</a></div><div class="ttdeci">const int kNumUnits</div><div class="ttdoc">The number of elements in the Units enum. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00150">expression.h:150</a></div></div>
<div class="ttc" id="structscram_1_1ValidationError_xhtml"><div class="ttname"><a href="structscram_1_1ValidationError.xhtml">scram::ValidationError</a></div><div class="ttdoc">For validating input parameters or user arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00069">error.h:69</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Initializer_1_1Extractor_xhtml_ae29f35dea83c6f8ad98ace2bcf98e6ea"><div class="ttname"><a href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml#ae29f35dea83c6f8ad98ace2bcf98e6ea">scram::mef::Initializer::Extractor::operator()</a></div><div class="ttdeci">std::shared_ptr&lt; T &gt; operator()(const xmlpp::NodeSet &amp;args, const std::string &amp;base_path, Initializer *init, Ts &amp;&amp;...expressions)</div><div class="ttdoc">Extracts and accumulates expressions to be passed to the constructor of expression T...</div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00575">initializer.cc:575</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_af39cf695b8aff1bbc17ee6545e3b33f2"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#af39cf695b8aff1bbc17ee6545e3b33f2">scram::mef::Component::AddHouseEvent</a></div><div class="ttdeci">void AddHouseEvent(const HouseEventPtr &amp;house_event)</div><div class="ttdoc">Adds a house event into this component container. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8cc_source.xhtml#l00041">fault_tree.cc:41</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Parameter_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Parameter.xhtml">scram::mef::Parameter</a></div><div class="ttdoc">This class provides a representation of a variable in basic event description. </div><div class="ttdef"><b>Definition:</b> <a href="parameter_8h_source.xhtml#l00036">parameter.h:36</a></div></div>
<div class="ttc" id="structscram_1_1mef_1_1Initializer_1_1Extractor_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Initializer_1_1Extractor.xhtml">scram::mef::Initializer::Extractor</a></div><div class="ttdef"><b>Definition:</b> <a href="initializer_8cc_source.xhtml#l00560">initializer.cc:560</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
