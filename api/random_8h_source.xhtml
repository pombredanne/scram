<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>random.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">random.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="random_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file random.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Contains helpers for randomness simulations.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_RANDOM_H_</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define SCRAM_SRC_RANDOM_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;boost/random/beta_distribution.hpp&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;boost/random/triangle_distribution.hpp&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">/// This class contains generators for various random distributions.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">/// The values passed to the member functions are asserted</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">/// to be in the correct form.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">/// In other words, the user should make sure</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/// that the passed parameters are valid.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/// For example, standard deviation cannot be negative.</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// This facility wraps the engine and distributions.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// It provides convenience and reproducibility for the whole analysis.</span></div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml">   43</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1Random.xhtml">Random</a> {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">  /// Sets the seed of the underlying random number generator.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">  /// @param[in] seed  The seed for RNGs.</span></div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#afef05703779a8c2b5b44ba7315dd88a2">   48</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1Random.xhtml#afef05703779a8c2b5b44ba7315dd88a2">seed</a>(<span class="keywordtype">int</span> <a class="code" href="classscram_1_1Random.xhtml#afef05703779a8c2b5b44ba7315dd88a2">seed</a>) noexcept {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Random::rng_.seed(static_cast&lt;unsigned&gt;(<a class="code" href="classscram_1_1Random.xhtml#afef05703779a8c2b5b44ba7315dd88a2">seed</a>));</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">  /// RNG from a uniform distribution.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">  /// @param[in] lower  Lower bound.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">  /// @param[in] upper  Upper bound.</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#a51c179761b8f16011c284a5bcf0b2ba2">   58</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#a51c179761b8f16011c284a5bcf0b2ba2">UniformRealGenerator</a>(<span class="keywordtype">double</span> lower, <span class="keywordtype">double</span> upper) noexcept {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    assert(lower &lt; upper);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> std::uniform_real_distribution&lt;&gt;(lower, upper)(rng_);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">  /// RNG from a triangular distribution.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">  /// @param[in] lower  Lower bound.</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">  /// @param[in] mode  The peak of the distribution.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">  /// @param[in] upper  Upper bound.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#aa3a7c2bc1b345baae1410b9fa114a042">   70</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#aa3a7c2bc1b345baae1410b9fa114a042">TriangularGenerator</a>(<span class="keywordtype">double</span> lower, <span class="keywordtype">double</span> mode,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                    <span class="keywordtype">double</span> upper) noexcept {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    assert(lower &lt; mode);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    assert(mode &lt; upper);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> boost::random::triangle_distribution&lt;&gt;(lower, mode, upper)(rng_);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  /// RNG from a piecewise linear distribution.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">  /// @tparam IteratorB  Input iterator of interval boundaries returning double.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">  /// @tparam IteratorW  Input iterator of weights returning double.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">  /// @param[in] first_b  The begin of the interval boundaries.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">  /// @param[in] last_b  The sentinel end of the interval boundaries.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">  /// @param[in] first_w  The begin of the interval weights.</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">  /// @pre Interval points for the distribution must be strictly increasing.</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  /// @pre The number of weights must be equal to</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">  ///      the number of intervals (boundaries - 1).</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  ///      Extra weights are ignored.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> IteratorB, <span class="keyword">class</span> IteratorW&gt;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#abcbe1eb198bd24f194668ff27add48d3">   94</a></span>&#160;  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#abcbe1eb198bd24f194668ff27add48d3">PiecewiseLinearGenerator</a>(IteratorB first_b, IteratorB last_b,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                         IteratorW first_w) noexcept {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> std::piecewise_linear_distribution&lt;&gt;(first_b, last_b, first_w)(rng_);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">  /// RNG from a histogram distribution.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">  /// @tparam IteratorB  Input iterator of interval boundaries returning double.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">  /// @tparam IteratorW  Input iterator of weights returning double.</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">  /// @param[in] first_b  The begin of the interval boundaries.</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">  /// @param[in] last_b  The sentinel end of the interval boundaries.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">  /// @param[in] first_w  The begin of the interval weights.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  /// @returns A sampled value from the interval.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">  /// @pre Interval points for the distribution must be strictly increasing.</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">  /// @pre The number of weights must be equal to</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  ///      the number of intervals (boundaries - 1).</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">  ///      Extra weights are ignored.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> IteratorB, <span class="keyword">class</span> IteratorW&gt;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#ac3f26db781050f64356af4f369646e67">  116</a></span>&#160;  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#ac3f26db781050f64356af4f369646e67">HistogramGenerator</a>(IteratorB first_b, IteratorB last_b,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                   IteratorW first_w) noexcept {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    std::piecewise_constant_distribution&lt;&gt; dist(first_b, last_b, first_w);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> dist(rng_);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">  /// RNG from a discrete distribution.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">  /// @tparam Iterator  Input iterator of weights returning double.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">  /// @param[in] first1  The begin of the interval weights.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">  /// @param[in] last1  The sentinel end of the interval weights.</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">  /// @returns Integer in the range [0, n).</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> Iterator&gt;</div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#af7ec1befa8fd6c679942f85911c85ec8">  131</a></span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classscram_1_1Random.xhtml#af7ec1befa8fd6c679942f85911c85ec8">DiscreteGenerator</a>(Iterator first1, Iterator last1) noexcept {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">return</span> std::discrete_distribution&lt;&gt;(first1, last1)(rng_);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">  /// RNG from a Binomial distribution.</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">  /// @param[in] n  Number of trials.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">  /// @param[in] p  Probability of success.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">  /// @returns The number of successes.</span></div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#a5d9deb0caa714def33d25c9bcdee1c19">  141</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classscram_1_1Random.xhtml#a5d9deb0caa714def33d25c9bcdee1c19">BinomialGenerator</a>(<span class="keywordtype">int</span> n, <span class="keywordtype">double</span> p) noexcept {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">return</span> std::binomial_distribution&lt;&gt;(n, p)(rng_);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">  /// RNG from a normal distribution.</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">  /// @param[in] mean  The mean of the distribution.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">  /// @param[in] sigma  The standard deviation of the distribution.</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#a48db980c126c418dd547c2fea7d49962">  151</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#a48db980c126c418dd547c2fea7d49962">NormalGenerator</a>(<span class="keywordtype">double</span> mean, <span class="keywordtype">double</span> sigma) noexcept {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    assert(sigma &gt;= 0);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">return</span> std::normal_distribution&lt;&gt;(mean, sigma)(rng_);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">  /// RNG from a lognormal distribution.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">  /// @param[in] m  The m location parameter of the distribution.</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">  /// @param[in] s  The s scale factor of the distribution.</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#a8c06842e494b989786dc196284e78b05">  162</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#a8c06842e494b989786dc196284e78b05">LogNormalGenerator</a>(<span class="keywordtype">double</span> m, <span class="keywordtype">double</span> s) noexcept {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    assert(s &gt;= 0);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">return</span> std::lognormal_distribution&lt;&gt;(m, s)(rng_);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">  /// RNG from a Gamma distribution.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">  /// @param[in] k  Shape parameter of Gamma distribution.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">  /// @param[in] theta  Scale parameter of Gamma distribution.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">  /// @note The rate parameter is 1/theta,</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">  ///       so for alpha/beta system,</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">  ///       pass 1/beta as a second parameter for this generator.</span></div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#ac70a7248ce1258d1fbee8c316717ac2b">  177</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#ac70a7248ce1258d1fbee8c316717ac2b">GammaGenerator</a>(<span class="keywordtype">double</span> k, <span class="keywordtype">double</span> theta) noexcept {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    assert(k &gt; 0);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    assert(theta &gt; 0);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> std::gamma_distribution&lt;&gt;(k)(rng_) * theta;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">  /// RNG from a Beta distribution.</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">  /// @param[in] alpha  Alpha shape parameter of Beta distribution.</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">  /// @param[in] beta  Beta shape parameter of Beta distribution.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#a0c493e04d7d5b75b4a5a6aeed776d799">  189</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#a0c493e04d7d5b75b4a5a6aeed776d799">BetaGenerator</a>(<span class="keywordtype">double</span> alpha, <span class="keywordtype">double</span> beta) noexcept {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    assert(alpha &gt; 0);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    assert(beta &gt; 0);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">return</span> boost::random::beta_distribution&lt;&gt;(alpha, beta)(rng_);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">  /// RNG from a Weibull distribution.</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">  /// @param[in] k  Shape parameter of Weibull distribution.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">  /// @param[in] lambda  Scale parameter of Weibull distribution.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#aa11d078731f4d99092e7ab5223ba153b">  201</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#aa11d078731f4d99092e7ab5223ba153b">WeibullGenerator</a>(<span class="keywordtype">double</span> k, <span class="keywordtype">double</span> lambda) noexcept {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    assert(k &gt; 0);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    assert(lambda &gt; 0);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">return</span> std::weibull_distribution&lt;&gt;(k, lambda)(rng_);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">  /// RNG from an Exponential distribution.</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">  /// @param[in] lambda  Rate parameter of Exponential distribution.</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#a24b377c7c2e12b4d957614a2a9458411">  212</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#a24b377c7c2e12b4d957614a2a9458411">ExponentialGenerator</a>(<span class="keywordtype">double</span> lambda) noexcept {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    assert(lambda &gt; 0);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> std::exponential_distribution&lt;&gt;(lambda)(rng_);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">  /// RNG from a Poisson distribution.</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">  /// @param[in] mean  The mean value for Poisson distribution.</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#a1c23ec911a3cdcd9ae05e4acdd04038a">  222</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classscram_1_1Random.xhtml#a1c23ec911a3cdcd9ae05e4acdd04038a">PoissonGenerator</a>(<span class="keywordtype">int</span> mean) noexcept {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    assert(mean &gt; 0);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">return</span> std::poisson_distribution&lt;&gt;(mean)(rng_);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">  /// RNG from a log-uniform distribution.</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">  /// @param[in] lower  Lower bound.</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">  /// @param[in] upper  Upper bound.</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#abc4534c5ce4201d29c1155971e7ff057">  233</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#abc4534c5ce4201d29c1155971e7ff057">LogUniformGenerator</a>(<span class="keywordtype">double</span> lower, <span class="keywordtype">double</span> upper) noexcept {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> std::exp(<a class="code" href="classscram_1_1Random.xhtml#a51c179761b8f16011c284a5bcf0b2ba2">UniformRealGenerator</a>(lower, upper));</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">  /// RNG from a log-triangular distribution.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">  /// @param[in] lower  Lower bound.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">  /// @param[in] mode  The peak of the distribution.</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">  /// @param[in] upper  Upper bound.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">  /// @returns A sampled value.</span></div><div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="classscram_1_1Random.xhtml#ae249c88768d0ca4f1cd8b532bd02295a">  244</a></span>&#160;<span class="comment"></span>  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1Random.xhtml#ae249c88768d0ca4f1cd8b532bd02295a">LogTriangularGenerator</a>(<span class="keywordtype">double</span> lower, <span class="keywordtype">double</span> mode,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                       <span class="keywordtype">double</span> upper) noexcept {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">return</span> std::exp(<a class="code" href="classscram_1_1Random.xhtml#aa3a7c2bc1b345baae1410b9fa114a042">TriangularGenerator</a>(lower, mode, upper));</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  <span class="keyword">static</span> std::mt19937 rng_;  <span class="comment">///&lt; The random number generator.</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_RANDOM_H_</span></div><div class="ttc" id="classscram_1_1Random_xhtml_aa11d078731f4d99092e7ab5223ba153b"><div class="ttname"><a href="classscram_1_1Random.xhtml#aa11d078731f4d99092e7ab5223ba153b">scram::Random::WeibullGenerator</a></div><div class="ttdeci">static double WeibullGenerator(double k, double lambda) noexcept</div><div class="ttdoc">RNG from a Weibull distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00201">random.h:201</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml"><div class="ttname"><a href="classscram_1_1Random.xhtml">scram::Random</a></div><div class="ttdoc">This class contains generators for various random distributions. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00043">random.h:43</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a24b377c7c2e12b4d957614a2a9458411"><div class="ttname"><a href="classscram_1_1Random.xhtml#a24b377c7c2e12b4d957614a2a9458411">scram::Random::ExponentialGenerator</a></div><div class="ttdeci">static double ExponentialGenerator(double lambda) noexcept</div><div class="ttdoc">RNG from an Exponential distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00212">random.h:212</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a8c06842e494b989786dc196284e78b05"><div class="ttname"><a href="classscram_1_1Random.xhtml#a8c06842e494b989786dc196284e78b05">scram::Random::LogNormalGenerator</a></div><div class="ttdeci">static double LogNormalGenerator(double m, double s) noexcept</div><div class="ttdoc">RNG from a lognormal distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00162">random.h:162</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a0c493e04d7d5b75b4a5a6aeed776d799"><div class="ttname"><a href="classscram_1_1Random.xhtml#a0c493e04d7d5b75b4a5a6aeed776d799">scram::Random::BetaGenerator</a></div><div class="ttdeci">static double BetaGenerator(double alpha, double beta) noexcept</div><div class="ttdoc">RNG from a Beta distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00189">random.h:189</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_ae249c88768d0ca4f1cd8b532bd02295a"><div class="ttname"><a href="classscram_1_1Random.xhtml#ae249c88768d0ca4f1cd8b532bd02295a">scram::Random::LogTriangularGenerator</a></div><div class="ttdeci">static double LogTriangularGenerator(double lower, double mode, double upper) noexcept</div><div class="ttdoc">RNG from a log-triangular distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00244">random.h:244</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a1c23ec911a3cdcd9ae05e4acdd04038a"><div class="ttname"><a href="classscram_1_1Random.xhtml#a1c23ec911a3cdcd9ae05e4acdd04038a">scram::Random::PoissonGenerator</a></div><div class="ttdeci">static int PoissonGenerator(int mean) noexcept</div><div class="ttdoc">RNG from a Poisson distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00222">random.h:222</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_afef05703779a8c2b5b44ba7315dd88a2"><div class="ttname"><a href="classscram_1_1Random.xhtml#afef05703779a8c2b5b44ba7315dd88a2">scram::Random::seed</a></div><div class="ttdeci">static void seed(int seed) noexcept</div><div class="ttdoc">Sets the seed of the underlying random number generator. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00048">random.h:48</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_aa3a7c2bc1b345baae1410b9fa114a042"><div class="ttname"><a href="classscram_1_1Random.xhtml#aa3a7c2bc1b345baae1410b9fa114a042">scram::Random::TriangularGenerator</a></div><div class="ttdeci">static double TriangularGenerator(double lower, double mode, double upper) noexcept</div><div class="ttdoc">RNG from a triangular distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00070">random.h:70</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_abc4534c5ce4201d29c1155971e7ff057"><div class="ttname"><a href="classscram_1_1Random.xhtml#abc4534c5ce4201d29c1155971e7ff057">scram::Random::LogUniformGenerator</a></div><div class="ttdeci">static double LogUniformGenerator(double lower, double upper) noexcept</div><div class="ttdoc">RNG from a log-uniform distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00233">random.h:233</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a48db980c126c418dd547c2fea7d49962"><div class="ttname"><a href="classscram_1_1Random.xhtml#a48db980c126c418dd547c2fea7d49962">scram::Random::NormalGenerator</a></div><div class="ttdeci">static double NormalGenerator(double mean, double sigma) noexcept</div><div class="ttdoc">RNG from a normal distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00151">random.h:151</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a51c179761b8f16011c284a5bcf0b2ba2"><div class="ttname"><a href="classscram_1_1Random.xhtml#a51c179761b8f16011c284a5bcf0b2ba2">scram::Random::UniformRealGenerator</a></div><div class="ttdeci">static double UniformRealGenerator(double lower, double upper) noexcept</div><div class="ttdoc">RNG from a uniform distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00058">random.h:58</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_a5d9deb0caa714def33d25c9bcdee1c19"><div class="ttname"><a href="classscram_1_1Random.xhtml#a5d9deb0caa714def33d25c9bcdee1c19">scram::Random::BinomialGenerator</a></div><div class="ttdeci">static int BinomialGenerator(int n, double p) noexcept</div><div class="ttdoc">RNG from a Binomial distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00141">random.h:141</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_ac70a7248ce1258d1fbee8c316717ac2b"><div class="ttname"><a href="classscram_1_1Random.xhtml#ac70a7248ce1258d1fbee8c316717ac2b">scram::Random::GammaGenerator</a></div><div class="ttdeci">static double GammaGenerator(double k, double theta) noexcept</div><div class="ttdoc">RNG from a Gamma distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00177">random.h:177</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_af7ec1befa8fd6c679942f85911c85ec8"><div class="ttname"><a href="classscram_1_1Random.xhtml#af7ec1befa8fd6c679942f85911c85ec8">scram::Random::DiscreteGenerator</a></div><div class="ttdeci">static int DiscreteGenerator(Iterator first1, Iterator last1) noexcept</div><div class="ttdoc">RNG from a discrete distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00131">random.h:131</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_abcbe1eb198bd24f194668ff27add48d3"><div class="ttname"><a href="classscram_1_1Random.xhtml#abcbe1eb198bd24f194668ff27add48d3">scram::Random::PiecewiseLinearGenerator</a></div><div class="ttdeci">static double PiecewiseLinearGenerator(IteratorB first_b, IteratorB last_b, IteratorW first_w) noexcept</div><div class="ttdoc">RNG from a piecewise linear distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00094">random.h:94</a></div></div>
<div class="ttc" id="classscram_1_1Random_xhtml_ac3f26db781050f64356af4f369646e67"><div class="ttname"><a href="classscram_1_1Random.xhtml#ac3f26db781050f64356af4f369646e67">scram::Random::HistogramGenerator</a></div><div class="ttdeci">static double HistogramGenerator(IteratorB first_b, IteratorB last_b, IteratorW first_w) noexcept</div><div class="ttdoc">RNG from a histogram distribution. </div><div class="ttdef"><b>Definition:</b> <a href="random_8h_source.xhtml#l00116">random.h:116</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
