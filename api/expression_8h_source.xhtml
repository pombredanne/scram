<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>expression.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">expression.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="expression_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file expression.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Provides the base class for all expressions</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// and units for expression values.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_EXPRESSION_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#define SCRAM_SRC_EXPRESSION_H_</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;boost/noncopyable.hpp&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">class </span>Expression;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">   38</a></span>&#160;<span class="keyword">using</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a> = std::shared_ptr&lt;Expression&gt;;  <span class="comment">///&lt; Shared expressions.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>;  <span class="comment">// Needs to handle cycles.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// Abstract base class for all sorts of expressions to describe events.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/// This class also acts like a connector for parameter nodes</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/// and may create cycles.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/// Expressions are not expected to be shared</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// except for parameters.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">/// In addition, expressions are not expected to be changed</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/// after validation phases.</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml">   49</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a> : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">  /// Provides access to cycle-destructive functions.</span></div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression_1_1Cycle.xhtml">   52</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Expression_1_1Cycle.xhtml">Cycle</a> {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Initializer.xhtml">Initializer</a>;  <span class="comment">// Only Initializer needs the functionality.</span><span class="comment"></span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">    /// Breaks connections with expression arguments.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">    /// @param[in,out] parameter  A parameter node in possible cycles.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">    ///                           The type is not declared ``Parameter``</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">    ///                           because the inheritance is not</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">    ///                           forward-declarable.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">    /// @post The parameter is in inconsistent, unusable state.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">    ///       Only destruction is guaranteed to succeed.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">    ///</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">    /// @todo Consider moving into Parameter class.</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> BreakConnections(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* parameter) {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      parameter-&gt;args_.clear();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  };</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">  /// Constructor for use by derived classes</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">  /// to register their arguments.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">  /// @param[in] args  Arguments of this expression.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#aef2f4141f74ba9c85ed29f7b97694a98">Expression</a>(std::vector&lt;ExpressionPtr&gt; <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">args</a>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  /// @returns A set of arguments of the expression.</span></div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">   79</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;ExpressionPtr&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">args</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> args_; }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  /// Validates the expression.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">  /// This late validation is due to parameters that are defined late.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">  /// @throws InvalidArgument  The arguments are invalid for setup.</span></div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#af3e09d926b52f6077aa85c26454c4e18">   85</a></span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af3e09d926b52f6077aa85c26454c4e18">Validate</a>()<span class="keyword"> const </span>{}</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// @returns The mean value of this expression.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>() noexcept = 0;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">  /// @returns A sampled value of this expression.</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>() noexcept;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">  /// This routine resets the sampling to get new values.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">  /// All the arguments are called to reset themselves.</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">  /// If this expression was not sampled,</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  /// its arguments are not going to get any calls.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ab6d31c4ddb5d4a827727829cbd4e4449">Reset</a>() noexcept;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">  /// Determines if the value of the expression varies.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">  /// The default logic is to check arguments with uncertainties for sampling.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">  /// Derived expression classes must decide</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">  /// if they don&#39;t have arguments,</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">  /// or if they are random deviates.</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">  /// @returns true if the expression&#39;s value does not need sampling.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">  /// @returns false if the expression&#39;s value has uncertainties.</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  /// @warning Improper registration of arguments</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  ///          may yield silent failure.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#abda9d5f97c43181cefd518e357bc0334">IsConstant</a>() noexcept;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">  /// @returns Maximum value of this expression.</span></div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">  113</a></span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">Max</a>() noexcept { <span class="keywordflow">return</span> this-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(); }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">  /// @returns Minimum value of this expression.</span></div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">  116</a></span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">Min</a>() noexcept { <span class="keywordflow">return</span> this-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">Mean</a>(); }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">  /// Registers an additional argument expression.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">  /// @param[in] arg  An argument expression used by this expression.</span></div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#ae7934df291c680fd99bdfe4090007543">  122</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ae7934df291c680fd99bdfe4090007543">AddArg</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">ExpressionPtr</a>&amp; arg) { args_.push_back(arg); }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">  /// Runs sampling of the expression.</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">  /// Derived concrete classes must provide the calculation.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">  /// @returns A sampled value of this expression.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">double</span> GetSample() noexcept = 0;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  std::vector&lt;ExpressionPtr&gt; args_;  <span class="comment">///&lt; Expression&#39;s arguments.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> sampled_value_;  <span class="comment">///&lt; The sampled value.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> sampled_;  <span class="comment">///&lt; Indication if the expression is already sampled.</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">/// Provides units for parameters.</span></div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#aa372d12117108ddbed987471d8b5334c">  137</a></span>&#160;<span class="comment"></span><span class="keyword">enum</span> <a class="code" href="expression_8h.xhtml#aa372d12117108ddbed987471d8b5334c">Units</a> : std::uint8_t {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  kUnitless = 0,</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  kBool,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  kInt,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  kFloat,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  kHours,</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  kInverseHours,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  kYears,</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  kInverseYears,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  kFit,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  kDemands</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;};</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#a488d363190a84f20f7a5ffac34e9fb8d">  150</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="expression_8h.xhtml#a488d363190a84f20f7a5ffac34e9fb8d">kNumUnits</a> = 10;  <span class="comment">///&lt; The number of elements in the Units enum.</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">/// String representations of the Units in the same order as the enum.</span></div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">  153</a></span>&#160;<span class="comment"></span><span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">kUnitsToString</a>[] = {<span class="stringliteral">&quot;unitless&quot;</span>, <span class="stringliteral">&quot;bool&quot;</span>,    <span class="stringliteral">&quot;int&quot;</span>,   <span class="stringliteral">&quot;float&quot;</span>,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                      <span class="stringliteral">&quot;hours&quot;</span>,    <span class="stringliteral">&quot;hours-1&quot;</span>, <span class="stringliteral">&quot;years&quot;</span>, <span class="stringliteral">&quot;years-1&quot;</span>,</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                      <span class="stringliteral">&quot;fit&quot;</span>,      <span class="stringliteral">&quot;demands&quot;</span>};</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_EXPRESSION_H_</span></div><div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac7e0dd118eafdfa943944172c1625a4e"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac7e0dd118eafdfa943944172c1625a4e">scram::mef::Expression::Mean</a></div><div class="ttdeci">virtual double Mean() noexcept=0</div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_af3e09d926b52f6077aa85c26454c4e18"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#af3e09d926b52f6077aa85c26454c4e18">scram::mef::Expression::Validate</a></div><div class="ttdeci">virtual void Validate() const </div><div class="ttdoc">Validates the expression. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00085">expression.h:85</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ab6d31c4ddb5d4a827727829cbd4e4449"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ab6d31c4ddb5d4a827727829cbd4e4449">scram::mef::Expression::Reset</a></div><div class="ttdeci">virtual void Reset() noexcept</div><div class="ttdoc">This routine resets the sampling to get new values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00041">expression.cc:41</a></div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Helper classes, structs, and properties common to all other classes. </div></div>
<div class="ttc" id="expression_8h_xhtml_a1834910c86a27726923fb285f73cd839"><div class="ttname"><a href="expression_8h.xhtml#a1834910c86a27726923fb285f73cd839">scram::mef::ExpressionPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Expression &gt; ExpressionPtr</div><div class="ttdoc">Shared expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00038">expression.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_1_1Cycle_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression_1_1Cycle.xhtml">scram::mef::Expression::Cycle</a></div><div class="ttdoc">Provides access to cycle-destructive functions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00052">expression.h:52</a></div></div>
<div class="ttc" id="expression_8h_xhtml_ab9dbdff6bf14cfe7ba12a4490a80cff3"><div class="ttname"><a href="expression_8h.xhtml#ab9dbdff6bf14cfe7ba12a4490a80cff3">scram::mef::kUnitsToString</a></div><div class="ttdeci">const char *const kUnitsToString[]</div><div class="ttdoc">String representations of the Units in the same order as the enum. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00153">expression.h:153</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ae7934df291c680fd99bdfe4090007543"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ae7934df291c680fd99bdfe4090007543">scram::mef::Expression::AddArg</a></div><div class="ttdeci">void AddArg(const ExpressionPtr &amp;arg)</div><div class="ttdoc">Registers an additional argument expression. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00122">expression.h:122</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ad4d7901b9be9105c9799167cac7af3e1"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ad4d7901b9be9105c9799167cac7af3e1">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; ExpressionPtr &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00079">expression.h:79</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a6b2d7f3d3abf98002c8cccee426edecc"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a6b2d7f3d3abf98002c8cccee426edecc">scram::mef::Expression::Max</a></div><div class="ttdeci">virtual double Max() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00113">expression.h:113</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a9601745b7f61ec67c8074a4043367152"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a9601745b7f61ec67c8074a4043367152">scram::mef::Expression::Min</a></div><div class="ttdeci">virtual double Min() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00116">expression.h:116</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_aef2f4141f74ba9c85ed29f7b97694a98"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#aef2f4141f74ba9c85ed29f7b97694a98">scram::mef::Expression::Expression</a></div><div class="ttdeci">Expression(std::vector&lt; ExpressionPtr &gt; args)</div><div class="ttdoc">Constructor for use by derived classes to register their arguments. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00028">expression.cc:28</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Initializer_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Initializer.xhtml">scram::mef::Initializer</a></div><div class="ttdoc">This class operates on input files to initialize analysis constructs like models, fault trees...</div><div class="ttdef"><b>Definition:</b> <a href="initializer_8h_source.xhtml#l00052">initializer.h:52</a></div></div>
<div class="ttc" id="expression_8h_xhtml_aa372d12117108ddbed987471d8b5334c"><div class="ttname"><a href="expression_8h.xhtml#aa372d12117108ddbed987471d8b5334c">scram::mef::Units</a></div><div class="ttdeci">Units</div><div class="ttdoc">Provides units for parameters. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00137">expression.h:137</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a5cf00d8b2ff843ad029a501a89ee572a"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">scram::mef::Expression::Sample</a></div><div class="ttdeci">double Sample() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00033">expression.cc:33</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00049">expression.h:49</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_abda9d5f97c43181cefd518e357bc0334"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#abda9d5f97c43181cefd518e357bc0334">scram::mef::Expression::IsConstant</a></div><div class="ttdeci">virtual bool IsConstant() noexcept</div><div class="ttdoc">Determines if the value of the expression varies. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00049">expression.cc:49</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a488d363190a84f20f7a5ffac34e9fb8d"><div class="ttname"><a href="expression_8h.xhtml#a488d363190a84f20f7a5ffac34e9fb8d">scram::mef::kNumUnits</a></div><div class="ttdeci">const int kNumUnits</div><div class="ttdoc">The number of elements in the Units enum. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00150">expression.h:150</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
