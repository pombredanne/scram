<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>boolean_graph.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">boolean_graph.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="boolean__graph_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file boolean_graph.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of indexed nodes, variables, gates, and the Boolean graph.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// The implementation caters other algorithms like preprocessing.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">/// The main goal is</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">/// to make manipulations and transformations of the graph</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">/// easier to achieve for graph algorithms.</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="boolean__graph_8h.xhtml">boolean_graph.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;boost/math/special_functions/sign.hpp&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;boost/range/algorithm.hpp&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="logger_8h.xhtml">logger.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">core</a> {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keywordtype">int</span> Node::next_index_ = 1e6;  <span class="comment">// Limit for basic events per fault tree!</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keywordtype">void</span> NodeParentManager::AddParent(<span class="keyword">const</span> GatePtr&amp; gate) {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  assert(!parents_.<a class="code" href="classext_1_1linear__map.xhtml#a06ea6f3a7b047a36ebf53e4af2211161">count</a>(gate-&gt;index()) &amp;&amp; <span class="stringliteral">&quot;Adding an existing parent.&quot;</span>);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  parents_.<a class="code" href="classext_1_1linear__map.xhtml#a6ce9a2702adb36c3ae89057a1d968050">data</a>().emplace_back(gate-&gt;index(), gate);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#abad2b0b957b2293afd463ad9322221bd">   47</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Node.xhtml#abad2b0b957b2293afd463ad9322221bd">Node::Node</a>() noexcept : <a class="code" href="classscram_1_1core_1_1Node.xhtml">Node</a>(next_index_++) {}</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Node.xhtml#a3437feaa1260ed4af1d45ac87336514a">   49</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Node.xhtml#abad2b0b957b2293afd463ad9322221bd">Node::Node</a>(<span class="keywordtype">int</span> index) noexcept</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    : index_(index),</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      order_(0),</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      visits_{},</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      opti_value_(0),</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      pos_count_(0),</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      neg_count_(0) {}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<a class="code" href="classscram_1_1core_1_1Node.xhtml#ae4355187379f0f037c3129149b54bb0c">Node::~Node</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Constant.xhtml#a5fde229885cf0878d91a5c51e38ef114">   59</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Constant.xhtml#a5fde229885cf0878d91a5c51e38ef114">Constant::Constant</a>(<span class="keywordtype">bool</span> state) noexcept : state_(state) {}</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keywordtype">int</span> Variable::next_variable_ = 1;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Variable.xhtml#a07b362cbe0f4fad038b6141c6aae5a52">   63</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Variable.xhtml#a07b362cbe0f4fad038b6141c6aae5a52">Variable::Variable</a>() noexcept : <a class="code" href="classscram_1_1core_1_1Node.xhtml">Node</a>(next_variable_++) {}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a2a901d4ed71defc249a88163241f3798">   65</a></span>&#160;<a class="code" href="classscram_1_1core_1_1Gate.xhtml#a2a901d4ed71defc249a88163241f3798">Gate::Gate</a>(<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">Operator</a> type) noexcept</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    : type_(type),</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      state_(kNormalState),</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      mark_(<span class="keyword">false</span>),</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      module_(<span class="keyword">false</span>),</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      coherent_(<span class="keyword">false</span>),</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      vote_number_(0),</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      descendant_(0),</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      ancestor_(0),</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      min_time_(0),</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      max_time_(0) {}</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a9f9390cdf7bfb3c552a7ef843629ddc0">   77</a></span>&#160;<a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a9f9390cdf7bfb3c552a7ef843629ddc0">Gate::Clone</a>() noexcept {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>, module_) &lt;&lt; <span class="stringliteral">&quot;WARNING: Cloning module G&quot;</span> &lt;&lt; <a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>();</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keyword">auto</span> clone = std::make_shared&lt;Gate&gt;(type_);  <span class="comment">// The same type.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  clone-&gt;coherent_ = coherent_;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  clone-&gt;vote_number_ = vote_number_;  <span class="comment">// Copy vote number in case it is K/N.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="comment">// Getting arguments copied.</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  clone-&gt;args_ = args_;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  clone-&gt;gate_args_ = gate_args_;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  clone-&gt;variable_args_ = variable_args_;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  clone-&gt;constant_args_ = constant_args_;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="comment">// Introducing the new parent to the args.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate_args_)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    arg.second-&gt;AddParent(clone);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : variable_args_)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    arg.second-&gt;AddParent(clone);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : constant_args_)</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    arg.second-&gt;AddParent(clone);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordflow">return</span> clone;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#aff8127ed74cf083d742ede72b3c422e6">   97</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#aff8127ed74cf083d742ede72b3c422e6">Gate::TransferArg</a>(<span class="keywordtype">int</span> index, <span class="keyword">const</span> <a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; recipient) noexcept {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  assert(constant_args_.empty() &amp;&amp; <span class="stringliteral">&quot;Improper use case.&quot;</span>);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  assert(index != 0);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  assert(args_.count(index));</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  args_.erase(index);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">auto</span> it_g = ext::find(gate_args_, index)) {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    it_g-&gt;second-&gt;EraseParent(<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>());</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    recipient-&gt;AddArg(index, it_g-&gt;second);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    gate_args_.erase(it_g);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">auto</span> it_v = variable_args_.find(index);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    it_v-&gt;second-&gt;EraseParent(<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>());</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    recipient-&gt;AddArg(index, it_v-&gt;second);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    variable_args_.erase(it_v);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a1094e712f79cb7e54ae2cad296ebcc20">  116</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a1094e712f79cb7e54ae2cad296ebcc20">Gate::ShareArg</a>(<span class="keywordtype">int</span> index, <span class="keyword">const</span> <a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; recipient) noexcept {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  assert(constant_args_.empty() &amp;&amp; <span class="stringliteral">&quot;Improper use case.&quot;</span>);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  assert(index != 0);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  assert(args_.count(index));</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">auto</span> it_g = ext::find(gate_args_, index)) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    recipient-&gt;AddArg(index, it_g-&gt;second);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    recipient-&gt;AddArg(index, variable_args_.find(index)-&gt;second);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#ad60e490f6744a7a33394f8ff77e3d9a1">  127</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ad60e490f6744a7a33394f8ff77e3d9a1">Gate::InvertArgs</a>() noexcept {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  assert(constant_args_.empty() &amp;&amp; <span class="stringliteral">&quot;Improper use case.&quot;</span>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <a class="code" href="classscram_1_1core_1_1Gate.xhtml#ac9970e696aec8b505474676dfc4d34a7">ArgSet</a> inverted_args;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = args_.rbegin(); it != args_.rend(); ++it)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    inverted_args.insert(inverted_args.end(), -*it);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  args_ = std::move(inverted_args);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; arg : gate_args_)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    arg.first *= -1;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; arg : variable_args_)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    arg.first *= -1;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a89ccde99b2c33bb5d323041b70b1a403">  140</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a89ccde99b2c33bb5d323041b70b1a403">Gate::InvertArg</a>(<span class="keywordtype">int</span> existing_arg) noexcept {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  assert(constant_args_.empty() &amp;&amp; <span class="stringliteral">&quot;Improper use case.&quot;</span>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  assert(args_.count(existing_arg));</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  assert(!args_.count(-existing_arg));</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  args_.erase(existing_arg);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  args_.insert(-existing_arg);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">auto</span> it_g = ext::find(gate_args_, existing_arg)) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    it_g-&gt;first *= -1;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">auto</span> it_v = variable_args_.find(existing_arg);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    it_v-&gt;first *= -1;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#afb7c7d1264436f419af973286a4b2439">  157</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#afb7c7d1264436f419af973286a4b2439">Gate::CoalesceGate</a>(<span class="keyword">const</span> <a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; arg_gate) noexcept {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  assert(constant_args_.empty() &amp;&amp; <span class="stringliteral">&quot;Improper use case.&quot;</span>);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  assert(args_.count(arg_gate-&gt;index()) &amp;&amp; <span class="stringliteral">&quot;Cannot join complement gate.&quot;</span>);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  assert(arg_gate-&gt;state() == <a class="code" href="boolean__graph_8h.xhtml#ac030b66fb750e5de6987fe8c5201b008a72cd47d967ae6ad7054c7c40b25065af">kNormalState</a> &amp;&amp; <span class="stringliteral">&quot;Impossible to join.&quot;</span>);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  assert(!arg_gate-&gt;args().empty() &amp;&amp; <span class="stringliteral">&quot;Corrupted gate.&quot;</span>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : arg_gate-&gt;gate_args_) {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    AddArg(arg.first, arg.second);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">if</span> (state_ != <a class="code" href="boolean__graph_8h.xhtml#ac030b66fb750e5de6987fe8c5201b008a72cd47d967ae6ad7054c7c40b25065af">kNormalState</a>)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : arg_gate-&gt;variable_args_) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    AddArg(arg.first, arg.second);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">if</span> (state_ != <a class="code" href="boolean__graph_8h.xhtml#ac030b66fb750e5de6987fe8c5201b008a72cd47d967ae6ad7054c7c40b25065af">kNormalState</a>)</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  args_.erase(arg_gate-&gt;index());  <span class="comment">// Erase at the end to avoid the type change.</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  gate_args_.erase(arg_gate-&gt;index());</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  arg_gate-&gt;EraseParent(<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>());</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a97e099c6298b6f9096546e839066dee4">  179</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a97e099c6298b6f9096546e839066dee4">Gate::JoinNullGate</a>(<span class="keywordtype">int</span> index) noexcept {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  assert(index != 0);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  assert(args_.count(index));</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  assert(gate_args_.count(index));</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  args_.erase(index);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <span class="keyword">auto</span> it_g = gate_args_.find(index);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> null_gate = it_g-&gt;second;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  gate_args_.erase(it_g);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  null_gate-&gt;EraseParent(<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>());</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  assert(null_gate-&gt;type_ == <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  assert(null_gate-&gt;args_.size() == 1);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keywordtype">int</span> arg_index = *null_gate-&gt;args_.begin();</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  arg_index *= boost::math::sign(index);  <span class="comment">// Carry the parent&#39;s sign.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordflow">if</span> (!null_gate-&gt;gate_args_.empty()) {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    AddArg(arg_index, null_gate-&gt;gate_args_.begin()-&gt;second);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!null_gate-&gt;variable_args_.empty()) {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    AddArg(arg_index, null_gate-&gt;variable_args_.begin()-&gt;second);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    assert(!null_gate-&gt;constant_args_.empty());</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    AddArg(arg_index, null_gate-&gt;constant_args_.begin()-&gt;second);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  }</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a1edb26efd1787a3b78e6c982e9491e90">  206</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a1edb26efd1787a3b78e6c982e9491e90">Gate::ProcessConstantArg</a>(<span class="keyword">const</span> <a class="code" href="boolean__graph_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">NodePtr</a>&amp; arg, <span class="keywordtype">bool</span> state) noexcept {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordtype">int</span> index = GetArgSign(arg) * arg-&gt;index();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="keywordflow">if</span> (index &lt; 0)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    state = !state;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="keywordflow">if</span> (state) {  <span class="comment">// Unity state or True index.</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    ProcessTrueArg(index);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  } <span class="keywordflow">else</span> {  <span class="comment">// Null state or False index.</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    ProcessFalseArg(index);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keywordtype">void</span> Gate::ProcessTrueArg(<span class="keywordtype">int</span> index) noexcept {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keywordflow">switch</span> (type_) {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>:</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>:</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      MakeUnity();</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4eed8bff190e6c7a13fbae55bf0b5f52">kNand</a>:</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>:</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      RemoveConstantArg(index);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aba617a41c3a889a71db0701eb3c8bcce">kNor</a>:</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">kNot</a>:</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      Nullify();</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a90ebbd6b1bcd690f663ce1c4bf6a43df">kXor</a>:  <span class="comment">// Special handling due to its internal negation.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      assert(args_.size() == 2);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      EraseArg(index);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      assert(args_.size() == 1);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">kNot</a>;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aa34a0ffa0432bfd3646c4ee783201a73">kVote</a>:  <span class="comment">// (K - 1) / (N - 1).</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      assert(args_.size() &gt; 2);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      EraseArg(index);</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      assert(vote_number_ &gt; 0);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      --vote_number_;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      <span class="keywordflow">if</span> (vote_number_ == 1)</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keywordtype">void</span> Gate::ProcessFalseArg(<span class="keywordtype">int</span> index) noexcept {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="keywordflow">switch</span> (type_) {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aba617a41c3a889a71db0701eb3c8bcce">kNor</a>:</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a90ebbd6b1bcd690f663ce1c4bf6a43df">kXor</a>:</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>:</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      RemoveConstantArg(index);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>:</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>:</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      Nullify();</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4eed8bff190e6c7a13fbae55bf0b5f52">kNand</a>:</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">kNot</a>:</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;      MakeUnity();</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aa34a0ffa0432bfd3646c4ee783201a73">kVote</a>:  <span class="comment">// K / (N - 1).</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      assert(args_.size() &gt; 2);</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      EraseArg(index);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;      <span class="keywordflow">if</span> (vote_number_ == args_.size())</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keywordtype">void</span> Gate::RemoveConstantArg(<span class="keywordtype">int</span> index) noexcept {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  assert(args_.size() &gt; 1 &amp;&amp; <span class="stringliteral">&quot;One-arg gate must have become constant.&quot;</span>);</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  EraseArg(index);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  <span class="keywordflow">if</span> (args_.size() == 1) {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">switch</span> (type_) {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a90ebbd6b1bcd690f663ce1c4bf6a43df">kXor</a>:</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>:</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>:</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aba617a41c3a889a71db0701eb3c8bcce">kNor</a>:</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4eed8bff190e6c7a13fbae55bf0b5f52">kNand</a>:</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">kNot</a>;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;NULL/NOT one-arg gates should not appear.&quot;</span>);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    }</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  }  <span class="comment">// More complex cases with K/N gates are handled by the caller functions.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a499891e2b42db9746c9b8f53ef40ee96">  292</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a499891e2b42db9746c9b8f53ef40ee96">Gate::EraseArg</a>(<span class="keywordtype">int</span> index) noexcept {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  assert(index != 0);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  assert(args_.count(index));</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  args_.erase(index);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">auto</span> it_g = ext::find(gate_args_, index)) {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    it_g-&gt;second-&gt;EraseParent(<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>());</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    gate_args_.erase(it_g);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<span class="keyword">auto</span> it_v = ext::find(variable_args_, index)) {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    it_v-&gt;second-&gt;EraseParent(<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>());</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    variable_args_.erase(it_v);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">auto</span> it_c = constant_args_.find(index);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    it_c-&gt;second-&gt;EraseParent(<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>());</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    constant_args_.erase(it_c);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1Gate.xhtml#a73d12e420aa853c4dba99b50cd7d76a6">  312</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1Gate.xhtml#a73d12e420aa853c4dba99b50cd7d76a6">Gate::EraseAllArgs</a>() noexcept {</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  args_.clear();</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate_args_)</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    arg.second-&gt;EraseParent(<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>());</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  gate_args_.clear();</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : variable_args_)</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    arg.second-&gt;EraseParent(<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>());</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  variable_args_.clear();</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : constant_args_)</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    arg.second-&gt;EraseParent(<a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>());</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  constant_args_.clear();</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keywordtype">void</span> Gate::ProcessDuplicateArg(<span class="keywordtype">int</span> index) noexcept {</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  assert(type_ != <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">kNot</a> &amp;&amp; type_ != <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  assert(args_.count(index));</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Handling duplicate argument for G&quot;</span> &lt;&lt; <a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>();</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <span class="keywordflow">if</span> (type_ == <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aa34a0ffa0432bfd3646c4ee783201a73">kVote</a>)</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">return</span> ProcessVoteGateDuplicateArg(index);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <span class="keywordflow">if</span> (args_.size() == 1) {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Handling the case of one-arg duplicate argument!&quot;</span>;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">switch</span> (type_) {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>:</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>:</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4eed8bff190e6c7a13fbae55bf0b5f52">kNand</a>:</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aba617a41c3a889a71db0701eb3c8bcce">kNor</a>:</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">kNot</a>;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;      <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a90ebbd6b1bcd690f663ce1c4bf6a43df">kXor</a>:</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Handling special case of XOR duplicate argument!&quot;</span>;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        Nullify();</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;      <span class="keywordflow">default</span>:</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;NOT and NULL gates can&#39;t have duplicates.&quot;</span>);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    }</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  }</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;}</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="keywordtype">void</span> Gate::ProcessVoteGateDuplicateArg(<span class="keywordtype">int</span> index) noexcept {</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Handling special case of K/N duplicate argument!&quot;</span>;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  assert(type_ == <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aa34a0ffa0432bfd3646c4ee783201a73">kVote</a>);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  <span class="comment">// This is a very special handling of K/N duplicates.</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <span class="comment">// @(k, [x, x, y_i]) = x &amp; @(k-2, [y_i]) | @(k, [y_i])</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  assert(vote_number_ &gt; 1);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  assert(args_.size() &gt;= vote_number_);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  <span class="keywordflow">if</span> (args_.size() == 2) {  <span class="comment">// @(2, [x, x, z]) = x</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    assert(vote_number_ == 2);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    this-&gt;EraseArg(index);</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    this-&gt;type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  }</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <span class="keywordflow">if</span> (vote_number_ == args_.size()) {  <span class="comment">// @(k, [y_i]) is NULL set.</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    assert(vote_number_ &gt; 2 &amp;&amp; <span class="stringliteral">&quot;Corrupted number of gate arguments.&quot;</span>);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> clone_two = this-&gt;Clone();</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    clone_two-&gt;vote_number(vote_number_ - 2);  <span class="comment">// @(k-2, [y_i])</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    this-&gt;EraseAllArgs();</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    this-&gt;type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    clone_two-&gt;TransferArg(index, shared_from_this());  <span class="comment">// Transfered the x.</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordflow">if</span> (clone_two-&gt;vote_number() == 1)</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      clone_two-&gt;type(<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    this-&gt;AddArg(clone_two-&gt;index(), clone_two);</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  assert(args_.size() &gt; 2);</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  <a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> clone_one = this-&gt;Clone();  <span class="comment">// @(k, [y_i])</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  this-&gt;EraseAllArgs();  <span class="comment">// The main gate turns into OR with x.</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  this-&gt;AddArg(clone_one-&gt;index(), clone_one);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  <span class="keywordflow">if</span> (vote_number_ == 2) {  <span class="comment">// No need for the second K/N gate.</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    clone_one-&gt;TransferArg(index, shared_from_this());  <span class="comment">// Transfered the x.</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    assert(this-&gt;args_.size() == 2);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="comment">// Create the AND gate to combine with the duplicate node.</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">auto</span> and_gate = std::make_shared&lt;Gate&gt;(<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>);</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    this-&gt;AddArg(and_gate-&gt;index(), and_gate);</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    clone_one-&gt;TransferArg(index, and_gate);  <span class="comment">// Transfered the x.</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="comment">// Have to create the second K/N for vote_number &gt; 2.</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a> clone_two = clone_one-&gt;Clone();</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    clone_two-&gt;vote_number(vote_number_ - 2);  <span class="comment">// @(k-2, [y_i])</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordflow">if</span> (clone_two-&gt;vote_number() == 1)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;      clone_two-&gt;type(<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    and_gate-&gt;AddArg(clone_two-&gt;index(), clone_two);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    assert(and_gate-&gt;args().size() == 2);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    assert(this-&gt;args_.size() == 2);</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  }</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  assert(clone_one-&gt;vote_number() &lt;= clone_one-&gt;args().size());</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  <span class="keywordflow">if</span> (clone_one-&gt;args().size() == clone_one-&gt;vote_number())</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    clone_one-&gt;type(<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;}</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="keywordtype">void</span> Gate::ProcessComplementArg(<span class="keywordtype">int</span> index) noexcept {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  assert(type_ != <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">kNot</a> &amp;&amp; type_ != <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  assert(args_.count(-index));</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Handling complement argument for G&quot;</span> &lt;&lt; <a class="code" href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">Node::index</a>();</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  <span class="keywordflow">switch</span> (type_) {</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aba617a41c3a889a71db0701eb3c8bcce">kNor</a>:</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>:</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;      Nullify();</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4eed8bff190e6c7a13fbae55bf0b5f52">kNand</a>:</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a90ebbd6b1bcd690f663ce1c4bf6a43df">kXor</a>:</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>:</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;      MakeUnity();</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aa34a0ffa0432bfd3646c4ee783201a73">kVote</a>:</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;      <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>) &lt;&lt; <span class="stringliteral">&quot;Handling special case of K/N complement argument!&quot;</span>;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      assert(vote_number_ &gt; 1 &amp;&amp; <span class="stringliteral">&quot;Vote number is wrong.&quot;</span>);</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;      assert((args_.size() + 1) &gt; vote_number_ &amp;&amp; <span class="stringliteral">&quot;Malformed K/N gate.&quot;</span>);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;      <span class="comment">// @(k, [x, x&#39;, y_i]) = @(k-1, [y_i])</span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;      EraseArg(-index);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;      --vote_number_;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;      <span class="keywordflow">if</span> (args_.size() == 1) {</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (vote_number_ == 1) {</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;      } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (vote_number_ == args_.size()) {</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        type_ = <a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;      }</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;      assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;Unexpected gate type for complement arg processing.&quot;</span>);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;  }</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;}</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1BooleanGraph.xhtml#aa77f4e61f38f03dc11405dd3f1f3ca04">  444</a></span>&#160;<a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml#aa77f4e61f38f03dc11405dd3f1f3ca04">BooleanGraph::BooleanGraph</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">mef::Gate</a>&amp; root, <span class="keywordtype">bool</span> ccf) noexcept</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    : root_sign_(1),</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;      coherent_(<span class="keyword">true</span>),</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;      normal_(<span class="keyword">true</span>) {</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  <a class="code" href="classscram_1_1core_1_1Node.xhtml#a9ce6bb075f348e9913476fb8c7d3fa8e">Node::ResetIndex</a>();</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  <a class="code" href="classscram_1_1core_1_1Variable.xhtml#a520eaf78ea1987607ec02faa4152aa6c">Variable::ResetIndex</a>();</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;  ProcessedNodes nodes;</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  root_ = ProcessFormula(root.formula(), ccf, &amp;nodes);</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;}</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1BooleanGraph.xhtml#a1ab9558a4c9e876125f0bc2bec55328f">  454</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml#a1ab9558a4c9e876125f0bc2bec55328f">BooleanGraph::Print</a>() {</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  ClearNodeVisits();</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  std::cerr &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="keyword">namespace </span>{<span class="comment"></span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">/// Compares operator enums from mef::Operator and core::Operator</span></div><div class="line"><a name="l00461"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#af50c8fe43f560da6c538f1c7c547b5cd">  461</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define Equal(op) static_cast&lt;int&gt;(op) == static_cast&lt;int&gt;(mef::op)</span></div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="comment">/// @returns true if mef::Operator enum maps exactly to core::Operator enum.</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="comment"></span>constexpr <span class="keywordtype">bool</span> CheckOperatorEnums() {</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="boolean__graph_8cc.xhtml#af50c8fe43f560da6c538f1c7c547b5cd">Equal</a>(kAnd) &amp;&amp; <a class="code" href="boolean__graph_8cc.xhtml#af50c8fe43f560da6c538f1c7c547b5cd">Equal</a>(kOr) &amp;&amp; <a class="code" href="boolean__graph_8cc.xhtml#af50c8fe43f560da6c538f1c7c547b5cd">Equal</a>(kVote) &amp;&amp; <a class="code" href="boolean__graph_8cc.xhtml#af50c8fe43f560da6c538f1c7c547b5cd">Equal</a>(kXor) &amp;&amp;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;         <a class="code" href="boolean__graph_8cc.xhtml#af50c8fe43f560da6c538f1c7c547b5cd">Equal</a>(kNot) &amp;&amp; <a class="code" href="boolean__graph_8cc.xhtml#af50c8fe43f560da6c538f1c7c547b5cd">Equal</a>(kNand) &amp;&amp; <a class="code" href="boolean__graph_8cc.xhtml#af50c8fe43f560da6c538f1c7c547b5cd">Equal</a>(kNor) &amp;&amp; <a class="code" href="boolean__graph_8cc.xhtml#af50c8fe43f560da6c538f1c7c547b5cd">Equal</a>(kNull);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;}</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="preprocessor">#undef OperatorEqual</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;GatePtr BooleanGraph::ProcessFormula(<span class="keyword">const</span> mef::Formula&amp; formula, <span class="keywordtype">bool</span> ccf,</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                                     ProcessedNodes* nodes) noexcept {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  static_assert(kNumOperators == 8, <span class="stringliteral">&quot;Unspecified formula operators.&quot;</span>);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  static_assert(kNumOperators == mef::kNumOperators, <span class="stringliteral">&quot;Operator mismatch.&quot;</span>);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;  static_assert(CheckOperatorEnums(), <span class="stringliteral">&quot;mef::Operator doesn&#39;t map to Operator.&quot;</span>);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  Operator type = <span class="keyword">static_cast&lt;</span>Operator<span class="keyword">&gt;</span>(formula.type());</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;  <span class="keyword">auto</span> parent = std::make_shared&lt;Gate&gt;(type);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  <span class="keywordflow">if</span> (type != kOr &amp;&amp; type != kAnd)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    normal_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;  <span class="keywordflow">switch</span> (type) {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordflow">case</span> kNot:</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordflow">case</span> kXor:</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;      coherent_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordflow">case</span> kVote:</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;      parent-&gt;vote_number(formula.vote_number());</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordflow">case</span> kNull:</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;      null_gates_.push_back(parent);</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;      assert((type == kOr || type == kAnd) &amp;&amp; <span class="stringliteral">&quot;Unexpected gate type.&quot;</span>);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  }</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> mef::BasicEventPtr&amp; basic_event : formula.basic_event_args()) {</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    ProcessBasicEvent(parent, basic_event.get(), ccf, nodes);</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;  }</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> mef::HouseEventPtr&amp; house_event : formula.house_event_args()) {</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    ProcessHouseEvent(parent, *house_event, nodes);</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  }</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> mef::GatePtr&amp; mef_gate : formula.gate_args()) {</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    ProcessGate(parent, *mef_gate, ccf, nodes);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;  }</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> mef::FormulaPtr&amp; sub_form : formula.formula_args()) {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    GatePtr new_gate = ProcessFormula(*sub_form, ccf, nodes);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    parent-&gt;AddArg(new_gate-&gt;index(), new_gate);</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;  }</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;  <span class="keywordflow">return</span> parent;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;}</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ProcessBasicEvent(<span class="keyword">const</span> GatePtr&amp; parent,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                                     mef::BasicEvent* basic_event, <span class="keywordtype">bool</span> ccf,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                     ProcessedNodes* nodes) noexcept {</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;  <span class="keywordflow">if</span> (ccf &amp;&amp; basic_event-&gt;HasCcf()) {  <span class="comment">// Replace with a CCF gate.</span></div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    GatePtr&amp; ccf_gate = nodes-&gt;gates[&amp;basic_event-&gt;ccf_gate()];</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">if</span> (!ccf_gate) {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;      ccf_gate = ProcessFormula(basic_event-&gt;ccf_gate().formula(), ccf, nodes);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    }</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    parent-&gt;AddArg(ccf_gate-&gt;index(), ccf_gate);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    VariablePtr&amp; var = nodes-&gt;variables[basic_event];</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keywordflow">if</span> (!var) {</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;      basic_events_.push_back(basic_event);</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;      var = std::make_shared&lt;Variable&gt;();  <span class="comment">// Sequential indices.</span></div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;      assert(basic_events_.size() == var-&gt;index());</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    }</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    parent-&gt;AddArg(var-&gt;index(), var);</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;  }</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;}</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ProcessHouseEvent(<span class="keyword">const</span> GatePtr&amp; parent,</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                                     <span class="keyword">const</span> mef::HouseEvent&amp; house_event,</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                                     ProcessedNodes* nodes) noexcept {</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;  ConstantPtr&amp; constant = nodes-&gt;constants[&amp;house_event];</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  <span class="keywordflow">if</span> (!constant) {</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    constant = std::make_shared&lt;Constant&gt;(house_event.state());</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    constants_.push_back(constant);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  }</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;  parent-&gt;AddArg(constant-&gt;index(), constant);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;}</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ProcessGate(<span class="keyword">const</span> GatePtr&amp; parent, <span class="keyword">const</span> mef::Gate&amp; gate,</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                               <span class="keywordtype">bool</span> ccf, ProcessedNodes* nodes) noexcept {</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;  GatePtr&amp; pdag_gate = nodes-&gt;gates[&amp;gate];</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;  <span class="keywordflow">if</span> (!pdag_gate) {</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    pdag_gate = ProcessFormula(gate.formula(), ccf, nodes);</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;  }</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;  parent-&gt;AddArg(pdag_gate-&gt;index(), pdag_gate);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;}</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearGateMarks() noexcept { ClearGateMarks(root_); }</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearGateMarks(<span class="keyword">const</span> GatePtr&amp; gate) noexcept {</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;  <span class="keywordflow">if</span> (!gate-&gt;mark())</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;  gate-&gt;mark(<span class="keyword">false</span>);</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&gt;()) {</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    ClearGateMarks(arg.second);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;  }</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;}</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearNodeVisits() noexcept {</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Clearing node visit times...&quot;</span>;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;  ClearNodeVisits(root_);</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Node visit times are clear!&quot;</span>;</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearNodeVisits(<span class="keyword">const</span> GatePtr&amp; gate) noexcept {</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;Visited())</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    gate-&gt;ClearVisits();</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&gt;()) {</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    ClearNodeVisits(arg.second);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;  }</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;Variable&gt;()) {</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordflow">if</span> (arg.second-&gt;Visited())</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;      arg.second-&gt;ClearVisits();</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;  }</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;Constant&gt;()) {</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keywordflow">if</span> (arg.second-&gt;Visited())</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;      arg.second-&gt;ClearVisits();</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;  }</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;}</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearOptiValues() noexcept {</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Clearing OptiValues...&quot;</span>;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;  ClearOptiValues(root_);</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Node OptiValues are clear!&quot;</span>;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;}</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearOptiValues(<span class="keyword">const</span> GatePtr&amp; gate) noexcept {</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;  gate-&gt;opti_value(0);</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&gt;()) {</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    ClearOptiValues(arg.second);</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;  }</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;Variable&gt;()) {</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    arg.second-&gt;opti_value(0);</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;  }</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;  assert(gate-&gt;args&lt;Constant&gt;().empty());</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;}</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearNodeCounts() noexcept {</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Clearing node counts...&quot;</span>;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;  ClearNodeCounts(root_);</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Node counts are clear!&quot;</span>;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearNodeCounts(<span class="keyword">const</span> GatePtr&amp; gate) noexcept {</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;  gate-&gt;ResetCount();</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&gt;()) {</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    ClearNodeCounts(arg.second);</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;  }</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;Variable&gt;()) {</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    arg.second-&gt;ResetCount();</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;  }</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;  assert(gate-&gt;args&lt;Constant&gt;().empty());</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;}</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearDescendantMarks() noexcept {</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Clearing gate descendant marks...&quot;</span>;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  ClearDescendantMarks(root_);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Descendant marks are clear!&quot;</span>;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;}</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearDescendantMarks(<span class="keyword">const</span> GatePtr&amp; gate) noexcept {</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;  gate-&gt;descendant(0);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&gt;()) {</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    ClearDescendantMarks(arg.second);</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;  }</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;}</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearAncestorMarks() noexcept {</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Clearing gate descendant marks...&quot;</span>;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;  ClearAncestorMarks(root_);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Descendant marks are clear!&quot;</span>;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;}</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearAncestorMarks(<span class="keyword">const</span> GatePtr&amp; gate) noexcept {</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;  gate-&gt;ancestor(0);</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&gt;()) {</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    ClearAncestorMarks(arg.second);</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;  }</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;}</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearNodeOrders() noexcept {</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Clearing node order marks...&quot;</span>;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;  ClearNodeOrders(root_);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(DEBUG5) &lt;&lt; <span class="stringliteral">&quot;Node order marks are clear!&quot;</span>;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;}</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="keywordtype">void</span> BooleanGraph::ClearNodeOrders(<span class="keyword">const</span> GatePtr&amp; gate) noexcept {</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;  gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;order())</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    gate-&gt;order(0);</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&gt;()) {</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    ClearNodeOrders(arg.second);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;  }</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;Variable&gt;()) {</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keywordflow">if</span> (arg.second-&gt;order())</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;      arg.second-&gt;order(0);</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;  }</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;  assert(gate-&gt;args&lt;Constant&gt;().empty());</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;}</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="keyword">namespace </span>{  <span class="comment">// Helper facilities to log the BooleanGraph.</span></div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="comment">/// Container for properties of Boolean Graphs.</span></div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="comment"></span><span class="keyword">struct </span>GraphLogger {<span class="comment"></span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="comment">  /// Special handling of the root gate</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="comment">  /// because it doesn&#39;t have parents.</span></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="comment">  /// @param[in] gate  The root gate of the Boolean graph.</span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> GraphLogger(<span class="keyword">const</span> GatePtr&amp; gate) noexcept {</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>.insert(gate-&gt;index());</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;  }</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="comment">  /// Traverses a Boolean graph to collect information.</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="comment">  /// @param[in] gate  The starting gate for traversal.</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> GatherInformation(<span class="keyword">const</span> GatePtr&amp; gate) noexcept {</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;mark())</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;      <span class="keywordflow">return</span>;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    gate-&gt;mark(<span class="keyword">true</span>);</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    Log(gate);</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&gt;()) {</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;      GatherInformation(arg.second);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    }</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;  }</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="comment">  /// Collects data from a gate.</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="comment">  /// @param[in] gate  Valid gate with arguments.</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;<span class="comment">  /// @pre The gate has not been passed before.</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> Log(<span class="keyword">const</span> GatePtr&amp; gate) noexcept {</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    ++<a class="code" href="boolean__graph_8cc.xhtml#a99199821f3f5efcfb592e4c2c7594e1b">gate_types</a>[gate-&gt;type()];</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keywordflow">if</span> (gate-&gt;module())</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;      ++<a class="code" href="boolean__graph_8cc.xhtml#aa58389a4ca1d97263e51566b568dd2d2">num_modules</a>;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&gt;())</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;      <a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>.insert(arg.first);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;Variable&gt;())</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;      <a class="code" href="boolean__graph_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>.insert(arg.first);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; arg : gate-&gt;args&lt;Constant&gt;())</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;      <a class="code" href="boolean__graph_8cc.xhtml#a83e2c81c183daae58ddd088f58f5ad4c">constants</a>.insert(arg.first);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;  }</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="comment">  /// @param[in] container  Collection of indices of elements.</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment">  /// @returns The total number of unique elements.</span></div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> Count(<span class="keyword">const</span> std::unordered_set&lt;int&gt;&amp; container) noexcept {</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="keywordflow">return</span> boost::count_if(container, [&amp;container](<span class="keywordtype">int</span> index) {</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;      <span class="keywordflow">return</span> index &gt; 0 || !container.count(-index);</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    });</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;  }</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="comment">  /// @param[in] container  Collection of indices of elements.</span></div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="comment">  /// @returns The total number of complement elements.</span></div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> CountComplements(<span class="keyword">const</span> std::unordered_set&lt;int&gt;&amp; container) noexcept {</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <span class="keywordflow">return</span> boost::count_if(container, [](<span class="keywordtype">int</span> index) { <span class="keywordflow">return</span> index &lt; 0; });</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;  }</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="comment">  /// @param[in] container  Collection of indices of elements.</span></div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment">  /// @returns The number of literals appearing as positive and negative.</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> CountOverlap(<span class="keyword">const</span> std::unordered_set&lt;int&gt;&amp; container) noexcept {</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <span class="keywordflow">return</span> boost::count_if(container, [&amp;container](<span class="keywordtype">int</span> index) {</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;      <span class="keywordflow">return</span> index &lt; 0 &amp;&amp; container.count(-index);</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    });</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;  }</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#aa58389a4ca1d97263e51566b568dd2d2">  772</a></span>&#160;  <span class="keywordtype">int</span> <a class="code" href="boolean__graph_8cc.xhtml#aa58389a4ca1d97263e51566b568dd2d2">num_modules</a> = 0;  <span class="comment">///&lt; The number of module gates.</span></div><div class="line"><a name="l00773"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">  773</a></span>&#160;<span class="comment"></span>  std::unordered_set&lt;int&gt; <a class="code" href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a>;  <span class="comment">///&lt; Collection of gates.</span></div><div class="line"><a name="l00774"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#a99199821f3f5efcfb592e4c2c7594e1b">  774</a></span>&#160;<span class="comment"></span>  std::array&lt;int, kNumOperators&gt; <a class="code" href="boolean__graph_8cc.xhtml#a99199821f3f5efcfb592e4c2c7594e1b">gate_types</a>{};  <span class="comment">///&lt; Gate type counts.</span></div><div class="line"><a name="l00775"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">  775</a></span>&#160;<span class="comment"></span>  std::unordered_set&lt;int&gt; <a class="code" href="boolean__graph_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a>;  <span class="comment">///&lt; Collection of variables.</span></div><div class="line"><a name="l00776"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#a83e2c81c183daae58ddd088f58f5ad4c">  776</a></span>&#160;<span class="comment"></span>  std::unordered_set&lt;int&gt; <a class="code" href="boolean__graph_8cc.xhtml#a83e2c81c183daae58ddd088f58f5ad4c">constants</a>;  <span class="comment">///&lt; Collection of constants.</span></div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno"><a class="line" href="classscram_1_1core_1_1BooleanGraph.xhtml#a00ba1b942af179e214134ef20c1e68b0">  781</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml#a00ba1b942af179e214134ef20c1e68b0">BooleanGraph::Log</a>() noexcept {</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a> &gt; <a class="code" href="classscram_1_1Logger.xhtml#addb585eb19dfd78f4a82f2e3df74b4e7">scram::Logger::report_level</a>())</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="keywordflow">return</span>;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;  GraphLogger logger(root_);</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;  logger.GatherInformation(root_);</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Boolean graph with root G&quot;</span> &lt;&lt; root_-&gt;index();</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Total # of gates: &quot;</span> &lt;&lt; logger.Count(logger.gates);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of modules: &quot;</span> &lt;&lt; logger.num_modules;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of gates with negative indices: &quot;</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;              &lt;&lt; logger.CountComplements(logger.gates);</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of gates with positive and negative indices: &quot;</span></div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;              &lt;&lt; logger.CountOverlap(logger.gates);</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>, logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>]) &lt;&lt; <span class="stringliteral">&quot;AND gates: &quot;</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                                        &lt;&lt; logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">kAnd</a>];</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>, logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>]) &lt;&lt; <span class="stringliteral">&quot;OR gates: &quot;</span></div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                                       &lt;&lt; logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">kOr</a>];</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>, logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aa34a0ffa0432bfd3646c4ee783201a73">kVote</a>]) &lt;&lt; <span class="stringliteral">&quot;K/N gates: &quot;</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                                         &lt;&lt; logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aa34a0ffa0432bfd3646c4ee783201a73">kVote</a>];</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>, logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a90ebbd6b1bcd690f663ce1c4bf6a43df">kXor</a>]) &lt;&lt; <span class="stringliteral">&quot;XOR gates: &quot;</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                                        &lt;&lt; logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a90ebbd6b1bcd690f663ce1c4bf6a43df">kXor</a>];</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>, logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">kNot</a>]) &lt;&lt; <span class="stringliteral">&quot;NOT gates: &quot;</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                                        &lt;&lt; logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">kNot</a>];</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>, logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4eed8bff190e6c7a13fbae55bf0b5f52">kNand</a>]) &lt;&lt; <span class="stringliteral">&quot;NAND gates: &quot;</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                                         &lt;&lt; logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4eed8bff190e6c7a13fbae55bf0b5f52">kNand</a>];</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>, logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aba617a41c3a889a71db0701eb3c8bcce">kNor</a>]) &lt;&lt; <span class="stringliteral">&quot;NOR gates: &quot;</span></div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                                        &lt;&lt; logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aba617a41c3a889a71db0701eb3c8bcce">kNor</a>];</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">DEBUG5</a>, logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>]) &lt;&lt; <span class="stringliteral">&quot;NULL gates: &quot;</span></div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                                         &lt;&lt; logger.gate_types[<a class="code" href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">kNull</a>];</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;Total # of variables: &quot;</span> &lt;&lt; logger.Count(logger.variables);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of variables with negative indices: &quot;</span></div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;              &lt;&lt; logger.CountComplements(logger.variables);</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;  <a class="code" href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>) &lt;&lt; <span class="stringliteral">&quot;# of variables with positive and negative indices: &quot;</span></div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;              &lt;&lt; logger.CountOverlap(logger.variables);</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;  <a class="code" href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a>(<a class="code" href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">DEBUG4</a>, !logger.constants.empty()) &lt;&lt; <span class="stringliteral">&quot;Total # of constants: &quot;</span></div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                                          &lt;&lt; logger.Count(logger.constants);</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;  ClearGateMarks();</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;}</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;</div><div class="line"><a name="l00824"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#a8f04430e7ed0fd624250f5c67af9c464">  824</a></span>&#160;std::ostream&amp; <a class="code" href="boolean__graph_8cc.xhtml#a8f04430e7ed0fd624250f5c67af9c464">operator&lt;&lt;</a>(std::ostream&amp; os, <span class="keyword">const</span> <a class="code" href="boolean__graph_8h.xhtml#af2e6228a2c90786c707642e946bb1e52">ConstantPtr</a>&amp; constant) {</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;  <span class="keywordflow">if</span> (constant-&gt;Visited())</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;  constant-&gt;Visit(1);</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;  std::string state = constant-&gt;state() ? <span class="stringliteral">&quot;true&quot;</span> : <span class="stringliteral">&quot;false&quot;</span>;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;s(H&quot;</span> &lt;&lt; constant-&gt;index() &lt;&lt; <span class="stringliteral">&quot;) = &quot;</span> &lt;&lt; state &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;  <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;}</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div><div class="line"><a name="l00833"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#a29b45b0f3e2827cadab74f5a98e9e8e0">  833</a></span>&#160;std::ostream&amp; <a class="code" href="boolean__graph_8cc.xhtml#a8f04430e7ed0fd624250f5c67af9c464">operator&lt;&lt;</a>(std::ostream&amp; os, <span class="keyword">const</span> <a class="code" href="boolean__graph_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">VariablePtr</a>&amp; variable) {</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;  <span class="keywordflow">if</span> (variable-&gt;Visited())</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;  variable-&gt;Visit(1);</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;p(B&quot;</span> &lt;&lt; variable-&gt;index() &lt;&lt; <span class="stringliteral">&quot;) = &quot;</span> &lt;&lt; 1 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;  <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;}</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="comment">/// Gate formula signature for printing in the Aralia format.</span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="comment"></span><span class="keyword">struct </span>FormulaSig {</div><div class="line"><a name="l00845"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">  845</a></span>&#160;  std::string <a class="code" href="boolean__graph_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a>;  <span class="comment">///&lt; Beginning of the formula string.</span></div><div class="line"><a name="l00846"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">  846</a></span>&#160;<span class="comment"></span>  std::string <a class="code" href="boolean__graph_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a>;  <span class="comment">///&lt; Operator between the formula arguments.</span></div><div class="line"><a name="l00847"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">  847</a></span>&#160;<span class="comment"></span>  std::string <a class="code" href="boolean__graph_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a>;  <span class="comment">///&lt; The end of the formula string.</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;<span class="comment">/// Provides proper formatting clues for gate formulas.</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="comment">/// @param[in] gate  The gate with the formula to be printed.</span></div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="comment">/// @returns The beginning, operator, and end strings for the formula.</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="comment"></span>FormulaSig GetFormulaSig(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&amp; gate) {</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;  FormulaSig sig = {<span class="stringliteral">&quot;(&quot;</span>, <span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;)&quot;</span>};  <span class="comment">// Defaults for most gate types.</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;  <span class="keywordflow">switch</span> (gate.type()) {</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordflow">case</span> kNand:</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;      sig.begin = <span class="stringliteral">&quot;~(&quot;</span>;  <span class="comment">// Fall-through to AND gate.</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;      sig.op = <span class="stringliteral">&quot; &amp; &quot;</span>;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="keywordflow">case</span> kNor:</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;      sig.begin = <span class="stringliteral">&quot;~(&quot;</span>;  <span class="comment">// Fall-through to OR gate.</span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;      sig.op = <span class="stringliteral">&quot; | &quot;</span>;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="keywordflow">case</span> kXor:</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;      sig.op = <span class="stringliteral">&quot; ^ &quot;</span>;</div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keywordflow">case</span> kNot:</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;      sig.begin = <span class="stringliteral">&quot;~(&quot;</span>;  <span class="comment">// Parentheses are for cases of NOT(NOT Arg).</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <span class="keywordflow">case</span> kNull:</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;      sig.begin = <span class="stringliteral">&quot;&quot;</span>;  <span class="comment">// No need for the parentheses.</span></div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;      sig.end = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keywordflow">case</span> kVote:</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;      sig.begin = <span class="stringliteral">&quot;@(&quot;</span> + std::to_string(gate.vote_number()) + <span class="stringliteral">&quot;, [&quot;</span>;</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;      sig.op = <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;      sig.end = <span class="stringliteral">&quot;])&quot;</span>;</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;  }</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;  <span class="keywordflow">return</span> sig;</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;}</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="comment">/// Provides special formatting for indexed gate names.</span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="comment">/// @param[in] gate  The gate which name must be created.</span></div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="comment">/// @returns The name of the gate with extra information about its state.</span></div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="comment"></span>std::string GetName(<span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">Gate</a>&amp; gate) {</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;  std::string name = <span class="stringliteral">&quot;G&quot;</span>;</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;  <span class="keywordflow">if</span> (gate.state() == kNormalState) {</div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    <span class="keywordflow">if</span> (gate.module())</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;      name += <span class="stringliteral">&quot;M&quot;</span>;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;  } <span class="keywordflow">else</span> {  <span class="comment">// This gate has become constant.</span></div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    name += <span class="stringliteral">&quot;C&quot;</span>;</div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;  }</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;  name += std::to_string(gate.index());</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;  <span class="keywordflow">return</span> name;</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;}</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;</div><div class="line"><a name="l00907"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#a186cf69bc93973bd5af3eb80d89b845b">  907</a></span>&#160;std::ostream&amp; <a class="code" href="boolean__graph_8cc.xhtml#a8f04430e7ed0fd624250f5c67af9c464">operator&lt;&lt;</a>(std::ostream&amp; os, <span class="keyword">const</span> <a class="code" href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">GatePtr</a>&amp; gate) {</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;Visited())</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;  gate-&gt;Visit(1);</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;  <span class="keywordflow">if</span> (gate-&gt;IsConstant()) {</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    std::string state = gate-&gt;state() == <a class="code" href="boolean__graph_8h.xhtml#ac030b66fb750e5de6987fe8c5201b008aec44cbf0ef06b0fda33dc3b276edd6a2">kNullState</a> ? <span class="stringliteral">&quot;false&quot;</span> : <span class="stringliteral">&quot;true&quot;</span>;</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;s(&quot;</span> &lt;&lt; GetName(*gate) &lt;&lt; <span class="stringliteral">&quot;) = &quot;</span> &lt;&lt; state &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;  }</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;  std::string formula;  <span class="comment">// The formula of the gate for printing.</span></div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;  <span class="keyword">const</span> FormulaSig sig = GetFormulaSig(*gate);  <span class="comment">// Formatting for the formula.</span></div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;  <span class="keywordtype">int</span> num_args = gate-&gt;args().size();  <span class="comment">// The number of arguments to print.</span></div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; node : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Gate.xhtml">Gate</a>&gt;()) {</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="keywordflow">if</span> (node.first &lt; 0)</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;      formula += <span class="stringliteral">&quot;~&quot;</span>;  <span class="comment">// Negation.</span></div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    formula += GetName(*node.second);</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="keywordflow">if</span> (--num_args)</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;      formula += sig.op;</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    os &lt;&lt; node.second;</div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;  }</div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;</div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; basic : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Variable.xhtml">Variable</a>&gt;()) {</div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    <span class="keywordflow">if</span> (basic.first &lt; 0)</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;      formula += <span class="stringliteral">&quot;~&quot;</span>;  <span class="comment">// Negation.</span></div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    formula += <span class="stringliteral">&quot;B&quot;</span> + std::to_string(basic.second-&gt;index());</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    <span class="keywordflow">if</span> (--num_args)</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;      formula += sig.op;</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    os &lt;&lt; basic.second;</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;  }</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; constant : gate-&gt;args&lt;<a class="code" href="classscram_1_1core_1_1Constant.xhtml">Constant</a>&gt;()) {</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <span class="keywordflow">if</span> (constant.first &lt; 0)</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;      formula += <span class="stringliteral">&quot;~&quot;</span>;  <span class="comment">// Negation.</span></div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    formula += <span class="stringliteral">&quot;H&quot;</span> + std::to_string(constant.second-&gt;index());</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <span class="keywordflow">if</span> (--num_args)</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;      formula += sig.op;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    os &lt;&lt; constant.second;</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;  }</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;  os &lt;&lt; GetName(*gate) &lt;&lt; <span class="stringliteral">&quot; := &quot;</span> &lt;&lt; sig.begin &lt;&lt; formula &lt;&lt; sig.end &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;  <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;}</div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;</div><div class="line"><a name="l00950"></a><span class="lineno"><a class="line" href="boolean__graph_8cc.xhtml#a751ad5b9fa22eda4a00b23010c27e03d">  950</a></span>&#160;std::ostream&amp; <a class="code" href="boolean__graph_8cc.xhtml#a8f04430e7ed0fd624250f5c67af9c464">operator&lt;&lt;</a>(std::ostream&amp; os, <span class="keyword">const</span> <a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml">BooleanGraph</a>* ft) {</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;  os &lt;&lt; <span class="stringliteral">&quot;BooleanGraph&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span> &lt;&lt; ft-&gt;<a class="code" href="classscram_1_1core_1_1BooleanGraph.xhtml#a2621e916248269f99f5e968dc78e1491">root</a>();</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;  <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;}</div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;}  <span class="comment">// namespace core</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml_a2621e916248269f99f5e968dc78e1491"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml#a2621e916248269f99f5e968dc78e1491">scram::core::BooleanGraph::root</a></div><div class="ttdeci">const GatePtr &amp; root() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00806">boolean_graph.h:806</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_ab366f39e035d7034632ee3f27f8fb380"><div class="ttname"><a href="boolean__graph_8cc.xhtml#ab366f39e035d7034632ee3f27f8fb380">variables</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; variables</div><div class="ttdoc">Collection of variables. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00775">boolean_graph.cc:775</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ac38351bd34c3272ac04f9ba8fa1428ec"><div class="ttname"><a href="boolean__graph_8h.xhtml#ac38351bd34c3272ac04f9ba8fa1428ec">scram::core::GatePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Gate &gt; GatePtr</div><div class="ttdoc">Shared gates in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00060">boolean_graph.h:60</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ad60e490f6744a7a33394f8ff77e3d9a1"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ad60e490f6744a7a33394f8ff77e3d9a1">scram::core::Gate::InvertArgs</a></div><div class="ttdeci">void InvertArgs() noexcept</div><div class="ttdoc">Makes all arguments complements of themselves. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00127">boolean_graph.cc:127</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_a7cdc73646f3e8e6c275b892bc7e615fb"><div class="ttname"><a href="boolean__graph_8cc.xhtml#a7cdc73646f3e8e6c275b892bc7e615fb">end</a></div><div class="ttdeci">std::string end</div><div class="ttdoc">The end of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00847">boolean_graph.cc:847</a></div></div>
<div class="ttc" id="version_8h_xhtml_a08935e0d1ae92ad3bf839e9757fbb53c"><div class="ttname"><a href="version_8h.xhtml#a08935e0d1ae92ad3bf839e9757fbb53c">scram::version::core</a></div><div class="ttdeci">const char * core()</div></div>
<div class="ttc" id="classscram_1_1core_1_1Variable_xhtml_a07b362cbe0f4fad038b6141c6aae5a52"><div class="ttname"><a href="classscram_1_1core_1_1Variable.xhtml#a07b362cbe0f4fad038b6141c6aae5a52">scram::core::Variable::Variable</a></div><div class="ttdeci">Variable() noexcept</div><div class="ttdoc">Creates a new indexed variable with its index assigned sequentially. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00063">boolean_graph.cc:63</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Constant_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Constant.xhtml">scram::core::Constant</a></div><div class="ttdoc">Representation of a node that is a Boolean constant with True or False state. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00223">boolean_graph.h:223</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml">scram::core::Gate</a></div><div class="ttdoc">An indexed gate for use in BooleanGraph. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00302">boolean_graph.h:302</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a499891e2b42db9746c9b8f53ef40ee96"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a499891e2b42db9746c9b8f53ef40ee96">scram::core::Gate::EraseArg</a></div><div class="ttdeci">void EraseArg(int index) noexcept</div><div class="ttdoc">Removes an argument from the arguments container. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00292">boolean_graph.cc:292</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800a4eed8bff190e6c7a13fbae55bf0b5f52"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4eed8bff190e6c7a13fbae55bf0b5f52">scram::core::kNand</a></div><div class="ttdoc">NAND gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00278">boolean_graph.h:278</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800">scram::core::Operator</a></div><div class="ttdeci">Operator</div><div class="ttdoc">Boolean operators of gates for representation, preprocessing, and analysis purposes. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00272">boolean_graph.h:272</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_a99199821f3f5efcfb592e4c2c7594e1b"><div class="ttname"><a href="boolean__graph_8cc.xhtml#a99199821f3f5efcfb592e4c2c7594e1b">gate_types</a></div><div class="ttdeci">std::array&lt; int, kNumOperators &gt; gate_types</div><div class="ttdoc">Gate type counts. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00774">boolean_graph.cc:774</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a06ea6f3a7b047a36ebf53e4af2211161"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a06ea6f3a7b047a36ebf53e4af2211161">ext::linear_map::count</a></div><div class="ttdeci">size_type count(const key_type &amp;key) const </div><div class="ttdoc">Determines if an entry with the given key in the map. </div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00237">linear_map.h:237</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml">scram::core::Node</a></div><div class="ttdoc">An abstract base class that represents a node in a Boolean graph. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00105">boolean_graph.h:105</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a1094e712f79cb7e54ae2cad296ebcc20"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a1094e712f79cb7e54ae2cad296ebcc20">scram::core::Gate::ShareArg</a></div><div class="ttdeci">void ShareArg(int index, const GatePtr &amp;recipient) noexcept</div><div class="ttdoc">Shares this gate&amp;#39;s argument with another gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00116">boolean_graph.cc:116</a></div></div>
<div class="ttc" id="logger_8h_xhtml"><div class="ttname"><a href="logger_8h.xhtml">logger.h</a></div><div class="ttdoc">Logging capability for various purposes, such as warnings and debugging. </div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a4b16e38337f8b0720762dd9fd7852f74">scram::core::kNot</a></div><div class="ttdoc">Boolean negation. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00277">boolean_graph.h:277</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a9f9390cdf7bfb3c552a7ef843629ddc0"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a9f9390cdf7bfb3c552a7ef843629ddc0">scram::core::Gate::Clone</a></div><div class="ttdeci">GatePtr Clone() noexcept</div><div class="ttdoc">Clones arguments and parameters. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00077">boolean_graph.cc:77</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ac030b66fb750e5de6987fe8c5201b008a72cd47d967ae6ad7054c7c40b25065af"><div class="ttname"><a href="boolean__graph_8h.xhtml#ac030b66fb750e5de6987fe8c5201b008a72cd47d967ae6ad7054c7c40b25065af">scram::core::kNormalState</a></div><div class="ttdoc">The default case with any set that is not null or unity. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00291">boolean_graph.h:291</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81eabc16fffa8cbff393a1a5c886ed47f9f5">scram::DEBUG5</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG4. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00076">logger.h:76</a></div></div>
<div class="ttc" id="classscram_1_1Logger_xhtml_addb585eb19dfd78f4a82f2e3df74b4e7"><div class="ttname"><a href="classscram_1_1Logger.xhtml#addb585eb19dfd78f4a82f2e3df74b4e7">scram::Logger::report_level</a></div><div class="ttdeci">static LogLevel report_level()</div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00100">logger.h:100</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_af50c8fe43f560da6c538f1c7c547b5cd"><div class="ttname"><a href="boolean__graph_8cc.xhtml#af50c8fe43f560da6c538f1c7c547b5cd">Equal</a></div><div class="ttdeci">#define Equal(op)</div><div class="ttdoc">Compares operator enums from mef::Operator and core::Operator. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00461">boolean_graph.cc:461</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_a83e2c81c183daae58ddd088f58f5ad4c"><div class="ttname"><a href="boolean__graph_8cc.xhtml#a83e2c81c183daae58ddd088f58f5ad4c">constants</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; constants</div><div class="ttdoc">Collection of constants. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00776">boolean_graph.cc:776</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a45dd2dda57fec8076d4e038dbe51683d">scram::core::kNull</a></div><div class="ttdoc">Special pass-through or NULL gate. This is not NULL set. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00280">boolean_graph.h:280</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800aba617a41c3a889a71db0701eb3c8bcce"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aba617a41c3a889a71db0701eb3c8bcce">scram::core::kNor</a></div><div class="ttdoc">NOR gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00279">boolean_graph.h:279</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml_a00ba1b942af179e214134ef20c1e68b0"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml#a00ba1b942af179e214134ef20c1e68b0">scram::core::BooleanGraph::Log</a></div><div class="ttdeci">void Log() noexcept</div><div class="ttdoc">Writes Boolean graph properties into logs. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00781">boolean_graph.cc:781</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1NodeParentManager_xhtml_ad8205f09f8efdf8fab19078d103cd6e7"><div class="ttname"><a href="classscram_1_1core_1_1NodeParentManager.xhtml#ad8205f09f8efdf8fab19078d103cd6e7">scram::core::NodeParentManager::Gate</a></div><div class="ttdeci">friend class Gate</div><div class="ttdoc">The main manipulator of parent information. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00066">boolean_graph.h:66</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_adb8cb22814af1f414bb264655e3bfe79"><div class="ttname"><a href="boolean__graph_8cc.xhtml#adb8cb22814af1f414bb264655e3bfe79">begin</a></div><div class="ttdeci">std::string begin</div><div class="ttdoc">Beginning of the formula string. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00845">boolean_graph.cc:845</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a52759d491dd25b4f861cfbeeafb31811">scram::core::kAnd</a></div><div class="ttdoc">Simple AND gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00273">boolean_graph.h:273</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ac030b66fb750e5de6987fe8c5201b008aec44cbf0ef06b0fda33dc3b276edd6a2"><div class="ttname"><a href="boolean__graph_8h.xhtml#ac030b66fb750e5de6987fe8c5201b008aec44cbf0ef06b0fda33dc3b276edd6a2">scram::core::kNullState</a></div><div class="ttdoc">The set is null. This indicates no failure. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00292">boolean_graph.h:292</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml_aa77f4e61f38f03dc11405dd3f1f3ca04"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml#aa77f4e61f38f03dc11405dd3f1f3ca04">scram::core::BooleanGraph::BooleanGraph</a></div><div class="ttdeci">BooleanGraph(const mef::Gate &amp;root, bool ccf=false) noexcept</div><div class="ttdoc">Constructs a BooleanGraph starting from the top gate of a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00444">boolean_graph.cc:444</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_ae4355187379f0f037c3129149b54bb0c"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#ae4355187379f0f037c3129149b54bb0c">scram::core::Node::~Node</a></div><div class="ttdeci">virtual ~Node()=0</div><div class="ttdoc">Abstract class. </div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_ac9970e696aec8b505474676dfc4d34a7"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#ac9970e696aec8b505474676dfc4d34a7">scram::core::Gate::ArgSet</a></div><div class="ttdeci">boost::container::flat_set&lt; int &gt; ArgSet</div><div class="ttdoc">An ordered set of gate argument indices. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00321">boolean_graph.h:321</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_aa58389a4ca1d97263e51566b568dd2d2"><div class="ttname"><a href="boolean__graph_8cc.xhtml#aa58389a4ca1d97263e51566b568dd2d2">num_modules</a></div><div class="ttdeci">int num_modules</div><div class="ttdoc">The number of module gates. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00772">boolean_graph.cc:772</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_aff8127ed74cf083d742ede72b3c422e6"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#aff8127ed74cf083d742ede72b3c422e6">scram::core::Gate::TransferArg</a></div><div class="ttdeci">void TransferArg(int index, const GatePtr &amp;recipient) noexcept</div><div class="ttdoc">Transfers this gate&amp;#39;s argument to another gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00097">boolean_graph.cc:97</a></div></div>
<div class="ttc" id="classext_1_1linear__map_xhtml_a6ce9a2702adb36c3ae89057a1d968050"><div class="ttname"><a href="classext_1_1linear__map.xhtml#a6ce9a2702adb36c3ae89057a1d968050">ext::linear_map::data</a></div><div class="ttdeci">container_type &amp; data()</div><div class="ttdef"><b>Definition:</b> <a href="linear__map_8h_source.xhtml#l00394">linear_map.h:394</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aba7b09d6e8fbe414c23705ad24dde6ff"><div class="ttname"><a href="logger_8h.xhtml#aba7b09d6e8fbe414c23705ad24dde6ff">LOG</a></div><div class="ttdeci">#define LOG(level)</div><div class="ttdoc">Logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00055">logger.h:55</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ab011b41d7b669539d11e5b4030f4d78d"><div class="ttname"><a href="boolean__graph_8h.xhtml#ab011b41d7b669539d11e5b4030f4d78d">scram::core::NodePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Node &gt; NodePtr</div><div class="ttdoc">Shared base nodes in the graph. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00258">boolean_graph.h:258</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml"><div class="ttname"><a href="boolean__graph_8h.xhtml">boolean_graph.h</a></div><div class="ttdoc">Classes and facilities to represent simplified fault trees as Boolean graphs with event and gate indi...</div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_a8f04430e7ed0fd624250f5c67af9c464"><div class="ttname"><a href="boolean__graph_8cc.xhtml#a8f04430e7ed0fd624250f5c67af9c464">scram::core::operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const ConstantPtr &amp;constant)</div><div class="ttdoc">Prints Boolean graph nodes in the Aralia format. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00824">boolean_graph.cc:824</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00262">event.h:262</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Constant_xhtml_a5fde229885cf0878d91a5c51e38ef114"><div class="ttname"><a href="classscram_1_1core_1_1Constant.xhtml#a5fde229885cf0878d91a5c51e38ef114">scram::core::Constant::Constant</a></div><div class="ttdeci">Constant(bool state) noexcept</div><div class="ttdoc">Constructs a new constant indexed node. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00059">boolean_graph.cc:59</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml_a1ab9558a4c9e876125f0bc2bec55328f"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml#a1ab9558a4c9e876125f0bc2bec55328f">scram::core::BooleanGraph::Print</a></div><div class="ttdeci">void Print()</div><div class="ttdoc">Prints the Boolean graph in the Aralia format. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00454">boolean_graph.cc:454</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a73d12e420aa853c4dba99b50cd7d76a6"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a73d12e420aa853c4dba99b50cd7d76a6">scram::core::Gate::EraseAllArgs</a></div><div class="ttdeci">void EraseAllArgs() noexcept</div><div class="ttdoc">Clears all the arguments of this gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00312">boolean_graph.cc:312</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a89ccde99b2c33bb5d323041b70b1a403"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a89ccde99b2c33bb5d323041b70b1a403">scram::core::Gate::InvertArg</a></div><div class="ttdeci">void InvertArg(int existing_arg) noexcept</div><div class="ttdoc">Replaces an argument with the complement of it. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00140">boolean_graph.cc:140</a></div></div>
<div class="ttc" id="logger_8h_xhtml_a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04"><div class="ttname"><a href="logger_8h.xhtml#a8cc0e8b39d76d12fd165097dbc8cf81ea2a5fff04371a557db59be045fd44fc04">scram::DEBUG4</a></div><div class="ttdoc">Debugging information for the code inside of DEBUG3. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00075">logger.h:75</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a1edb26efd1787a3b78e6c982e9491e90"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a1edb26efd1787a3b78e6c982e9491e90">scram::core::Gate::ProcessConstantArg</a></div><div class="ttdeci">void ProcessConstantArg(const NodePtr &amp;arg, bool state) noexcept</div><div class="ttdoc">Changes the state of a gate or removes a constant argument. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00206">boolean_graph.cc:206</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_aefe4bda6c02d8395380962ebe1497fc8"><div class="ttname"><a href="boolean__graph_8cc.xhtml#aefe4bda6c02d8395380962ebe1497fc8">op</a></div><div class="ttdeci">std::string op</div><div class="ttdoc">Operator between the formula arguments. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00846">boolean_graph.cc:846</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_af2e6228a2c90786c707642e946bb1e52"><div class="ttname"><a href="boolean__graph_8h.xhtml#af2e6228a2c90786c707642e946bb1e52">scram::core::ConstantPtr</a></div><div class="ttdeci">std::shared_ptr&lt; Constant &gt; ConstantPtr</div><div class="ttdoc">Shared Boolean constants. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00259">boolean_graph.h:259</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a9ce6bb075f348e9913476fb8c7d3fa8e"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a9ce6bb075f348e9913476fb8c7d3fa8e">scram::core::Node::ResetIndex</a></div><div class="ttdeci">static void ResetIndex()</div><div class="ttdoc">Resets the starting index. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00120">boolean_graph.h:120</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a97e099c6298b6f9096546e839066dee4"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a97e099c6298b6f9096546e839066dee4">scram::core::Gate::JoinNullGate</a></div><div class="ttdeci">void JoinNullGate(int index) noexcept</div><div class="ttdoc">Swaps a single argument of a NULL type argument gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00179">boolean_graph.cc:179</a></div></div>
<div class="ttc" id="logger_8h_xhtml_aeb429ee17505f6ecedfc553f75f667af"><div class="ttname"><a href="logger_8h.xhtml#aeb429ee17505f6ecedfc553f75f667af">BLOG</a></div><div class="ttdeci">#define BLOG(level, cond)</div><div class="ttdoc">Conditional logging with a level. </div><div class="ttdef"><b>Definition:</b> <a href="logger_8h_source.xhtml#l00059">logger.h:59</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_abad2b0b957b2293afd463ad9322221bd"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#abad2b0b957b2293afd463ad9322221bd">scram::core::Node::Node</a></div><div class="ttdeci">Node() noexcept</div><div class="ttdoc">Creates a graph node with its index assigned sequentially. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00047">boolean_graph.cc:47</a></div></div>
<div class="ttc" id="boolean__graph_8cc_xhtml_a7880117e5dd7fc82f420e32606266bbd"><div class="ttname"><a href="boolean__graph_8cc.xhtml#a7880117e5dd7fc82f420e32606266bbd">gates</a></div><div class="ttdeci">std::unordered_set&lt; int &gt; gates</div><div class="ttdoc">Collection of gates. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00773">boolean_graph.cc:773</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Variable_xhtml_a520eaf78ea1987607ec02faa4152aa6c"><div class="ttname"><a href="classscram_1_1core_1_1Variable.xhtml#a520eaf78ea1987607ec02faa4152aa6c">scram::core::Variable::ResetIndex</a></div><div class="ttdeci">static void ResetIndex()</div><div class="ttdoc">Resets the starting index for variables. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00252">boolean_graph.h:252</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a893d7b350b1a10c6ab1019c5007da8ae">scram::core::kOr</a></div><div class="ttdoc">Simple OR gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00274">boolean_graph.h:274</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800a90ebbd6b1bcd690f663ce1c4bf6a43df"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800a90ebbd6b1bcd690f663ce1c4bf6a43df">scram::core::kXor</a></div><div class="ttdoc">Exclusive OR gate with two inputs. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00276">boolean_graph.h:276</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_a028cc62c4e510cb3063384dd75a36ed5"><div class="ttname"><a href="boolean__graph_8h.xhtml#a028cc62c4e510cb3063384dd75a36ed5">scram::core::VariablePtr</a></div><div class="ttdeci">std::shared_ptr&lt; Variable &gt; VariablePtr</div><div class="ttdoc">Shared Boolean variables. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00260">boolean_graph.h:260</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1BooleanGraph_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1BooleanGraph.xhtml">scram::core::BooleanGraph</a></div><div class="ttdoc">BooleanGraph is a propositional directed acyclic graph (PDAG). </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00780">boolean_graph.h:780</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_afb7c7d1264436f419af973286a4b2439"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#afb7c7d1264436f419af973286a4b2439">scram::core::Gate::CoalesceGate</a></div><div class="ttdeci">void CoalesceGate(const GatePtr &amp;arg_gate) noexcept</div><div class="ttdoc">Adds arguments of an argument gate to this gate. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00157">boolean_graph.cc:157</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Variable_xhtml"><div class="ttname"><a href="classscram_1_1core_1_1Variable.xhtml">scram::core::Variable</a></div><div class="ttdoc">Boolean variables in a Boolean formula or graph. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00246">boolean_graph.h:246</a></div></div>
<div class="ttc" id="boolean__graph_8h_xhtml_ad4c053147ae98b76f12620441f6d3800aa34a0ffa0432bfd3646c4ee783201a73"><div class="ttname"><a href="boolean__graph_8h.xhtml#ad4c053147ae98b76f12620441f6d3800aa34a0ffa0432bfd3646c4ee783201a73">scram::core::kVote</a></div><div class="ttdoc">Combination, K/N, or Vote gate representation. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00275">boolean_graph.h:275</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Node_xhtml_a62121e217b0da73112af7e07275f2c15"><div class="ttname"><a href="classscram_1_1core_1_1Node.xhtml#a62121e217b0da73112af7e07275f2c15">scram::core::Node::index</a></div><div class="ttdeci">int index() const </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8h_source.xhtml#l00123">boolean_graph.h:123</a></div></div>
<div class="ttc" id="classscram_1_1core_1_1Gate_xhtml_a2a901d4ed71defc249a88163241f3798"><div class="ttname"><a href="classscram_1_1core_1_1Gate.xhtml#a2a901d4ed71defc249a88163241f3798">scram::core::Gate::Gate</a></div><div class="ttdeci">Gate(Operator type) noexcept</div><div class="ttdoc">Creates an indexed gate with its unique index. </div><div class="ttdef"><b>Definition:</b> <a href="boolean__graph_8cc_source.xhtml#l00065">boolean_graph.cc:65</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
