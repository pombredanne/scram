<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>xml_stream.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">xml_stream.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="xml__stream_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2016 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file xml_stream.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Implementation of facilities to stream for XML data.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="xml__stream_8h.xhtml">xml_stream.h</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classscram_1_1XmlStreamElement.xhtml#af62b9ffc844dba0b3fa143136dc5ac50">   29</a></span>&#160;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#af62b9ffc844dba0b3fa143136dc5ac50">XmlStreamElement::XmlStreamElement</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name, std::ostream&amp; out)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    : <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>(name, 0, nullptr, out) {}</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#af62b9ffc844dba0b3fa143136dc5ac50">XmlStreamElement::XmlStreamElement</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name, <span class="keywordtype">int</span> indent,</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                                   <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* parent, std::ostream&amp; out)</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    : kName_(name),</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      kIndent_(indent),</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;      accept_attributes_(<span class="keyword">true</span>),</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      accept_elements_(<span class="keyword">true</span>),</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      accept_text_(<span class="keyword">true</span>),</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      active_(<span class="keyword">true</span>),</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      parent_(parent),</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      out_(out) {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordflow">if</span> (*kName_ == <span class="charliteral">&#39;\0&#39;</span>)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;The element name can&#39;t be empty.&quot;</span>);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keywordflow">if</span> (kIndent_ &lt; 0)</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;Negative indentation.&quot;</span>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordflow">if</span> (parent_) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">if</span> (!parent_-&gt;active_)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;The parent is inactive.&quot;</span>);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    parent_-&gt;active_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  out_ &lt;&lt; std::string(kIndent_, <span class="charliteral">&#39; &#39;</span>) &lt;&lt; <span class="stringliteral">&quot;&lt;&quot;</span> &lt;&lt; kName_;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classscram_1_1XmlStreamElement.xhtml#aa037855782bfe491fba08d37a40eca2c">   55</a></span>&#160;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#aa037855782bfe491fba08d37a40eca2c">XmlStreamElement::~XmlStreamElement</a>() noexcept {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  assert(active_ &amp;&amp; <span class="stringliteral">&quot;The child element may still be alive.&quot;</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  assert(!(parent_ &amp;&amp; parent_-&gt;active_) &amp;&amp; <span class="stringliteral">&quot;The parent must be inactive.&quot;</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordflow">if</span> (parent_)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    parent_-&gt;active_ = <span class="keyword">true</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keywordflow">if</span> (accept_attributes_) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    out_ &lt;&lt; <span class="stringliteral">&quot;/&gt;\n&quot;</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (accept_elements_) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    out_ &lt;&lt; std::string(kIndent_, <span class="charliteral">&#39; &#39;</span>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;closing_tag:</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    out_ &lt;&lt; <span class="stringliteral">&quot;&lt;/&quot;</span> &lt;&lt; kName_ &lt;&lt; <span class="stringliteral">&quot;&gt;\n&quot;</span>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    assert(accept_text_ &amp;&amp; <span class="stringliteral">&quot;The element is in unspecified state.&quot;</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">goto</span> closing_tag;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">   72</a></span>&#160;<a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> <a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">XmlStreamElement::AddChild</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordflow">if</span> (!active_)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;The element is inactive.&quot;</span>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordflow">if</span> (!accept_elements_)</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;Too late to add elements.&quot;</span>);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keywordflow">if</span> (*name == <span class="charliteral">&#39;\0&#39;</span>)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1XmlStreamError.xhtml">XmlStreamError</a>(<span class="stringliteral">&quot;Element name can&#39;t be empty.&quot;</span>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keywordflow">if</span> (accept_text_)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    accept_text_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">if</span> (accept_attributes_) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    accept_attributes_ = <span class="keyword">false</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    out_ &lt;&lt; <span class="stringliteral">&quot;&gt;\n&quot;</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classscram_1_1XmlStreamElement.xhtml#af62b9ffc844dba0b3fa143136dc5ac50">XmlStreamElement</a>(name, kIndent_ + 2, <span class="keyword">this</span>, out_);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1XmlStreamElement_xhtml_ac8227ce1d2bf22ab83d3055a8e98fb2d"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">scram::XmlStreamElement::AddChild</a></div><div class="ttdeci">XmlStreamElement AddChild(const char *name)</div><div class="ttdoc">Adds a child element to the element. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8cc_source.xhtml#l00072">xml_stream.cc:72</a></div></div>
<div class="ttc" id="xml__stream_8h_xhtml"><div class="ttname"><a href="xml__stream_8h.xhtml">xml_stream.h</a></div><div class="ttdoc">Facilities to stream data in XML format. </div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1XmlStreamElement_xhtml"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml">scram::XmlStreamElement</a></div><div class="ttdoc">Writer of data formed as an XML element to a stream. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00065">xml_stream.h:65</a></div></div>
<div class="ttc" id="classscram_1_1XmlStreamElement_xhtml_aa037855782bfe491fba08d37a40eca2c"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml#aa037855782bfe491fba08d37a40eca2c">scram::XmlStreamElement::~XmlStreamElement</a></div><div class="ttdeci">~XmlStreamElement() noexcept</div><div class="ttdoc">Puts the closing tag. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8cc_source.xhtml#l00055">xml_stream.cc:55</a></div></div>
<div class="ttc" id="structscram_1_1XmlStreamError_xhtml"><div class="ttname"><a href="structscram_1_1XmlStreamError.xhtml">scram::XmlStreamError</a></div><div class="ttdoc">Errors in using XML streaming facilities. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00031">xml_stream.h:31</a></div></div>
<div class="ttc" id="classscram_1_1XmlStreamElement_xhtml_af62b9ffc844dba0b3fa143136dc5ac50"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml#af62b9ffc844dba0b3fa143136dc5ac50">scram::XmlStreamElement::XmlStreamElement</a></div><div class="ttdeci">XmlStreamElement(const char *name, std::ostream &amp;out)</div><div class="ttdoc">Constructs a root streamer for the XML element data ready to accept attributes, elements, text. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8cc_source.xhtml#l00029">xml_stream.cc:29</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Dec 12 2016 00:21:15 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
